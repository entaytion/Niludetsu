# --- –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
from pypresence import Presence
import time
import discord
from discord.ext import commands
import os
import yaml
import asyncio
import traceback
from typing import Union
# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Niludetsu ---
from Niludetsu.utils.cog_loader import cog_loader
from Niludetsu.utils.config_loader import bot_state
from Niludetsu.utils.command_sync import CommandSync
from Niludetsu.utils.embed import create_embed
from Niludetsu.utils.database import create_tables
from Niludetsu.core.server_checker import ServerChecker
from Niludetsu.core.level_system import LevelSystem

# --- Discord Bot setup ---
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
with open('config/config.yaml', 'r', encoding='utf-8') as f:
    config = yaml.safe_load(f)

# RPC (Rich Presence) setup
client_id = config['bot']['client_id']
rpc = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
command_sync = CommandSync(bot)
server_checker = None
level_system = None

# --- RPC (Rich Presence) ---
async def update_presence():
    global rpc
    try:
        rpc = Presence(client_id)
        await asyncio.to_thread(rpc.connect)
        start_time = time.time()
        await asyncio.to_thread(
            rpc.update,
            state="Creating a Discord bot!",
            details="In development...",
            start=start_time,
            large_image="bot_icon",
            large_text="Bot in action!",
            buttons=[
                {"label": "Server", "url": "https://discord.gg/HxwZ6ceKKj"},
                {"label": "Site", "url": "https://niludetsu.vercel.app"},
            ],
        )
        print("‚úÖ Rich Presence –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Rich Presence: {e}")
        traceback.print_exc()

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤ ---
async def load_cogs():
    for folder in os.listdir("cogs"):
        if os.path.isdir(f"cogs/{folder}"):
            for filename in os.listdir(f"cogs/{folder}"):
                if filename.endswith(".py"):
                    cog_path = f"{folder}/{filename[:-3]}"
                    try:
                        await bot.load_extension(f"cogs.{folder}.{filename[:-3]}")
                        cog_loader.add_loaded_cog(cog_path, success=True)
                    except Exception as e:
                        error_msg = str(e)
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞ {cog_path}:")
                        traceback.print_exc()
                        cog_loader.add_loaded_cog(cog_path, success=False, error=error_msg)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
async def log_command_error(ctx_or_interaction: Union[commands.Context, discord.Interaction], error: commands.CommandError):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        log_channel = bot.get_channel(int(config['logging']['main_channel']))
        if log_channel:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if isinstance(ctx_or_interaction, discord.Interaction):
                user = ctx_or_interaction.user
                channel = ctx_or_interaction.channel
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã, –≤–∫–ª—é—á–∞—è –≥—Ä—É–ø–ø—É
                if ctx_or_interaction.command:
                    if hasattr(ctx_or_interaction.command, 'parent') and ctx_or_interaction.command.parent:
                        command_name = f"/{ctx_or_interaction.command.parent.name} {ctx_or_interaction.command.name}"
                    else:
                        command_name = f"/{ctx_or_interaction.command.name}"
                else:
                    command_name = "/–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            else:
                user = ctx_or_interaction.author
                channel = ctx_or_interaction.channel
                if ctx_or_interaction.command:
                    command_name = f"{ctx_or_interaction.prefix}{ctx_or_interaction.command.qualified_name}"
                else:
                    command_name = f"{ctx_or_interaction.prefix}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            error_embed = discord.Embed(
                title="üö´ –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã",
                description=f"```py\n{str(error.__class__.__name__)}: {str(error)}\n```",
                color=discord.Color.red(),
                timestamp=discord.utils.utcnow()
            )
            error_embed.add_field(
                name="–ö–æ–º–∞–Ω–¥–∞", 
                value=f"`{command_name}`", 
                inline=True
            )
            error_embed.add_field(
                name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
                value=f"{user.mention}\n(`{user.id}`)", 
                inline=True
            )
            error_embed.add_field(
                name="–ö–∞–Ω–∞–ª", 
                value=f"{channel.mention}\n(`{channel.id}`)", 
                inline=True
            )
            
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º traceback –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            trace = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
            if len(trace) > 1000:
                trace = trace[:997] + "..."
            error_embed.add_field(
                name="Traceback",
                value=f"```py\n{trace}\n```",
                inline=False
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ —ç–º–±–µ–¥
            owner_id = config['settings']['owner_id']
            await log_channel.send(f"<@{owner_id}>", embed=error_embed)
            
            # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ {command_name}:")
            traceback.print_exc()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        traceback.print_exc()

@bot.event
async def on_command_error(ctx: commands.Context, error: commands.CommandError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Ç–µ–∫—Å—Ç
        if isinstance(error, commands.UserInputError):
            error_message = str(error)
        
        error_embed = discord.Embed(
            description=error_message,
            color=discord.Color.red()
        )
        await ctx.send(embed=error_embed, delete_after=10)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await log_command_error(ctx, error)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")
        traceback.print_exc()

@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: commands.CommandError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ slash-–∫–æ–º–∞–Ω–¥"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Ç–µ–∫—Å—Ç
        if isinstance(error, commands.UserInputError):
            error_message = str(error)
        
        error_embed = discord.Embed(
            description=error_message,
            color=discord.Color.red()
        )
        
        if not interaction.response.is_done():
            await interaction.response.send_message(embed=error_embed, ephemeral=True)
        else:
            await interaction.followup.send(embed=error_embed, ephemeral=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await log_command_error(interaction, error)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")
        traceback.print_exc()

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
async def create_default_files():
    try:
        if not os.path.exists('config'):
            os.makedirs('config')
            
        if not os.path.exists('config/database.db'):
            open('config/database.db', 'w').close()
            
        if not os.path.exists('config/hash.yaml'):
            with open('config/hash.yaml', 'w', encoding='utf-8') as f:
                yaml.dump({}, f)

        if not os.path.exists('config/config.yaml'):
            from Niludetsu.utils.default_config import default_config
            with open('config/config.yaml', 'w', encoding='utf-8') as f:
                yaml.dump(default_config, f, allow_unicode=True)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        traceback.print_exc()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è ---
@bot.event
async def setup_hook():
    try:
        global server_checker, level_system
        bot_state.reset()
        await create_default_files()
        create_tables()  # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        await load_cogs()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        server_checker = ServerChecker(bot)
        level_system = LevelSystem(bot)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ setup_hook: {e}")
        traceback.print_exc()

@bot.event
async def on_ready():
    try:
        print(f"‚úÖ –ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        await bot.change_presence(
            activity=discord.Activity(
                type=discord.ActivityType.listening,
                name="–°–æ–∑–¥–∞—ë–º –≤–∞–π–± –Ω–∞ Discord!"
            )
        )
        await command_sync.sync_commands()
        await update_presence() 
        cog_loader.print_loaded_cogs()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_ready: {e}")
        traceback.print_exc()

@bot.event
async def on_message(message):
    try:
        if level_system:
            await level_system.process_message(message)
        await bot.process_commands(message)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        traceback.print_exc()

bot.run(config['bot']['main_token'])

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ---
# --- Unreleased ---
""" async def run_bots():
    client = commands.Bot(command_prefix='!', intents=discord.Intents.all())
    client2 = commands.Bot(command_prefix='.', intents=discord.Intents.all())
    
    try:
        await asyncio.gather(
            client.start(config['bot']['main_token']),
            client2.start(config['bot']['voice_token'])
        )
    except KeyboardInterrupt:
        await client.close()
        await client2.close()

if __name__ == '__main__':
    asyncio.run(run_bots()) """