# --- –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
import time, os, discord, yaml, asyncio, traceback, discord
from dotenv import load_dotenv
from discord.ext import commands
from typing import Union
# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ Niludetsu ---
from Niludetsu import CogLoader, BotState, CommandSync, Embed, Database, LevelSystem
load_dotenv()
token = os.getenv("MAIN_TOKEN")

# --- Discord Bot setup ---
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)
print("‚úÖ Discord –∏–Ω—Ç–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
async def load_config():
    try:
        db = Database()
        config = await db.fetch_all("SELECT category, key, value FROM settings")
        config_dict = {}
        for row in config:
            if row['category'] not in config_dict:
                config_dict[row['category']] = {}
            config_dict[row['category']][row['key']] = row['value']
        return config_dict
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

try:
    config = asyncio.run(load_config())
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
try:
    command_sync = CommandSync(bot)
    server_checker = None
    level_system = None
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
    raise

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤ ---
async def load_cogs():
    loaded_count = 0
    error_count = 0
    
    for folder in os.listdir("cogs"):
        if os.path.isdir(f"cogs/{folder}"):
            for filename in os.listdir(f"cogs/{folder}"):
                if filename.endswith(".py"):
                    cog_path = f"{folder}/{filename[:-3]}"
                    try:
                        await bot.load_extension(f"cogs.{folder}.{filename[:-3]}")
                        CogLoader.add_loaded_cog(cog_path, success=True)
                        loaded_count += 1
                    except Exception as e:
                        error_msg = str(e)
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞ {cog_path}: {error_msg}")
                        traceback.print_exc()
                        CogLoader.add_loaded_cog(cog_path, success=False, error=error_msg)
                        error_count += 1
                        
    print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {loaded_count}, –û—à–∏–±–æ–∫: {error_count}")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ---
async def log_command_error(ctx_or_interaction: Union[commands.Context, discord.Interaction], error: commands.CommandError):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        log_channel = bot.get_channel(int(config['logging']['main_channel']))
        if log_channel:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if isinstance(ctx_or_interaction, discord.Interaction):
                user = ctx_or_interaction.user
                channel = ctx_or_interaction.channel
                if ctx_or_interaction.command:
                    if hasattr(ctx_or_interaction.command, 'parent') and ctx_or_interaction.command.parent:
                        command_name = f"/{ctx_or_interaction.command.parent.name} {ctx_or_interaction.command.name}"
                    else:
                        command_name = f"/{ctx_or_interaction.command.name}"
                else:
                    command_name = "/–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            else:
                user = ctx_or_interaction.author
                channel = ctx_or_interaction.channel
                if ctx_or_interaction.command:
                    command_name = f"{ctx_or_interaction.prefix}{ctx_or_interaction.command.qualified_name}"
                else:
                    command_name = f"{ctx_or_interaction.prefix}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            error_text = f"{str(error.__class__.__name__)}: {str(error)}"
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ {command_name}: {error_text}")

            error_embed = Embed.error(
                description=f"```py\n{error_text}\n```",
                timestamp=discord.utils.utcnow()
            )
            error_embed.add_field(
                name="–ö–æ–º–∞–Ω–¥–∞", 
                value=f"`{command_name}`", 
                inline=True
            )
            error_embed.add_field(
                name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
                value=f"{user.mention}\n(`{user.id}`)", 
                inline=True
            )
            error_embed.add_field(
                name="–ö–∞–Ω–∞–ª", 
                value=f"{channel.mention}\n(`{channel.id}`)", 
                inline=True
            )
            
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º traceback –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            trace = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
            if len(trace) > 1000:
                trace = trace[:997] + "..."
            error_embed.add_field(
                name="Traceback",
                value=f"```py\n{trace}\n```",
                inline=False
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ —ç–º–±–µ–¥
            owner_id = config['settings']['owner_id']
            await log_channel.send(f"<@{owner_id}>", embed=error_embed)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        traceback.print_exc()

@bot.event
async def on_command_error(ctx: commands.Context, error: commands.CommandError):
    if isinstance(error, commands.CommandNotFound):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
    await log_command_error(ctx, error)

@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: commands.CommandError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ slash-–∫–æ–º–∞–Ω–¥"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Ç–µ–∫—Å—Ç
        if isinstance(error, commands.UserInputError):
            error_message = str(error)
        
        error_embed = Embed.error(description=error_message)
        
        if not interaction.response.is_done():
            await interaction.response.send_message(embed=error_embed, ephemeral=True)
        else:
            await interaction.followup.send(embed=error_embed, ephemeral=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await log_command_error(interaction, error)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")
        traceback.print_exc()

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è ---
@bot.event
async def setup_hook():
    try:
        global server_checker, level_system
        BotState.reset()
        db = Database()
        await db.init()
        bot.db = db
        await load_cogs()
        level_system = LevelSystem(bot)
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ setup_hook: {e}")
        traceback.print_exc()
        raise

@bot.event
async def on_ready():
    try:
        print(f"‚úÖ –ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        await bot.change_presence(
            activity=discord.Activity(
                type=discord.ActivityType.listening,
                name="–°–æ–∑–¥–∞—ë–º –≤–∞–π–± –Ω–∞ Discord!"
            )
        )
        print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥...")
        await command_sync.sync_commands()
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        CogLoader.print_loaded_cogs()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ on_ready: {e}")
        traceback.print_exc()

@bot.event
async def on_message(message):
    try:
        if level_system:
            await level_system.process_message(message)
        await bot.process_commands(message)
    except Exception as e:
        traceback.print_exc()

@bot.event
async def on_error(event, *args, **kwargs):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ {event}: {traceback.format_exc()}")

if __name__ == "__main__":
    try:
        print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.run(token)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise