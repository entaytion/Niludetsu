# --- –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
from pypresence import Presence
import time
import discord
from discord.ext import commands
import os
import yaml
import asyncio
from Niludetsu.utils.cog_loader import cog_loader
from Niludetsu.utils.config_loader import bot_state
from Niludetsu.utils.command_sync import CommandSync
from typing import Union

# --- Discord Bot setup ---
intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
with open('config/config.yaml', 'r', encoding='utf-8') as f:
    config = yaml.safe_load(f)

# RPC (Rich Presence) setup
client_id = config['bot']['client_id']
rpc = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CommandSync
command_sync = CommandSync(bot)

# --- RPC (Rich Presence) ---
async def update_presence():
    global rpc
    try:
        rpc = Presence(client_id)
        await asyncio.to_thread(rpc.connect)
        start_time = time.time()
        await asyncio.to_thread(
            rpc.update,
            state="Creating a Discord bot!",
            details="In development...",
            start=start_time,
            large_image="bot_icon",
            large_text="Bot in action!",
            buttons=[
                {"label": "Server", "url": "https://discord.gg/HxwZ6ceKKj"},
                {"label": "Site", "url": "https://niludetsu.vercel.app"},
            ],
        )
        print("‚úÖ Rich Presence –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Rich Presence: {e}")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–≥–æ–≤ ---
async def load_cogs():
    for folder in os.listdir("cogs"):
        if os.path.isdir(f"cogs/{folder}"):
            for filename in os.listdir(f"cogs/{folder}"):
                if filename.endswith(".py"):
                    cog_path = f"{folder}/{filename[:-3]}"
                    try:
                        await bot.load_extension(f"cogs.{folder}.{filename[:-3]}")
                        cog_loader.add_loaded_cog(cog_path, success=True)
                    except Exception as e:
                        error_msg = str(e).split(':')[0]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–∏–ø –æ—à–∏–±–∫–∏
                        cog_loader.add_loaded_cog(cog_path, success=False, error=error_msg)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
async def log_command_error(ctx_or_interaction: Union[commands.Context, discord.Interaction], error: commands.CommandError):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        log_channel = bot.get_channel(int(config['logging']['main_channel']))
        if log_channel:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if isinstance(ctx_or_interaction, discord.Interaction):
                user = ctx_or_interaction.user
                channel = ctx_or_interaction.channel
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –∫–æ–º–∞–Ω–¥—ã, –≤–∫–ª—é—á–∞—è –≥—Ä—É–ø–ø—É
                if ctx_or_interaction.command:
                    if hasattr(ctx_or_interaction.command, 'parent') and ctx_or_interaction.command.parent:
                        command_name = f"/{ctx_or_interaction.command.parent.name} {ctx_or_interaction.command.name}"
                    else:
                        command_name = f"/{ctx_or_interaction.command.name}"
                else:
                    command_name = "/–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            else:
                user = ctx_or_interaction.author
                channel = ctx_or_interaction.channel
                if ctx_or_interaction.command:
                    command_name = f"{ctx_or_interaction.prefix}{ctx_or_interaction.command.qualified_name}"
                else:
                    command_name = f"{ctx_or_interaction.prefix}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            error_embed = discord.Embed(
                title="üö´ –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã",
                description=f"```py\n{str(error.__class__.__name__)}: {str(error)}\n```",
                color=discord.Color.red(),
                timestamp=discord.utils.utcnow()
            )
            error_embed.add_field(
                name="–ö–æ–º–∞–Ω–¥–∞", 
                value=f"`{command_name}`", 
                inline=True
            )
            error_embed.add_field(
                name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 
                value=f"{user.mention}\n(`{user.id}`)", 
                inline=True
            )
            error_embed.add_field(
                name="–ö–∞–Ω–∞–ª", 
                value=f"{channel.mention}\n(`{channel.id}`)", 
                inline=True
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º traceback –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞
            if not isinstance(error, commands.UserInputError):
                import traceback
                trace = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
                if len(trace) > 1000:
                    trace = trace[:997] + "..."
                error_embed.add_field(
                    name="Traceback",
                    value=f"```py\n{trace}\n```",
                    inline=False
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏–Ω–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∏ —ç–º–±–µ–¥
            owner_id = config['settings']['owner_id']
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

@bot.event
async def on_command_error(ctx: commands.Context, error: commands.CommandError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Ç–µ–∫—Å—Ç
        if isinstance(error, commands.UserInputError):
            error_message = str(error)
        
        await ctx.send(error_message, delete_after=10)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await log_command_error(ctx, error)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")

@bot.tree.error
async def on_app_command_error(interaction: discord.Interaction, error: commands.CommandError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ slash-–∫–æ–º–∞–Ω–¥"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!"
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë —Ç–µ–∫—Å—Ç
        if isinstance(error, commands.UserInputError):
            error_message = str(error)
        
        if not interaction.response.is_done():
            await interaction.response.send_message(error_message, ephemeral=True)
        else:
            await interaction.followup.send(error_message, ephemeral=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await log_command_error(interaction, error)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")

# --- –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
async def create_default_files():
    if not os.path.exists('config'):
        os.makedirs('config')
        
    if not os.path.exists('config/database.db'):
        open('config/database.db', 'w').close()
        
    if not os.path.exists('config/hash.yaml'):
        with open('config/hash.yaml', 'w', encoding='utf-8') as f:
            yaml.dump({}, f)

    if not os.path.exists('config/config.yaml'):
        from Niludetsu.utils.default_config import default_config
        with open('config/config.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(default_config, f, allow_unicode=True)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è ---
@bot.event
async def setup_hook():
    bot_state.reset()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await create_default_files()
    await load_cogs()

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
@bot.event
async def on_ready():
    print(f"‚úÖ –ë–æ—Ç {bot.user} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.listening,
            name="–°–æ–∑–¥–∞—ë–º –≤–∞–π–± –Ω–∞ Discord!"
        )
    )
    await command_sync.sync_commands()
    await update_presence()
    cog_loader.print_loaded_cogs()

bot.run(config['bot']['token'])