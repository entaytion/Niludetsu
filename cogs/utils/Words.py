import discord
from discord.ext import commands
import asyncio
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.constants import Emojis
from Niludetsu.database.db import Database
import re

class Words(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.words_channels = set()
        self.last_word = {}  # {channel_id: last_word}
        self.last_user = {}  # {channel_id: user_id}
        self.used_words = {}  # {channel_id: set(words)}
        self.forum_channel_id = 1338883900877049876  # ID —Ñ–æ—Ä—É–º-–∫–∞–Ω–∞–ª–∞
        self.words_thread_id = None  # ID –≤–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞
        asyncio.create_task(self._initialize())

    async def _initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        await self.db.init()
        await self.load_channels()
        await self.load_words()
        await self.ensure_words_thread()

    async def ensure_words_thread(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
        try:
            forum = self.bot.get_channel(self.forum_channel_id)
            if not forum:
                print(f"‚ùå –§–æ—Ä—É–º-–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.forum_channel_id}")
                return

            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ—Ç–∫—É —Å –∏–≥—Ä–æ–π –≤ —Å–ª–æ–≤–∞
            for thread in forum.threads:
                if thread.name == "üî§ –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞":
                    self.words_thread_id = thread.id
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–µ—Ç–∫–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞: {thread.id}")
                    break

            if not self.words_thread_id:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É –∏ —ç–º–±–µ–¥
                embed = Embed(
                    title="üî§ –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞",
                    description="–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n"
                               f"{Emojis.DOT} –ö–∞–∂–¥–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ\n"
                               f"{Emojis.DOT} –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –Ω–∞–∑–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n"
                               f"{Emojis.DOT} –û–¥–∏–Ω –∏–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –¥–≤–∞ —Å–ª–æ–≤–∞ –ø–æ–¥—Ä—è–¥\n"
                               f"{Emojis.DOT} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ\n\n"
                               "–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.",
                    color="DEFAULT"
                )
                thread = await forum.create_thread(
                    name="üî§ –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞",
                    embed=embed,
                    auto_archive_duration=4320  # 3 –¥–Ω—è
                )
                self.words_thread_id = thread.thread.id
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ç–∫–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞: {thread.thread.id}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self.db.execute(
                    "INSERT OR IGNORE INTO words_channels (channel_id, last_word) VALUES (?, ?)",
                    str(thread.thread.id), ""
                )
                self.words_channels.add(thread.thread.id)
                self.last_word[thread.thread.id] = ""
                self.used_words[thread.thread.id] = set()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞: {e}")

    async def load_words(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            results = await self.db.fetch_all(
                "SELECT channel_id, last_word, used_words FROM words_channels"
            )
            for row in results:
                channel_id = int(row['channel_id'])
                self.last_word[channel_id] = row['last_word']
                self.used_words[channel_id] = set(row['used_words'].split(',')) if row['used_words'] else set()
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def save_word(self, channel_id: int, word: str, user_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if channel_id in self.words_channels:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
                if channel_id not in self.used_words:
                    self.used_words[channel_id] = set()
                self.used_words[channel_id].add(word.lower())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                used_words_str = ','.join(self.used_words[channel_id])
                await self.db.execute(
                    """
                    UPDATE words_channels 
                    SET last_word = ?, used_words = ?, updated_at = CURRENT_TIMESTAMP
                    WHERE channel_id = ?
                    """,
                    word.lower(), used_words_str, str(channel_id)
                )
                self.last_word[channel_id] = word.lower()
                self.last_user[channel_id] = user_id
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥
                await self.update_words_embed(channel_id)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")

    async def update_words_embed(self, channel_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä—ã"""
        try:
            channel = self.bot.get_channel(channel_id)
            if channel:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in channel.history(limit=10):
                    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å —ç–º–±–µ–¥–æ–º
                    if message.author == self.bot.user and message.embeds:
                        embed = message.embeds[0]
                        if embed.title == "üî§ –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞":
                            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥
                            new_embed = Embed(
                                title="üî§ –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞",
                                description=f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                                          f"{Emojis.DOT} –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ: `{self.last_word[channel_id]}`\n"
                                          f"{Emojis.DOT} –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞: `{self.last_word[channel_id][-1].upper()}`\n"
                                          f"{Emojis.DOT} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–ª–æ–≤: `{len(self.used_words[channel_id])}`",
                                color="DEFAULT"
                            )
                            await message.edit(embed=new_embed)
                            return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–º–±–µ–¥–∞: {e}")

    async def load_channels(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            results = await self.db.fetch_all(
                "SELECT channel_id FROM words_channels"
            )
            self.words_channels = set(int(row['channel_id']) for row in results)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}")

    def is_valid_word(self, word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤–∞"""
        # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
        return bool(re.match(r'^[–∞-—è—ë–ê-–Ø–Å]+$', word))

    @commands.command(name="aewords")
    @commands.has_permissions(administrator=True)
    async def aewords(self, ctx):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –≤–µ—Ç–∫—É
            await self.ensure_words_thread()
            thread = self.bot.get_channel(self.words_thread_id)
            
            if thread:
                await ctx.send(
                    embed=Embed(
                        title=f"{Emojis.SUCCESS} –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                        description=f"–í–µ—Ç–∫–∞ –¥–ª—è –∏–≥—Ä—ã: {thread.mention}\n"
                                  f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ: `{self.last_word.get(thread.id, '–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞')}`",
                        color="GREEN"
                    )
                )
            else:
                await ctx.send(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                        description="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –≤–µ—Ç–∫—É –¥–ª—è –∏–≥—Ä—ã",
                        color="RED"
                    )
                )
        except Exception as e:
            await ctx.send(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    color="RED"
                )
            )

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ –Ω–µ –∏–≥—Ä–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        if message.author.bot or message.channel.id not in self.words_channels:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–æ—Ç –∂–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞
        if message.channel.id in self.last_user and self.last_user[message.channel.id] == message.author.id:
            await message.delete()
            return

        word = message.content.strip().lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–ª–æ–≤–∞
        if not self.is_valid_word(word):
            await message.delete()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞
        if word in self.used_words.get(message.channel.id, set()):
            await message.delete()
            await message.channel.send(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"–°–ª–æ–≤–æ `{word}` —É–∂–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ!",
                    color="RED"
                ),
                delete_after=5
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É —Å–ª–æ–≤–∞
        last_word = self.last_word.get(message.channel.id, "")
        if last_word and word[0] != last_word[-1]:
            await message.delete()
            await message.channel.send(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –±—É–∫–≤—É `{last_word[-1].upper()}`!",
                    color="RED"
                ),
                delete_after=5
            )
            return

        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ
        await self.save_word(message.channel.id, word, message.author.id)
        await message.add_reaction("‚úÖ")

    @commands.Cog.listener()
    async def on_ready(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        invalid_channels = set()
        for channel_id in self.words_channels:
            channel = self.bot.get_channel(channel_id)
            if not channel:
                print(f"‚ùå –ö–∞–Ω–∞–ª –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {channel_id}")
                invalid_channels.add(channel_id)
                
        # –£–¥–∞–ª—è–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã
        self.words_channels -= invalid_channels
        for channel_id in invalid_channels:
            if channel_id in self.last_word:
                del self.last_word[channel_id]
            if channel_id in self.used_words:
                del self.used_words[channel_id]
        
        if invalid_channels:
            await self.load_channels()

async def setup(bot):
    await bot.add_cog(Words(bot)) 