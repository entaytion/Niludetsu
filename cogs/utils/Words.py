import discord
from discord.ext import commands
import asyncio
import json
import re
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.constants import Emojis
from Niludetsu.database.db import Database

class Words(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.forum_channel_id = 1338883900877049876  # ID —Ñ–æ—Ä—É–º-–∫–∞–Ω–∞–ª–∞
        self.words_thread_id = None  # ID –≤–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞
        self.ready = False
        asyncio.create_task(self._initialize())

    async def _initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        await self.bot.wait_until_ready()
        await self.db.init()
        self.ready = True
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ID –≤–µ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = await self.db.fetch_one(
            "SELECT thread_id FROM games WHERE game_type = 'words' AND forum_id = ?",
            str(self.forum_channel_id)
        )
        if result and result['thread_id']:
            self.words_thread_id = int(result['thread_id'])
            
        await self.ensure_words_thread()

    async def ensure_words_thread(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
        if not self.ready:
            return

        try:
            forum = self.bot.get_channel(self.forum_channel_id)
            if not forum:
                print(f"‚ùå –§–æ—Ä—É–º-–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.forum_channel_id}")
                return

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ—Ç–∫—É
            if self.words_thread_id:
                thread = self.bot.get_channel(self.words_thread_id)
                if thread and not thread.archived:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
                    return  # –í–µ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É –∏ —ç–º–±–µ–¥
            embed = Embed(
                title="üî§ –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞",
                description="–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:\n"
                           f"{Emojis.DOT} –ö–∞–∂–¥–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ\n"
                           f"{Emojis.DOT} –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∂–µ –Ω–∞–∑–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n"
                           f"{Emojis.DOT} –û–¥–∏–Ω –∏–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –¥–≤–∞ —Å–ª–æ–≤–∞ –ø–æ–¥—Ä—è–¥\n"
                           f"{Emojis.DOT} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º —á–∏—Å–ª–µ\n\n"
                           "–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! –ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.",
                color="DEFAULT"
            )
            thread = await forum.create_thread(
                name="üî§ –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞",
                embed=embed,
                auto_archive_duration=4320  # 3 –¥–Ω—è
            )
            self.words_thread_id = thread.thread.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–µ—Ç–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.execute(
                """
                INSERT INTO games (channel_id, game_type, forum_id, thread_id, created_at, updated_at)
                VALUES (?, 'words', ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                ON CONFLICT(channel_id) DO UPDATE SET 
                thread_id = ?, updated_at = CURRENT_TIMESTAMP
                """,
                str(thread.thread.id), str(self.forum_channel_id), str(thread.thread.id),
                str(thread.thread.id)
            )
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ç–∫–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞: {thread.thread.id}")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ—Ç–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞: {e}")

    def is_valid_word(self, word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤–∞"""
        # –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
        return bool(re.match(r'^[–∞-—è—ë–ê-–Ø–Å]+$', word))

    async def get_last_word(self, channel_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            result = await self.db.fetch_one(
                "SELECT last_value FROM games WHERE channel_id = ? AND game_type = 'words'",
                str(channel_id)
            )
            return result['last_value'] if result and result['last_value'] else ""
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–ª–æ–≤–∞: {e}")
            return ""

    async def get_used_words(self, channel_id: int) -> set:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            result = await self.db.fetch_one(
                "SELECT used_values FROM games WHERE channel_id = ? AND game_type = 'words'",
                str(channel_id)
            )
            if result and result['used_values']:
                try:
                    return set(json.loads(result['used_values']))
                except json.JSONDecodeError:
                    print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON")
                    return set()
            return set()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤: {e}")
            return set()

    async def save_word(self, channel_id: int, word: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            used_words = await self.get_used_words(channel_id)
            used_words.add(word.lower())

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await self.db.execute(
                """INSERT INTO games (channel_id, game_type, last_value, used_values, updated_at) 
                   VALUES (?, 'words', ?, ?, CURRENT_TIMESTAMP)
                   ON CONFLICT(channel_id) DO UPDATE SET 
                   last_value = ?, used_values = ?, updated_at = CURRENT_TIMESTAMP""",
                str(channel_id), word, json.dumps(list(used_words)),
                word, json.dumps(list(used_words))
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
            await self.db.execute(
                """INSERT OR IGNORE INTO words (word, language, part_of_speech) 
                   VALUES (?, 'ru', 'noun')""",
                word.lower()
            )

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞: {e}")

    async def update_words_embed(self, channel_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–≥—Ä—ã"""
        try:
            channel = self.bot.get_channel(channel_id)
            if channel:
                last_word = await self.get_last_word(channel_id)
                used_words = await self.get_used_words(channel_id)

                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in channel.history(limit=10):
                    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å —ç–º–±–µ–¥–æ–º
                    if message.author == self.bot.user and message.embeds:
                        embed = message.embeds[0]
                        if embed.title == "üî§ –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞":
                            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥
                            new_embed = Embed(
                                title="üî§ –ò–≥—Ä–∞ –≤ —Å–ª–æ–≤–∞",
                                description=f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                                          f"{Emojis.DOT} –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ: `{last_word}`\n"
                                          f"{Emojis.DOT} –°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞: `{last_word[-1].upper() if last_word else '–õ—é–±–∞—è –±—É–∫–≤–∞'}`\n"
                                          f"{Emojis.DOT} –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–ª–æ–≤: `{len(used_words)}`",
                                color="DEFAULT"
                            )
                            await message.edit(embed=new_embed)
                            return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–º–±–µ–¥–∞: {e}")

    async def is_word_exists(self, word: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ"""
        try:
            result = await self.db.fetch_one(
                "SELECT COUNT(*) FROM words WHERE word = ? AND language = 'ru' AND part_of_speech = 'noun'",
                word.lower()
            )
            return bool(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–ª–æ–≤–∞: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º —Å–ª–æ–≤–æ

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞"""
        if message.author.bot or not isinstance(message.channel, discord.Thread):
            return
            
        if message.channel.id != self.words_thread_id:
            return
            
        word = message.content.lower().strip()
        if not self.is_valid_word(word):
            return
            
        try:
            last_word = await self.get_last_word(message.channel.id)
            used_words = await self.get_used_words(message.channel.id)
            
            if last_word:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ last_word –Ω–µ –ø—É—Å—Ç–æ–π
                if word[0] != last_word[-1]:
                    await message.reply(
                        f"‚ùå –°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ –±—É–∫–≤—É **{last_word[-1]}**!",
                        delete_after=5
                    )
                    return
                    
            if word in used_words:
                await message.reply(
                    "‚ùå –≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ!",
                    delete_after=5
                )
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ
            await self.save_word(message.channel.id, word)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–æ–±—ã—Ç–∏–∏ on_message: {e}")

async def setup(bot):
    await bot.add_cog(Words(bot)) 