import discord
from discord.ext import commands
from discord.ext import tasks
import datetime
import re
import pytz
from typing import Optional
from Niludetsu.database.db import Database
from Niludetsu.utils.constants import Emojis
from discord import Embed
import asyncio

class BumpReminder(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.check_bumps.start()
        self.timezone = pytz.timezone('Europe/Moscow')
        self.bump_role = None
        self.ready = False
        self.last_number = {}
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —ç–º–±–µ–¥–æ–≤
        self.colors = {
            'red': discord.Color.red(),
            'green': discord.Color.green(),
            'blue': discord.Color.blue(),
            'yellow': discord.Color.yellow()
        }
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º–µ–Ω–∞ –±–æ—Ç–æ–≤
        self.bot_names = {
            302050872383242240: "DISBOARD",
            1059103014025171014: "DSGroup",
            464272403766444044: "SD.C Monitoring",
            315926021457051650: "Server Monitoring",
            575776004233232386: "DSMonitoring"
        }
        asyncio.create_task(self._initialize())
        
    async def load_numbers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏ –±–∞–º–ø–æ–≤ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
            bump_times = await self.db.fetch_all(
                "SELECT bot_id, next_bump FROM bump_reminders"
            )
            
            print(f"üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {len(bump_times)}")
            
            for record in bump_times:
                try:
                    bot_id = int(record['bot_id'])
                    next_bump = datetime.datetime.fromisoformat(record['next_bump'])
                    self.last_number[bot_id] = next_bump
                    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –±–æ—Ç–∞ {bot_id}: {next_bump}")
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ –±–∞–º–ø–∞ –¥–ª—è –±–æ—Ç–∞ {record.get('bot_id', 'Unknown')}: {str(e)}")
                    continue
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∏—Å–µ–ª: {e}")
            import traceback
            traceback.print_exc()

    async def _initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        try:
            await self.bot.wait_until_ready()  # –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
            await self.db.init()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            await self.db.execute("DROP TABLE IF EXISTS bump_reminders")
            await self.db.execute("""
                CREATE TABLE bump_reminders (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    bot_id TEXT UNIQUE NOT NULL,
                    bot_name TEXT NOT NULL,
                    next_bump TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ bump_reminders —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º ID —Ä–æ–ª–∏ –¥–ª—è –ø–∏–Ω–≥–∞
            result = await self.db.fetch_one(
                "SELECT value FROM settings WHERE category = 'bump_reminder' AND key = 'role'"
            )
            if result and result['value']:
                self.bump_role = int(result['value'])
                
            await self.load_numbers()
            self.ready = True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
        
    def cog_unload(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞"""
        self.check_bumps.cancel()
        
    def get_current_time(self) -> datetime.datetime:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
        return datetime.datetime.now(self.timezone)
        
    def localize_time(self, dt: datetime.datetime) -> datetime.datetime:
        """–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"""
        if dt.tzinfo is None:
            return self.timezone.localize(dt)
        return dt.astimezone(self.timezone)
        
    def parse_discord_timestamp(self, content: str) -> Optional[datetime.datetime]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏ Discord –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <t:timestamp>
            match = re.search(r'<t:(\d+)(?::[RFDTd])?>', content)
            if match:
                timestamp = int(match.group(1))
                return datetime.datetime.fromtimestamp(timestamp, self.timezone)
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏: {e}")
            return None
            
    def extract_time_from_text(self, text: str, bot_id: int) -> Optional[datetime.datetime]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞–º–ø–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            if not text:
                return None

            # –î–ª—è Disboard
            if bot_id == 302050872383242240:
                if "Bump done!" in text:
                    return self.get_current_time() + datetime.timedelta(hours=2)

            # –î–ª—è DSGroup
            elif bot_id == 1059103014025171014:
                # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <t:timestamp:R>
                timestamp_match = re.search(r'<t:(\d+):[Rf]>', text)
                if timestamp_match:
                    timestamp = int(timestamp_match.group(1))
                    return datetime.datetime.fromtimestamp(timestamp, self.timezone)

            # –î–ª—è SD.C Monitoring
            elif bot_id == 464272403766444044:
                # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ <t:timestamp:T>
                timestamp_match = re.search(r'<t:(\d+):[RT]>', text)
                if timestamp_match:
                    timestamp = int(timestamp_match.group(1))
                    return datetime.datetime.fromtimestamp(timestamp, self.timezone)

            # –î–ª—è Server Monitoring
            elif bot_id == 315926021457051650:
                # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
                time_match = re.search(r'available in (\d{2}):(\d{2}):(\d{2})', text)
                if time_match:
                    hours = int(time_match.group(1))
                    minutes = int(time_match.group(2))
                    seconds = int(time_match.group(3))
                    total_seconds = hours * 3600 + minutes * 60 + seconds
                    return self.get_current_time() + datetime.timedelta(seconds=total_seconds)

            # –î–ª—è DSMonitoring
            elif bot_id == 575776004233232386:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ª–∞–π–∫
                if "–í—ã —É—Å–ø–µ—à–Ω–æ –ª–∞–π–∫–Ω—É–ª–∏ —Å–µ—Ä–≤–µ—Ä" in text or "–°–ª–µ–¥—É—é—â–∏–π –ª–∞–π–∫" in text:
                    # –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–°–µ–≥–æ–¥–Ω—è, –≤ HH:MM"
                    time_match = re.search(r'–°–ª–µ–¥—É—é—â–∏–π –ª–∞–π–∫.*?–≤ (\d{2}:\d{2})', text)
                    if time_match:
                        time_str = time_match.group(1)
                        hour, minute = map(int, time_str.split(':'))
                        next_time = self.get_current_time().replace(hour=hour, minute=minute, second=0, microsecond=0)
                        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                        if next_time <= self.get_current_time():
                            next_time += datetime.timedelta(hours=4)
                        return next_time
                    return self.get_current_time() + datetime.timedelta(hours=4)

            return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±–æ—Ç–∞ {bot_id}: {e}")
            print(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text}")
            return None
            
    async def update_bump_time(self, bot_id: str, next_bump: Optional[datetime.datetime], bot_name: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞–º–ø–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if next_bump:
                await self.db.execute(
                    """
                    INSERT INTO bump_reminders (bot_id, next_bump, bot_name)
                    VALUES (?, ?, ?)
                    ON CONFLICT(bot_id) DO UPDATE SET
                    next_bump = ?, bot_name = ?
                    """,
                    bot_id, next_bump, bot_name,
                    next_bump, bot_name
                )
            else:
                await self.db.execute(
                    "DELETE FROM bump_reminders WHERE bot_id = ?",
                    bot_id
                )
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –±–∞–º–ø–∞: {e}")
            
    async def process_message_with_delay(self, message: discord.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç–º–±–µ–¥–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result_channel = await self.db.fetch_one(
                "SELECT value FROM settings WHERE category = 'bump_reminder' AND key = 'channel'"
            )
            result_bots = await self.db.fetch_one(
                "SELECT value FROM settings WHERE category = 'bump_reminder' AND key = 'allowed_bots'"
            )
            
            if not result_channel or not result_bots:
                return
                
            channel_id = int(result_channel['value'])
            bot_ids_str = result_bots['value'].strip('[]').replace(' ', '')
            allowed_bots = [int(bot_id.strip()) for bot_id in bot_ids_str.split(',') if bot_id.strip()]
            
            if message.author.id not in allowed_bots:
                return
                
            bot_name = self.bot_names.get(message.author.id, "unknown")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞–º–ø–∞
            next_bump = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–µ–¥—ã
            if message.embeds:
                for embed in message.embeds:
                    if embed.description:
                        print(f"üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–±–µ–¥ –æ—Ç –±–æ—Ç–∞ {bot_name}: {embed.description}")
                        next_bump = self.extract_time_from_text(embed.description, message.author.id)
                        if next_bump:
                            break
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç–º–±–µ–¥–∞—Ö, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if not next_bump and message.content:
                print(f"üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –±–æ—Ç–∞ {bot_name}: {message.content}")
                next_bump = self.extract_time_from_text(message.content, message.author.id)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if next_bump:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è –±–∞–º–ø–∞ –¥–ª—è –±–æ—Ç–∞ {bot_name} ({message.author.id}): {next_bump}")
                await self.db.execute(
                    """
                    INSERT INTO bump_reminders (bot_id, bot_name, next_bump)
                    VALUES (?, ?, ?)
                    ON CONFLICT(bot_id) DO UPDATE SET
                    bot_name = ?, next_bump = ?
                    """,
                    str(message.author.id), bot_name, next_bump.isoformat(),
                    bot_name, next_bump.isoformat()
                )
                
                self.last_number[message.author.id] = next_bump
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                channel = self.bot.get_channel(channel_id)
                if channel:
                    embed = discord.Embed(
                        title=f"{Emojis.SUCCESS} –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞–º–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                        description=(
                            f"{Emojis.DOT} **–ë–æ—Ç:** {bot_name}\n"
                            f"{Emojis.DOT} **–°–ª–µ–¥—É—é—â–∏–π –±–∞–º–ø:** <t:{int(next_bump.timestamp())}:R>"
                        ),
                        color=self.colors['green']
                    )
                    await channel.send(embed=embed)
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—Ä–µ–º—è –±–∞–º–ø–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –±–æ—Ç–∞ {bot_name}")
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            
    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if message.author.bot:
            await self.process_message_with_delay(message)
            
    @tasks.loop(minutes=1)
    async def check_bumps(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –±–∞–º–ø–æ–≤"""
        try:
            bump_times = await self.db.fetch_all(
                "SELECT bot_id, bot_name, next_bump FROM bump_reminders"
            )
            
            if not bump_times:
                return
                
            current_time = self.get_current_time()
            
            for record in bump_times:
                try:
                    bot_id = int(record['bot_id'])
                    next_bump = datetime.datetime.fromisoformat(record['next_bump'])
                    bot_name = record['bot_name']
                    
                    if next_bump <= current_time:
                        result_channel = await self.db.fetch_one(
                            "SELECT value FROM settings WHERE category = 'bump_reminder' AND key = 'channel'"
                        )
                        
                        if not result_channel:
                            continue
                            
                        channel = self.bot.get_channel(int(result_channel['value']))
                        if not channel:
                            continue
                        
                        embed = discord.Embed(
                            title=f"{Emojis.DOT} –ü–æ—Ä–∞ –±–∞–º–ø–∏—Ç—å!",
                            description=f"–ú–æ–∂–Ω–æ –±–∞–º–ø–∏—Ç—å –±–æ—Ç–∞ **{bot_name}**!",
                            color=self.colors['yellow']
                        )
                        
                        await channel.send(
                            f"<@&{self.bump_role}>" if self.bump_role is not None else "",
                            embed=embed
                        )
                        
                        await self.db.execute(
                            "DELETE FROM bump_reminders WHERE bot_id = ?",
                            str(bot_id)
                        )
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–º–ø–∞: {e}")
                    continue
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ check_bumps: {e}")
            
    @commands.command(
        name="checkbump",
        aliases=["bump", "check_bump"],
        description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞–º–ø–∞"
    )
    async def check_bump(self, ctx: commands.Context, bot_name: str = None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–∞–º–ø–∞"""
        try:
            bump_times = await self.db.fetch_all(
                "SELECT bot_id, bot_name, next_bump FROM bump_reminders"
            )
            
            if not bump_times:
                embed = discord.Embed(
                    title=f"{Emojis.ERROR} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    description="–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–µ–¥—É—é—â–∏—Ö –±–∞–º–ø–∞—Ö",
                    color=self.colors['red']
                )
                return await ctx.send(embed=embed)
            
            current_time = self.get_current_time()
            bumps_info = []
            
            for record in bump_times:
                try:
                    next_bump = datetime.datetime.fromisoformat(record['next_bump'])
                    record_bot_name = record['bot_name']
                    
                    if bot_name and bot_name.lower() != record_bot_name.lower():
                        continue
                        
                    time_left = next_bump - current_time
                    if time_left.total_seconds() > 0:
                        bumps_info.append(
                            f"{Emojis.DOT} **{record_bot_name}:** "
                            f"<t:{int(next_bump.timestamp())}:R>"
                        )
                        
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ –±–∞–º–ø–∞: {e}")
                    continue
                    
            if not bumps_info:
                description = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–µ–¥—É—é—â–∏—Ö –±–∞–º–ø–∞—Ö"
                if bot_name:
                    description = f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–ª–µ–¥—É—é—â–µ–º –±–∞–º–ø–µ –¥–ª—è –±–æ—Ç–∞ **{bot_name}**"
                    
                embed = discord.Embed(
                    title=f"{Emojis.ERROR} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                    description=description,
                    color=self.colors['red']
                )
            else:
                embed = discord.Embed(
                    title=f"{Emojis.DOT} –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–∏—Ö –±–∞–º–ø–æ–≤",
                    description="\n".join(bumps_info),
                    color=self.colors['blue']
                )
                
            await ctx.send(embed=embed)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã check_bump: {e}")
            import traceback
            traceback.print_exc()

async def setup(bot):
    await bot.add_cog(BumpReminder(bot)) 