import discord
from discord.ext import commands
from discord import ui
import asyncio
import yaml
import os
from Niludetsu.utils.embed import create_embed
from Niludetsu.utils.emojis import EMOJIS

def load_config():
    with open('config/config.yaml', 'r', encoding='utf-8') as f:
        return yaml.safe_load(f)

class VoiceChannelManager:
    def __init__(self):
        self.voice_channels = {}
        self.load_channels()
        self.config = load_config()
    
    def load_channels(self):
        if os.path.exists('config/voice_channels.yaml'):
            with open('config/voice_channels.yaml', 'r', encoding='utf-8') as f:
                self.voice_channels = yaml.safe_load(f)
    
    def save_channels(self):
        with open('config/voice_channels.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(self.voice_channels, f)
    
    def add_channel(self, user_id: str, channel_id: int):
        self.voice_channels[str(user_id)] = channel_id
        self.save_channels()
    
    def remove_channel(self, user_id: str):
        if str(user_id) in self.voice_channels:
            del self.voice_channels[str(user_id)]
            self.save_channels()
    
    def get_channel(self, user_id: str) -> int:
        return self.voice_channels.get(str(user_id))

class VoiceChannelView(ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ID —ç–º–æ–¥–∑–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.config = load_config()
        
        # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –Ω–µ—Ç —ç–º–æ–¥–∑–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        self.emojis = {
            'crown': self.config.get('EMOJI_CROWN', 'üëë'),
            'users': self.config.get('EMOJI_USERS', 'üë•'),
            'numbers': self.config.get('EMOJI_NUMBERS', 'üî¢'),
            'lock': self.config.get('EMOJI_LOCK', 'üîí'),
            'pencil': self.config.get('EMOJI_PENCIL', '‚úèÔ∏è'),
            'eye': self.config.get('EMOJI_EYE', 'üëÅ'),
            'ban': self.config.get('EMOJI_BAN', 'üö´'),
            'mute': self.config.get('EMOJI_MUTE', 'üîá'),
            'music': self.config.get('EMOJI_MUSIC', 'üéµ')
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ID –≤ –æ–±—ä–µ–∫—Ç—ã —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –∫–∞–∫ ID
        for key, value in self.emojis.items():
            if isinstance(value, str) and value.isdigit():
                self.emojis[key] = f"<:custom_{key}:{value}>"

    @discord.ui.button(emoji=discord.PartialEmoji(name="VoiceCrown", id="1332417411370057781"), style=discord.ButtonStyle.gray, row=0)
    async def transfer_ownership(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_voice_action(interaction, "transfer")

    @discord.ui.button(emoji=discord.PartialEmoji(name="VoiceUsers", id="1332418260435603476"), style=discord.ButtonStyle.gray, row=0)
    async def manage_access(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_voice_action(interaction, "access")

    @discord.ui.button(emoji=discord.PartialEmoji(name="VoiceNumbers", id="1332418493915725854"), style=discord.ButtonStyle.gray, row=0)
    async def change_limit(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_voice_action(interaction, "limit")

    @discord.ui.button(emoji=discord.PartialEmoji(name="VoiceLock", id="1332418712304615495"), style=discord.ButtonStyle.gray, row=0)
    async def lock_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_voice_action(interaction, "lock")

    @discord.ui.button(emoji=discord.PartialEmoji(name="VoicePencil", id="1332418910242471967"), style=discord.ButtonStyle.gray, row=1)
    async def rename_channel(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_voice_action(interaction, "rename")

    @discord.ui.button(emoji=discord.PartialEmoji(name="VoiceVisible", id="1332419077184163920"), style=discord.ButtonStyle.gray, row=1)
    async def toggle_visibility(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_voice_action(interaction, "visibility")

    @discord.ui.button(emoji=discord.PartialEmoji(name="VoiceKick", id="1332419383003447427"), style=discord.ButtonStyle.gray, row=1)
    async def kick_member(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_voice_action(interaction, "kick")

    @discord.ui.button(emoji=discord.PartialEmoji(name="VoiceMute", id="1332419509830553601"), style=discord.ButtonStyle.gray, row=1)
    async def toggle_mute(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_voice_action(interaction, "mute")

    @discord.ui.button(emoji=discord.PartialEmoji(name="VoiceBitrate", id="1332419630672904294"), style=discord.ButtonStyle.gray, row=2)
    async def change_bitrate(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.handle_voice_action(interaction, "bitrate")

    async def handle_voice_action(self, interaction: discord.Interaction, action: str):
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ –∫–æ–≥–∞
        manager = interaction.client.get_cog("VoiceChannelCog").manager
        channel_id = manager.get_channel(str(interaction.user.id))
        
        if not channel_id:
            await interaction.response.send_message(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞!",
                ephemeral=True
            )
            return
            
        voice_channel = interaction.guild.get_channel(channel_id)
        if not voice_channel:
            manager.remove_channel(str(interaction.user.id))
            await interaction.response.send_message(
                "–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                ephemeral=True
            )
            return

        if action == "transfer":
            members = voice_channel.members
            if not members:
                await interaction.response.send_message("–í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤", ephemeral=True)
                return
            
            options = [
                discord.SelectOption(label=member.name, value=str(member.id))
                for member in members if member.id != interaction.user.id
            ]
            
            if not options:
                await interaction.response.send_message("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–∞–≤", ephemeral=True)
                return
            
            class OwnerSelect(ui.Select):
                def __init__(self):
                    super().__init__(
                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞",
                        options=options
                    )
                
                async def callback(self, i: discord.Interaction):
                    new_owner_id = int(self.values[0])
                    new_owner = i.guild.get_member(new_owner_id)
                    
                    await voice_channel.set_permissions(new_owner,
                        manage_channels=True,
                        move_members=True,
                        view_channel=True,
                        connect=True,
                        speak=True
                    )
                    
                    await voice_channel.set_permissions(interaction.user,
                        manage_channels=False,
                        move_members=False,
                        view_channel=True,
                        connect=True,
                        speak=True
                    )
                    
                    manager.remove_channel(str(interaction.user.id))
                    manager.add_channel(str(new_owner_id), voice_channel.id)
                    
                    await i.response.send_message(
                        f"–ü—Ä–∞–≤–∞ –Ω–∞ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {new_owner.mention}",
                        ephemeral=True
                    )
            
            await interaction.response.send_message(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞:",
                view=discord.ui.View().add_item(OwnerSelect()),
                ephemeral=True
            )

        elif action == "access":
            class AccessView(ui.View):
                def __init__(self):
                    super().__init__(timeout=300)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞
                    members = interaction.guild.members
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π, –∏—Å–∫–ª—é—á–∞—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –∏ –±–æ—Ç–æ–≤
                    options = []
                    for member in members:
                        if member.id != interaction.user.id and not member.bot:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞
                            perms = voice_channel.permissions_for(member)
                            explicit_perms = voice_channel.overwrites_for(member)
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞
                            has_access = explicit_perms.connect if explicit_perms.connect is not None else perms.connect
                            
                            options.append(
                                discord.SelectOption(
                                    label=member.name,
                                    value=str(member.id),
                                    description=f"{'‚úÖ –ï—Å—Ç—å –¥–æ—Å—Ç—É–ø' if has_access else '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞'}"
                                )
                            )
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 25 –æ–ø—Ü–∏–π (–ª–∏–º–∏—Ç Discord)
                    self.all_options = [options[i:i + 25] for i in range(0, len(options), 25)]
                    self.current_page = 0
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–ª–µ–∫—Ç
                    if self.all_options:
                        self.add_item(self.create_select())
                    
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        if len(self.all_options) > 1:
                            self.add_item(ui.Button(label="‚¨ÖÔ∏è", custom_id="prev", disabled=True))
                            self.add_item(ui.Button(label="‚û°Ô∏è", custom_id="next"))
                    
                def create_select(self):
                    select = ui.Select(
                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                        options=self.all_options[self.current_page]
                    )
                    
                    async def select_callback(interaction: discord.Interaction):
                        member_id = int(select.values[0])
                        member = interaction.guild.get_member(member_id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞
                        explicit_perms = voice_channel.overwrites_for(member)
                        has_access = explicit_perms.connect if explicit_perms.connect is not None else False
                        
                        if has_access:
                            # –ó–∞–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø
                            await voice_channel.set_permissions(member, 
                                connect=False,
                                speak=False,
                                view_channel=True
                            )
                            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ - –≤—ã–∫–∏–¥—ã–≤–∞–µ–º –µ–≥–æ
                            if member in voice_channel.members:
                                await member.move_to(None)
                            await interaction.response.send_message(
                                f"–î–æ—Å—Ç—É–ø –¥–ª—è {member.mention} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω",
                                ephemeral=True
                            )
                        else:
                            # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç—É–ø
                            await voice_channel.set_permissions(member,
                                connect=True,
                                speak=True,
                                view_channel=True
                            )
                            await interaction.response.send_message(
                                f"–î–æ—Å—Ç—É–ø –¥–ª—è {member.mention} –≤—ã–¥–∞–Ω",
                                ephemeral=True
                            )
                    
                    select.callback = select_callback
                    return select
                
                @ui.button(label="‚¨ÖÔ∏è", custom_id="prev")
                async def prev_page(self, interaction: discord.Interaction, button: ui.Button):
                    self.current_page = max(0, self.current_page - 1)
                    await self.update_view(interaction)
                
                @ui.button(label="‚û°Ô∏è", custom_id="next")
                async def next_page(self, interaction: discord.Interaction, button: ui.Button):
                    self.current_page = min(len(self.all_options) - 1, self.current_page + 1)
                    await self.update_view(interaction)
                
                async def update_view(self, interaction: discord.Interaction):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç
                    self.clear_items()
                    self.add_item(self.create_select())
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    if len(self.all_options) > 1:
                        self.add_item(ui.Button(
                            label="‚¨ÖÔ∏è",
                            custom_id="prev",
                            disabled=self.current_page == 0
                        ))
                        self.add_item(ui.Button(
                            label="‚û°Ô∏è",
                            custom_id="next",
                            disabled=self.current_page == len(self.all_options) - 1
                        ))
                    
                    await interaction.response.edit_message(view=self)
            
            await interaction.response.send_message(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º:",
                view=AccessView(),
                ephemeral=True
            )

        elif action == "limit":
            class LimitModal(ui.Modal, title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞"):
                def __init__(self):
                    super().__init__()
                
                limit = ui.TextInput(
                    label="–ù–æ–≤—ã–π –ª–∏–º–∏—Ç",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞)",
                    required=True
                )
                
                async def on_submit(self, i: discord.Interaction):
                    try:
                        new_limit = int(self.limit.value)
                        await voice_channel.edit(user_limit=new_limit)
                        await i.response.send_message(
                            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç: {new_limit if new_limit > 0 else '–±–µ–∑ –ª–∏–º–∏—Ç–∞'}",
                            ephemeral=True
                        )
                    except ValueError:
                        await i.response.send_message("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ", ephemeral=True)
            
            await interaction.response.send_modal(LimitModal())

        elif action == "lock":
            is_locked = voice_channel.permissions_for(interaction.guild.default_role).connect
            if is_locked:
                await voice_channel.set_permissions(interaction.guild.default_role, connect=False)
                await interaction.response.send_message("–ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç", ephemeral=True)
            else:
                await voice_channel.set_permissions(interaction.guild.default_role, connect=True)
                await interaction.response.send_message("–ö–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç", ephemeral=True)

        elif action == "rename":
            class RenameModal(ui.Modal, title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è"):
                def __init__(self):
                    super().__init__()
                
                name = ui.TextInput(
                    label="–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞",
                    required=True
                )
                
                async def on_submit(self, i: discord.Interaction):
                    await voice_channel.edit(name=self.name.value)
                    await i.response.send_message(f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {self.name.value}", ephemeral=True)
            
            await interaction.response.send_modal(RenameModal())

        elif action == "visibility":
            is_visible = voice_channel.permissions_for(interaction.guild.default_role).view_channel
            if is_visible:
                await voice_channel.set_permissions(interaction.guild.default_role, view_channel=False)
                await interaction.response.send_message("–ö–∞–Ω–∞–ª —Å–∫—Ä—ã—Ç", ephemeral=True)
            else:
                await voice_channel.set_permissions(interaction.guild.default_role, view_channel=True)
                await interaction.response.send_message("–ö–∞–Ω–∞–ª –≤–∏–¥–µ–Ω –≤—Å–µ–º", ephemeral=True)

        elif action == "kick":
            members = voice_channel.members
            if not members:
                await interaction.response.send_message("–í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", ephemeral=True)
                return
            
            options = [
                discord.SelectOption(label=member.name, value=str(member.id))
                for member in members if member.id != interaction.user.id
            ]
            
            class KickSelect(ui.Select):
                def __init__(self):
                    super().__init__(
                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–∏–∫–∞",
                        options=options
                    )
                
                async def callback(self, i: discord.Interaction):
                    member_id = int(self.values[0])
                    member = i.guild.get_member(member_id)
                    if member in voice_channel.members:
                        await member.move_to(None)
                        await i.response.send_message(f"–£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} –≤—ã–≥–Ω–∞–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞", ephemeral=True)
                    else:
                        await i.response.send_message("–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ", ephemeral=True)
            
            await interaction.response.send_message(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–∏–∫–∞:",
                view=discord.ui.View().add_item(KickSelect()),
                ephemeral=True
            )

        elif action == "mute":
            members = voice_channel.members
            if not members:
                await interaction.response.send_message("–í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", ephemeral=True)
                return
            
            options = [
                discord.SelectOption(label=member.name, value=str(member.id))
                for member in members if member.id != interaction.user.id
            ]
            
            class MuteSelect(ui.Select):
                def __init__(self):
                    super().__init__(
                        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                        options=options
                    )
                
                async def callback(self, i: discord.Interaction):
                    member_id = int(self.values[0])
                    member = i.guild.get_member(member_id)
                    
                    if member in voice_channel.members:
                        current_mute = member.voice.mute
                        await member.edit(mute=not current_mute)
                        status = "–∑–∞–º—É—á–µ–Ω" if not current_mute else "—Ä–∞–∑–º—É—á–µ–Ω"
                        await i.response.send_message(f"–£—á–∞—Å—Ç–Ω–∏–∫ {member.mention} {status}", ephemeral=True)
                    else:
                        await i.response.send_message("–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ", ephemeral=True)
            
            await interaction.response.send_message(
                "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞:",
                view=discord.ui.View().add_item(MuteSelect()),
                ephemeral=True
            )

        elif action == "bitrate":
            class BitrateModal(ui.Modal, title="–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏—Ç—Ä–µ–π—Ç–∞"):
                def __init__(self):
                    super().__init__()
                
                bitrate = ui.TextInput(
                    label="–ù–æ–≤—ã–π –±–∏—Ç—Ä–µ–π—Ç",
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 8 –¥–æ 96 (–∫–±–∏—Ç/—Å)",
                    required=True,
                    default=str(voice_channel.bitrate // 1000)
                )
                
                async def on_submit(self, i: discord.Interaction):
                    try:
                        new_bitrate = int(self.bitrate.value)
                        if 8 <= new_bitrate <= 96:
                            await voice_channel.edit(bitrate=new_bitrate * 1000)
                            await i.response.send_message(
                                f"–ë–∏—Ç—Ä–µ–π—Ç –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_bitrate} –∫–±–∏—Ç/—Å",
                                ephemeral=True
                            )
                        else:
                            await i.response.send_message(
                                "–û—à–∏–±–∫–∞: –±–∏—Ç—Ä–µ–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 8 –¥–æ 96 –∫–±–∏—Ç/—Å",
                                ephemeral=True
                            )
                    except ValueError:
                        await i.response.send_message(
                            "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
                            ephemeral=True
                        )
            
            await interaction.response.send_modal(BitrateModal())

class VoiceChannelCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.manager = VoiceChannelManager()
        self.config = load_config()
        bot.loop.create_task(self.setup_voice_channel())
    
    async def setup_voice_channel(self):
        await self.bot.wait_until_ready()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        channel_id = self.config.get('voice', {}).get('chat_channel')
        message_id = self.config.get('voice', {}).get('message_channel')
        
        if not channel_id or not message_id:
            print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã ID –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç")
            return
            
        channel = self.bot.get_channel(int(channel_id))
        if not channel:
            print(f"‚ùå –ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        try:
            message = await channel.fetch_message(int(message_id))
        except discord.NotFound:
            message = await channel.send("–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {message.id}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥
        embed = create_embed(
            title="‚öôÔ∏è –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã",
            description=(
                "–ò–∑–º–µ–Ω–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n\n"
                f"{EMOJIS['VoiceCrown']} ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–º–Ω–∞—Ç—ã\n"
                f"{EMOJIS['VoiceUsers']} ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å/–≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–º–Ω–∞—Ç–µ\n"
                f"{EMOJIS['VoiceNumbers']} ‚Äî –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                f"{EMOJIS['VoiceLock']} ‚Äî –∑–∞–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É\n"
                f"{EMOJIS['VoiceEdit']} ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã\n"
                f"{EMOJIS['VoiceVisible']} ‚Äî —Å–∫—Ä—ã—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É\n"
                f"{EMOJIS['VoiceKick']} ‚Äî –≤—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã\n"
                f"{EMOJIS['VoiceMute']} ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å/–≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å\n"
                f"{EMOJIS['VoiceBitrate']} ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –±–∏—Ç—Ä–µ–π—Ç –∫–∞–Ω–∞–ª–∞"
            )
        )
        
        await message.edit(content=None, embed=embed, view=VoiceChannelView())
        print("‚úÖ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        voice_channel_id = self.config.get('voice', {}).get('main_channel')
        
        if not voice_channel_id:
            return
            
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –∫–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω–∏—è
        if after.channel and str(after.channel.id) == str(voice_channel_id):
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
                new_channel = await after.channel.guild.create_voice_channel(
                    name=f"üéÆ –ö–∞–Ω–∞–ª {member.name}",
                    category=after.channel.category,
                    bitrate=64000  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                )
                
                # –í—ã–¥–∞–µ–º –ø—Ä–∞–≤–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é
                await new_channel.set_permissions(member,
                    manage_channels=True,
                    move_members=True,
                    view_channel=True,
                    connect=True,
                    speak=True
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                await new_channel.set_permissions(member.guild.default_role,
                    connect=True,
                    view_channel=True
                )
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await member.move_to(new_channel)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
                self.manager.add_channel(str(member.id), new_channel.id)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è {member.name} (ID: {new_channel.id})")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–∫–∏–Ω—É–ª –ª–∏ –∫—Ç–æ-—Ç–æ –∫–∞–Ω–∞–ª
        if before.channel:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            for user_id, channel_id in list(self.manager.voice_channels.items()):
                channel = self.bot.get_channel(channel_id)
                if channel:
                    # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∏–Ω—É–ª–∏
                    if channel.id == before.channel.id:
                        # –ï—Å–ª–∏ –≤ –∫–∞–Ω–∞–ª–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
                        if len(channel.members) == 0:
                            try:
                                await channel.delete()
                                self.manager.remove_channel(user_id)
                                print(f"‚úÖ –£–¥–∞–ª–µ–Ω –ø—É—Å—Ç–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª (ID: {channel_id})")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")
                            break

async def setup(bot):
    await bot.add_cog(VoiceChannelCog(bot)) 