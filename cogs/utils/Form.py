import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput, View, Button, Select
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.constants import Emojis
from Niludetsu.database.db import Database

class PositionSelect(Select):
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä",
                description="–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º–∞ —Å–µ—Ä–≤–µ—Ä–∞", 
                emoji="üì¢",
                value="pr_manager"
            ),
            discord.SelectOption(
                label="–•–µ–ª–ø–µ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                description="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∏ –ø–æ–º–æ—â—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
                emoji="üõ°Ô∏è", 
                value="moderator"
            )
        ]
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="position_select"
        )

    async def callback(self, interaction: discord.Interaction):
        modal = PRManagerModal() if self.values[0] == "pr_manager" else ModeratorModal()
        await interaction.response.send_modal(modal)

class BaseButton(View):
    def __init__(self):
        super().__init__(timeout=None)
        
    @discord.ui.button(label="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.primary, emoji="üìù", custom_id="submit_application")
    async def submit(self, interaction: discord.Interaction, button: Button):
        view = View(timeout=None)
        view.add_item(PositionSelect())
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", view=view, ephemeral=True)

class ApplicationButton(BaseButton):
    pass

class ReasonModal(Modal):
    def __init__(self, title: str, callback):
        super().__init__(title=title)
        self.callback = callback
        
        self.reason = TextInput(
            label="–ü—Ä–∏—á–∏–Ω–∞",
            placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–∞–∑–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
            style=discord.TextStyle.paragraph,
            required=False,
            max_length=1000
        )
        self.add_item(self.reason)

    async def on_submit(self, interaction: discord.Interaction):
        await self.callback(interaction, self.reason.value)

class BaseApplicationModal(Modal):
    def __init__(self, title: str):
        super().__init__(title=title)
        
        self.fields = {}
        
        self.fields['personal_info'] = TextInput(
            label="–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            placeholder="–í–∞—à–µ –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000
        )
        
        self.fields['motivation'] = TextInput(
            label="–ú–æ—Ç–∏–≤–∞—Ü–∏—è",
            placeholder="–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ?",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000
        )
        
        self.fields['availability'] = TextInput(
            label="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
            placeholder="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000
        )
        
        self.fields['team_experience'] = TextInput(
            label="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ",
            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000
        )
        
        self.fields['position_experience'] = TextInput(
            label="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç",
            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000
        )
        
        for field in self.fields.values():
            self.add_item(field)

class PRManagerModal(BaseApplicationModal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    
    async def on_submit(self, interaction: discord.Interaction):
        if forms_cog := interaction.client.get_cog("Forms"):
            await forms_cog.handle_modal_submit(interaction, self, "–ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä")

class ModeratorModal(BaseApplicationModal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –•–µ–ª–ø–µ—Ä–∞/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
    
    async def on_submit(self, interaction: discord.Interaction):
        if forms_cog := interaction.client.get_cog("Forms"):
            await forms_cog.handle_modal_submit(interaction, self, "–•–µ–ª–ø–µ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")

class ApplicationView(View):
    def __init__(self, application_data, user_id: int, position: str):
        super().__init__(timeout=None)
        self.application_data = application_data
        self.user_id = user_id
        self.position = position
        
    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success, emoji="‚úÖ", custom_id="accept_application")
    async def accept(self, interaction: discord.Interaction, button: Button):
        try:
            user = interaction.guild.get_member(self.user_id)
            if not user:
                return await interaction.response.send_message(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                        description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                        color="RED"
                    ),
                    ephemeral=True
                )
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await user.send(
                    embed=Embed(
                        title=f"{Emojis.SUCCESS} –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!",
                        description=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {self.position} –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                        color="GREEN"
                    )
                )
            except:
                pass
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            embed = interaction.message.embeds[0]
            embed.color = discord.Color.green()
            embed.title = f"{Emojis.SUCCESS} –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞: {embed.title.split(':')[1]}"
            
            await interaction.message.edit(embed=embed, view=None)
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.SUCCESS} –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
                    description=f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {self.position} –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞",
                    color="GREEN"
                ),
                ephemeral=True
            )
            
        except Exception as e:
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"```{str(e)}```",
                    color="RED"
                ),
                ephemeral=True
            )
            
    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="‚ùå", custom_id="reject_application")
    async def reject(self, interaction: discord.Interaction, button: Button):
        try:
            user = interaction.guild.get_member(self.user_id)
            if not user:
                return await interaction.response.send_message(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                        description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                        color="RED"
                    ),
                    ephemeral=True
                )
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await user.send(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                        description=f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {self.position} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                        color="RED"
                    )
                )
            except:
                pass
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            embed = interaction.message.embeds[0]
            embed.color = discord.Color.red()
            embed.title = f"{Emojis.ERROR} –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {embed.title.split(':')[1]}"
            
            await interaction.message.edit(embed=embed, view=None)
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.SUCCESS} –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
                    description=f"–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {self.position} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                    color="GREEN"
                ),
                ephemeral=True
            )
            
        except Exception as e:
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"```{str(e)}```",
                    color="RED"
                ),
                ephemeral=True
            )

class Forms(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        bot.loop.create_task(self.setup_form_view())

    async def setup_form_view(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –∑–∞—è–≤–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫
            result = await self.db.fetch_one(
                "SELECT value FROM settings WHERE category = 'forms' AND key = 'channel'"
            )
            
            if not result:
                return
                
            channel_id = result['value']    
            channel = self.bot.get_channel(int(channel_id))
            if not channel:
                return
                
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é
            embed = Embed(
                title="üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                description=(
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å.\n\n"
                    f"{Emojis.DOT} –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å\n"
                    f"{Emojis.DOT} –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É\n"
                    f"{Emojis.DOT} –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                ),
                color="BLUE"
            )
            
            message = await channel.send(embed=embed, view=ApplicationButton())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.db.execute(
                """
                INSERT OR REPLACE INTO settings (category, key, value)
                VALUES ('forms', 'message', ?)
                """,
                str(message.id)
            )
            
            return message
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞–Ω–µ–ª–∏ –∑–∞—è–≤–æ–∫: {e}")
            return None

    @app_commands.command(name="form", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é –∑–∞—è–≤–æ–∫")
    @app_commands.describe(
        action="–î–µ–π—Å—Ç–≤–∏–µ (create/set)",
        message_id="ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–Ω–µ–ª—å—é –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫",
        applications_channel="ID –∫–∞–Ω–∞–ª–∞ –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞—è–≤–∫–∏"
    )
    @commands.has_permissions(administrator=True)
    async def form(self, interaction: discord.Interaction, action: str, message_id: str = None, applications_channel: str = None):
        action = action.lower()
        if action not in ["create", "set"]:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'create' –∏–ª–∏ 'set'")
            return

        try:
            if action == "create":
                await self._handle_create_form(interaction, message_id, applications_channel)
            else:
                await self._handle_set_form(interaction, applications_channel)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _handle_create_form(self, interaction, message_id, applications_channel):
        try:
            message = await interaction.channel.fetch_message(int(message_id))
        except (discord.NotFound, ValueError):
            await interaction.response.send_message("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        try:
            applications_channel_id = int(applications_channel)
            if not (channel := self.bot.get_channel(applications_channel_id)):
                await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
        except ValueError:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞!")
            return

        embed = Embed(
            title="üìã –ù–∞–±–æ—Ä –≤ –∫–æ–º–∞–Ω–¥—É —Å–µ—Ä–≤–µ—Ä–∞",
            description=(
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:**\n\n"
                "**üì¢ –ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä**\n"
                "‚Ä¢ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º–∞ —Å–µ—Ä–≤–µ—Ä–∞\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞–º–∏\n"
                "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
                "**üõ°Ô∏è –•–µ–ª–ø–µ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä**\n"
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤ —á–∞—Ç–∞—Ö\n"
                "‚Ä¢ –ü–æ–º–æ—â—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
                "‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
                "**–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É!**"
            )
        )

        await message.edit(embed=embed, view=ApplicationButton())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db.execute(
            """
            INSERT INTO settings (category, key, value) 
            VALUES (?, ?, ?), (?, ?, ?)
            ON CONFLICT (category, key) DO UPDATE SET value = excluded.value
            """,
            'forms', 'channel', str(applications_channel_id),
            'forms', 'message', str(message_id)
        )

        await interaction.response.send_message(
            f"‚úÖ –ü–∞–Ω–µ–ª—å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üìù ID —Å–æ–æ–±—â–µ–Ω–∏—è: `{message_id}`\n"
            f"üì® –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫: {channel.mention}"
        )

    async def _handle_set_form(self, interaction, applications_channel):
        channel = await commands.TextChannelConverter().convert(interaction, applications_channel)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db.execute(
            """
            INSERT INTO settings (category, key, value) 
            VALUES (?, ?, ?)
            ON CONFLICT (category, key) DO UPDATE SET value = ?
            """,
            'forms', 'channel', str(channel.id), str(channel.id)
        )
            
        embed = Embed(
            title="‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            description=f"–ö–∞–Ω–∞–ª {channel.mention} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫."
        )
        await interaction.response.send_message(embed=embed)

    async def handle_modal_submit(self, interaction: discord.Interaction, modal, position: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫
            result = await self.db.fetch_one(
                "SELECT value FROM settings WHERE category = 'forms' AND key = 'channel'"
            )
            
            if not result:
                await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
                return
                
            channel_id = result['value']
            channel = self.bot.get_channel(int(channel_id))
            if not channel:
                await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return

            application_data = {field_name: field.value for field_name, field in modal.fields.items()}

            embed = Embed(
                title=f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {position}",
                description=(
                    f"{Emojis.DOT} **–û—Ç:** {interaction.user.mention} (`{interaction.user.id}`)\n\n"
                    f"{Emojis.DOT} **–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n```\n{application_data['personal_info']}```\n"
                    f"{Emojis.DOT} **–ú–æ—Ç–∏–≤–∞—Ü–∏—è:**\n```\n{application_data['motivation']}```\n"
                    f"{Emojis.DOT} **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:**\n```\n{application_data['availability']}```\n"
                    f"{Emojis.DOT} **–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ:**\n```\n{application_data['team_experience']}```\n"
                    f"{Emojis.DOT} **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç:**\n```\n{application_data['position_experience']}```"
                ),
                footer={"text": f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.id}"}
            )

            if interaction.user.avatar:
                embed.set_thumbnail(url=interaction.user.avatar.url)

            await channel.send(embed=embed, view=ApplicationView(application_data, interaction.user.id, position))

            success_embed = Embed(
                title="‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                description="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                color="GREEN"
            )
            await interaction.response.send_message(embed=success_embed, ephemeral=True)

        except Exception as e:
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"```{str(e)}```",
                    color="RED"
                ),
                ephemeral=True
            )

async def setup(bot):
    await bot.add_cog(Forms(bot))