import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput, View, Button, Select
import json
import datetime
from utils import create_embed, EMOJIS

class PositionSelect(Select):
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä", 
                description="–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                emoji="üì¢"
            ),
            discord.SelectOption(
                label="–•–µ–ª–ø–µ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                description="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∏ –ø–æ–º–æ—â—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", 
                emoji="üõ°Ô∏è"
            )
        ]
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...",
            min_values=1,
            max_values=1,
            options=options
        )

    async def callback(self, interaction: discord.Interaction):
        position = self.values[0]
        
        if position == "–ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä":
            modal = PRManagerModal()
        else:
            modal = ModeratorModal()
            
        await interaction.response.send_modal(modal)

class ApplicationButton(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(PositionSelect())

class BaseApplicationModal(Modal):
    def __init__(self, title: str):
        super().__init__(title=title)
        
        self.personal_info = TextInput(
            label="–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            placeholder="–í–∞—à–µ –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
            style=discord.TextStyle.paragraph,
            required=True
        )
        self.motivation = TextInput(
            label="–ú–æ—Ç–∏–≤–∞—Ü–∏—è",
            placeholder="–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ?",
            style=discord.TextStyle.paragraph,
            required=True
        )
        self.availability = TextInput(
            label="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
            placeholder="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?",
            style=discord.TextStyle.paragraph,
            required=True
        )
        self.team_experience = TextInput(
            label="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ",
            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ",
            style=discord.TextStyle.paragraph,
            required=True
        )
        self.position_experience = TextInput(
            label="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç",
            placeholder="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–æ–¥–æ–±–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
            style=discord.TextStyle.paragraph,
            required=True
        )

        self.add_item(self.personal_info)
        self.add_item(self.motivation)
        self.add_item(self.availability)
        self.add_item(self.team_experience)
        self.add_item(self.position_experience)

class PRManagerModal(BaseApplicationModal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    
    async def on_submit(self, interaction: discord.Interaction):
        forms_cog = interaction.client.get_cog("Forms")
        if forms_cog:
            await forms_cog.handle_modal_submit(interaction, self, "–ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä")

class ModeratorModal(BaseApplicationModal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –•–µ–ª–ø–µ—Ä–∞/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
    
    async def on_submit(self, interaction: discord.Interaction):
        forms_cog = interaction.client.get_cog("Forms")
        if forms_cog:
            await forms_cog.handle_modal_submit(interaction, self, "–•–µ–ª–ø–µ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")

class ApplicationView(View):
    def __init__(self, application_data: dict, user_id: int, position: str):
        super().__init__(timeout=None)
        self.application_data = application_data
        self.user_id = user_id
        self.position = position
        
    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green, emoji="‚úÖ")
    async def accept(self, interaction: discord.Interaction, button: Button):
        user = interaction.client.get_user(self.user_id)
        if user:
            try:
                await user.send(f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {self.position} –±—ã–ª–∞ **–ø—Ä–∏–Ω—è—Ç–∞**!")
            except:
                pass
                
        embed = interaction.message.embeds[0]
        embed.color = 0x00FF00
        embed.title = f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ | {self.position}"
        
        for item in self.children:
            item.disabled = True
            
        await interaction.message.edit(embed=embed, view=self)
        await interaction.response.send_message(f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞", ephemeral=True)
        
    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red, emoji="‚ùå")
    async def reject(self, interaction: discord.Interaction, button: Button):
        user = interaction.client.get_user(self.user_id)
        if user:
            try:
                await user.send(f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {self.position} –±—ã–ª–∞ **–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞**.")
            except:
                pass
                
        embed = interaction.message.embeds[0]
        embed.color = 0xFF0000
        embed.title = f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ | {self.position}"
        
        for item in self.children:
            item.disabled = True
            
        await interaction.message.edit(embed=embed, view=self)
        await interaction.response.send_message(f"‚ùå –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", ephemeral=True)

class Forms(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        with open('config/config.json', 'r') as f:
            self.config = json.load(f)

    @app_commands.command(name="form", description="–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫")
    @app_commands.describe(
        message_id="ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–Ω–µ–ª—å—é –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫",
        applications_channel="ID –∫–∞–Ω–∞–ª–∞ –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞—è–≤–∫–∏",
        action="–î–µ–π—Å—Ç–≤–∏–µ (create/set)"
    )
    @commands.has_permissions(administrator=True)
    async def form(self, interaction: discord.Interaction, action: str, message_id: str = None, applications_channel: str = None):
        """–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫"""
        if action.lower() == "create":
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    message = await interaction.channel.fetch_message(int(message_id))
                except (discord.NotFound, ValueError):
                    await interaction.response.send_message("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫
                try:
                    applications_channel_id = int(applications_channel)
                    channel = self.bot.get_channel(applications_channel_id)
                    if not channel:
                        await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                        return
                except ValueError:
                    await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞!", ephemeral=True)
                    return

                embed = create_embed(
                    title="üìã –ù–∞–±–æ—Ä –≤ –∫–æ–º–∞–Ω–¥—É —Å–µ—Ä–≤–µ—Ä–∞",
                    description=(
                        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:**\n\n"
                        "**üì¢ –ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä**\n"
                        "‚Ä¢ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º–∞ —Å–µ—Ä–≤–µ—Ä–∞\n"
                        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞–º–∏\n"
                        "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
                        "**üõ°Ô∏è –•–µ–ª–ø–µ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä**\n"
                        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤ —á–∞—Ç–∞—Ö\n"
                        "‚Ä¢ –ü–æ–º–æ—â—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
                        "‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
                        "**–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É!**"
                    )
                )

                view = ApplicationButton()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.edit(embed=embed, view=view)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –∫–æ–Ω—Ñ–∏–≥
                self.config['FORM_MESSAGE_ID'] = message_id
                self.config['APPLICATIONS_CHANNEL_ID'] = str(applications_channel_id)
                
                with open('config/config.json', 'w') as f:
                    json.dump(self.config, f, indent=4)

                await interaction.response.send_message(
                    f"‚úÖ –ü–∞–Ω–µ–ª—å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
                    f"üìù ID —Å–æ–æ–±—â–µ–Ω–∏—è: `{message_id}`\n"
                    f"üì® –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫: {channel.mention}", 
                    ephemeral=True
                )

            except Exception as e:
                await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
                
        elif action.lower() == "set":
            try:
                channel = await commands.TextChannelConverter().convert(interaction, applications_channel)
                self.config['APPLICATIONS_CHANNEL_ID'] = str(channel.id)
                
                with open('config/config.json', 'w') as f:
                    json.dump(self.config, f, indent=4)
                    
                embed = create_embed(
                    title="‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                    description=f"–ö–∞–Ω–∞–ª {channel.mention} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫."
                )
                await interaction.response.send_message(embed=embed)
            except Exception as e:
                await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'create' –∏–ª–∏ 'set'", ephemeral=True)

    async def handle_modal_submit(self, interaction: discord.Interaction, modal, position: str):
        if 'APPLICATIONS_CHANNEL_ID' not in self.config:
            await interaction.response.send_message(
                "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!", 
                ephemeral=True
            )
            return

        channel_id = int(self.config['APPLICATIONS_CHANNEL_ID'])
        channel = self.bot.get_channel(channel_id)
        
        if not channel:
            await interaction.response.send_message(
                "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", 
                ephemeral=True
            )
            return

        application_data = {
            "personal_info": modal.children[0].value,
            "motivation": modal.children[1].value,
            "availability": modal.children[2].value,
            "team_experience": modal.children[3].value,
            "position_experience": modal.children[4].value
        }

        embed = create_embed(
            title=f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {position}",
            description=f"{EMOJIS['DOT']} **–û—Ç:** {interaction.user.mention} (`{interaction.user.id}`)\n\n"
                       f"{EMOJIS['DOT']} **–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n```\n{application_data['personal_info']}```\n"
                       f"{EMOJIS['DOT']} **–ú–æ—Ç–∏–≤–∞—Ü–∏—è:**\n```\n{application_data['motivation']}```\n"
                       f"{EMOJIS['DOT']} **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:**\n```\n{application_data['availability']}```\n"
                       f"{EMOJIS['DOT']} **–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ:**\n```\n{application_data['team_experience']}```\n"
                       f"{EMOJIS['DOT']} **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç:**\n```\n{application_data['position_experience']}```",
            footer={"text": f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.id}"}
        )

        if interaction.user.avatar:
            embed.set_thumbnail(url=interaction.user.avatar.url)

        view = ApplicationView(application_data, interaction.user.id, position)
        await channel.send(embed=embed, view=view)
        
        await interaction.response.send_message(
            "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.", 
            ephemeral=True
        )

async def setup(bot):
    await bot.add_cog(Forms(bot))