import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput, View, Button, Select
import json
import datetime
from utils import create_embed, EMOJIS

class PositionSelect(Select):
    def __init__(self):
        options = [
            discord.SelectOption(
                label="–ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä",
                description="–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º–∞ —Å–µ—Ä–≤–µ—Ä–∞", 
                emoji="üì¢",
                value="pr_manager"
            ),
            discord.SelectOption(
                label="–•–µ–ª–ø–µ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                description="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –∏ –ø–æ–º–æ—â—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
                emoji="üõ°Ô∏è", 
                value="moderator"
            )
        ]
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="position_select"
        )

    async def callback(self, interaction: discord.Interaction):
        modal = PRManagerModal() if self.values[0] == "pr_manager" else ModeratorModal()
        await interaction.response.send_modal(modal)

class BaseButton(View):
    def __init__(self):
        super().__init__(timeout=None)
        
    @discord.ui.button(label="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", style=discord.ButtonStyle.primary, emoji="üìù", custom_id="submit_application")
    async def submit(self, interaction: discord.Interaction, button: Button):
        view = View(timeout=None)
        view.add_item(PositionSelect())
        await interaction.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:", view=view, ephemeral=True)

class ApplicationButton(BaseButton):
    pass

class ReasonModal(Modal):
    def __init__(self, title: str, callback):
        super().__init__(title=title)
        self.callback = callback
        
        self.reason = TextInput(
            label="–ü—Ä–∏—á–∏–Ω–∞",
            placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–∞–∑–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
            style=discord.TextStyle.paragraph,
            required=False,
            max_length=1000
        )
        self.add_item(self.reason)

    async def on_submit(self, interaction: discord.Interaction):
        await self.callback(interaction, self.reason.value)

class BaseApplicationModal(Modal):
    def __init__(self, title: str):
        super().__init__(title=title)
        
        self.fields = {
            "personal_info": TextInput(
                label="–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                placeholder="–í–∞—à–µ –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å",
                style=discord.TextStyle.paragraph,
                required=True
            ),
            "motivation": TextInput(
                label="–ú–æ—Ç–∏–≤–∞—Ü–∏—è",
                placeholder="–ü–æ—á–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ?",
                style=discord.TextStyle.paragraph,
                required=True
            ),
            "availability": TextInput(
                label="–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å",
                placeholder="–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?",
                style=discord.TextStyle.paragraph,
                required=True
            ),
            "team_experience": TextInput(
                label="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ",
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ",
                style=discord.TextStyle.paragraph,
                required=True
            ),
            "position_experience": TextInput(
                label="–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç",
                placeholder="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø–æ–¥–æ–±–Ω–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
                style=discord.TextStyle.paragraph,
                required=True
            )
        }

        for field in self.fields.values():
            self.add_item(field)

class PRManagerModal(BaseApplicationModal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–∞")
    
    async def on_submit(self, interaction: discord.Interaction):
        if forms_cog := interaction.client.get_cog("Forms"):
            await forms_cog.handle_modal_submit(interaction, self, "–ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä")

class ModeratorModal(BaseApplicationModal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å –•–µ–ª–ø–µ—Ä–∞/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
    
    async def on_submit(self, interaction: discord.Interaction):
        if forms_cog := interaction.client.get_cog("Forms"):
            await forms_cog.handle_modal_submit(interaction, self, "–•–µ–ª–ø–µ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä")

class ApplicationView(View):
    def __init__(self, application_data: dict, user_id: int, position: str):
        super().__init__(timeout=None)
        self.application_data = application_data
        self.user_id = user_id
        self.position = position

    async def _update_application_status(self, interaction: discord.Interaction, status: str, color: int, reason: str = None):
        user = interaction.client.get_user(self.user_id)
        status_emoji = "‚úÖ" if status == "–ø—Ä–∏–Ω—è—Ç–∞" else "‚ùå"
        
        if user:
            try:
                embed = create_embed(
                    title=f"{status_emoji} –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏",
                    description=(
                        f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {self.position} –±—ã–ª–∞ **{status}**!"
                    ),
                    color=color
                )
                
                if reason:
                    embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
                    
                await user.send(embed=embed)
            except discord.Forbidden:
                pass

        embed = interaction.message.embeds[0]
        embed.color = color
        embed.title = f"{status_emoji} –ó–∞—è–≤–∫–∞ {status} | {self.position}"
        
        if reason:
            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)

        for item in self.children:
            item.disabled = True

        await interaction.message.edit(embed=embed, view=self)
        
        response_message = f"{status_emoji} –ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –±—ã–ª–∞ {status}"
        if reason:
            response_message += f"\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}"
        
        await interaction.response.send_message(response_message, ephemeral=True)

    async def _handle_accept(self, interaction: discord.Interaction, reason: str = None):
        await self._update_application_status(interaction, "–ø—Ä–∏–Ω—è—Ç–∞", 0x00FF00, reason)

    async def _handle_reject(self, interaction: discord.Interaction, reason: str = None):
        await self._update_application_status(interaction, "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", 0xFF0000, reason)

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green, emoji="‚úÖ")
    async def accept(self, interaction: discord.Interaction, button: Button):
        modal = ReasonModal("–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏—è", self._handle_accept)
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red, emoji="‚ùå")
    async def reject(self, interaction: discord.Interaction, button: Button):
        modal = ReasonModal("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞", self._handle_reject)
        await interaction.response.send_modal(modal)

class Forms(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        with open('config/config.json', 'r') as f:
            self.config = json.load(f)
        bot.loop.create_task(self.setup_form_view())

    async def setup_form_view(self):
        await self.bot.wait_until_ready()
        if 'FORM_CHANNEL_ID' in self.config and 'FORM_MESSAGE_ID' in self.config:
            try:
                channel = self.bot.get_channel(int(self.config['FORM_CHANNEL_ID']))
                if channel:
                    try:
                        message = await channel.fetch_message(int(self.config['FORM_MESSAGE_ID']))
                        embed = create_embed(
                            title="üìã –ù–∞–±–æ—Ä –≤ –∫–æ–º–∞–Ω–¥—É —Å–µ—Ä–≤–µ—Ä–∞",
                            description=(
                                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:**\n\n"
                                "**üì¢ –ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä**\n"
                                "‚Ä¢ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º–∞ —Å–µ—Ä–≤–µ—Ä–∞\n"
                                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞–º–∏\n"
                                "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
                                "**üõ°Ô∏è –•–µ–ª–ø–µ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä**\n"
                                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤ —á–∞—Ç–∞—Ö\n"
                                "‚Ä¢ –ü–æ–º–æ—â—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
                                "‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
                                "**–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É!**"
                            )
                        )
                        await message.edit(embed=embed, view=ApplicationButton())
                        print(f"‚úÖ –ü–∞–Ω–µ–ª—å –∑–∞—è–≤–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {channel.name} ({channel.id})")
                    except discord.NotFound:
                        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                else:
                    print("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ –∑–∞—è–≤–æ–∫: {e}")

    @app_commands.command(name="form", description="–°–æ–∑–¥–∞—Ç—å –ø–∞–Ω–µ–ª—å –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫")
    @app_commands.describe(
        message_id="ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–Ω–µ–ª—å—é –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫",
        applications_channel="ID –∫–∞–Ω–∞–ª–∞ –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∑–∞—è–≤–∫–∏",
        action="–î–µ–π—Å—Ç–≤–∏–µ (create/set)"
    )
    @commands.has_permissions(administrator=True)
    async def form(self, interaction: discord.Interaction, action: str, message_id: str = None, applications_channel: str = None):
        action = action.lower()
        if action not in ["create", "set"]:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'create' –∏–ª–∏ 'set'", ephemeral=True)
            return

        try:
            if action == "create":
                await self._handle_create_form(interaction, message_id, applications_channel)
            else:
                await self._handle_set_form(interaction, applications_channel)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", ephemeral=True)

    async def _handle_create_form(self, interaction, message_id, applications_channel):
        try:
            message = await interaction.channel.fetch_message(int(message_id))
        except (discord.NotFound, ValueError):
            await interaction.response.send_message("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)
            return

        try:
            applications_channel_id = int(applications_channel)
            if not (channel := self.bot.get_channel(applications_channel_id)):
                await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                return
        except ValueError:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞!", ephemeral=True)
            return

        embed = create_embed(
            title="üìã –ù–∞–±–æ—Ä –≤ –∫–æ–º–∞–Ω–¥—É —Å–µ—Ä–≤–µ—Ä–∞",
            description=(
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:**\n\n"
                "**üì¢ –ü–∏–∞—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä**\n"
                "‚Ä¢ –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –∏ —Ä–µ–∫–ª–∞–º–∞ —Å–µ—Ä–≤–µ—Ä–∞\n"
                "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞–º–∏\n"
                "‚Ä¢ –†–∞–∑–≤–∏—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞\n\n"
                "**üõ°Ô∏è –•–µ–ª–ø–µ—Ä/–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä**\n"
                "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –≤ —á–∞—Ç–∞—Ö\n"
                "‚Ä¢ –ü–æ–º–æ—â—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n"
                "‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n\n"
                "**–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É!**"
            )
        )

        await message.edit(embed=embed, view=ApplicationButton())
        
        self.config.update({
            'FORM_MESSAGE_ID': message_id,
            'FORM_CHANNEL_ID': str(applications_channel_id)
        })
        
        with open('config/config.json', 'w') as f:
            json.dump(self.config, f, indent=4)

        await interaction.response.send_message(
            f"‚úÖ –ü–∞–Ω–µ–ª—å –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üìù ID —Å–æ–æ–±—â–µ–Ω–∏—è: `{message_id}`\n"
            f"üì® –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫: {channel.mention}",
            ephemeral=True
        )

    async def _handle_set_form(self, interaction, applications_channel):
        channel = await commands.TextChannelConverter().convert(interaction, applications_channel)
        self.config['FORM_CHANNEL_ID'] = str(channel.id)
        
        with open('config/config.json', 'w') as f:
            json.dump(self.config, f, indent=4)
            
        embed = create_embed(
            title="‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            description=f"–ö–∞–Ω–∞–ª {channel.mention} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫."
        )
        await interaction.response.send_message(embed=embed)

    async def handle_modal_submit(self, interaction: discord.Interaction, modal, position: str):
        if 'FORM_CHANNEL_ID' not in self.config:
            await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ!", ephemeral=True)
            return

        if not (channel := self.bot.get_channel(int(self.config['FORM_CHANNEL_ID']))):
            await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        application_data = {field_name: field.value for field_name, field in modal.fields.items()}

        embed = create_embed(
            title=f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å {position}",
            description=(
                f"{EMOJIS['DOT']} **–û—Ç:** {interaction.user.mention} (`{interaction.user.id}`)\n\n"
                f"{EMOJIS['DOT']} **–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n```\n{application_data['personal_info']}```\n"
                f"{EMOJIS['DOT']} **–ú–æ—Ç–∏–≤–∞—Ü–∏—è:**\n```\n{application_data['motivation']}```\n"
                f"{EMOJIS['DOT']} **–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:**\n```\n{application_data['availability']}```\n"
                f"{EMOJIS['DOT']} **–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ:**\n```\n{application_data['team_experience']}```\n"
                f"{EMOJIS['DOT']} **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç:**\n```\n{application_data['position_experience']}```"
            ),
            footer={"text": f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.id}"}
        )

        if interaction.user.avatar:
            embed.set_thumbnail(url=interaction.user.avatar.url)

        await channel.send(embed=embed, view=ApplicationView(application_data, interaction.user.id, position))
        
        success_embed = create_embed(
            title="‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
            description=(
                "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            ),
            color=0x00FF00
        )
        
        await interaction.response.send_message(embed=success_embed, ephemeral=True)

async def setup(bot):
    await bot.add_cog(Forms(bot))