import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput, View, Button
import yaml
from Niludetsu.utils.embed import create_embed
from Niludetsu.core.base import EMOJIS

class ReasonModal(Modal):
    def __init__(self, title: str, callback):
        super().__init__(title=title)
        self.callback = callback

        self.reason_input = TextInput(
            label="–ü—Ä–∏—á–∏–Ω–∞",
            placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É...",
            style=discord.TextStyle.paragraph,
            required=False,
            max_length=1000,
        )
        self.add_item(self.reason_input)

    async def on_submit(self, interaction: discord.Interaction):
        await self.callback(interaction, self.reason_input.value if self.reason_input.value else None)


class BaseButton(View):
    def __init__(self):
        super().__init__(timeout=None)


class IdeaButton(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é", style=discord.ButtonStyle.primary, emoji="üí°", custom_id="submit_idea")
    async def submit(self, interaction: discord.Interaction, button: Button):
        modal = IdeaModal()
        await interaction.response.send_modal(modal)


class IdeaModal(Modal):
    def __init__(self):
        super().__init__(title="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")

        self.title_input = TextInput(
            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏",
            style=discord.TextStyle.short,
            required=True,
            max_length=100,
        )
        self.description_input = TextInput(
            label="–û–ø–∏—Å–∞–Ω–∏–µ",
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000,
        )

        self.add_item(self.title_input)
        self.add_item(self.description_input)

    async def on_submit(self, interaction: discord.Interaction):
        if ideas_cog := interaction.client.get_cog("Ideas"):
            await ideas_cog.handle_idea_submit(
                interaction,
                self.title_input.value,
                self.description_input.value,
            )


class IdeaView(View):
    def __init__(self, user_id: int):
        super().__init__(timeout=None)
        self.user_id = user_id

    async def _update_idea_status(self, interaction: discord.Interaction, status: str, color: int, reason: str = None):
        user = interaction.client.get_user(self.user_id)
        status_emoji = "‚úÖ" if status == "–ø—Ä–∏–Ω—è—Ç–∞" else "‚ùå"

        if user:
            try:
                embed = create_embed(
                    title=f"{status_emoji} –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –∏–¥–µ–∏",
                    description=f"–í–∞—à–∞ –∏–¥–µ—è –±—ã–ª–∞ **{status}**!",
                    color=color,
                )
                if reason:
                    embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
                await user.send(embed=embed)
            except discord.Forbidden:
                pass

        embed = interaction.message.embeds[0]
        embed.color = color
        embed.title = f"{status_emoji} –ò–¥–µ—è {status}"

        if reason:
            embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)

        for item in self.children:
            item.disabled = True

        await interaction.message.edit(embed=embed, view=self)

        response_message = f"{status_emoji} –ò–¥–µ—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –±—ã–ª–∞ {status}"
        if reason:
            response_message += f"\n**–ü—Ä–∏—á–∏–Ω–∞:** {reason}"
        await interaction.response.send_message(response_message, ephemeral=True)

    async def _handle_accept(self, interaction: discord.Interaction, reason: str = None):
        await self._update_idea_status(interaction, "–ø—Ä–∏–Ω—è—Ç–∞", 0x00FF00, reason)

    async def _handle_reject(self, interaction: discord.Interaction, reason: str = None):
        await self._update_idea_status(interaction, "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", 0xFF0000, reason)

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green, emoji="‚úÖ")
    async def accept(self, interaction: discord.Interaction, button: Button):
        modal = ReasonModal("–ü—Ä–∏—á–∏–Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏—è", self._handle_accept)
        await interaction.response.send_modal(modal)

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red, emoji="‚ùå")
    async def reject(self, interaction: discord.Interaction, button: Button):
        modal = ReasonModal("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞", self._handle_reject)
        await interaction.response.send_modal(modal)


class Ideas(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        with open("config/config.yaml", "r", encoding="utf-8") as f:
            self.config = yaml.safe_load(f)
        bot.loop.create_task(self.setup_ideas_view())

    async def setup_ideas_view(self):
        await self.bot.wait_until_ready()
        channel_id = self.config.get('ideas', {}).get('channel')
        message_id = self.config.get('ideas', {}).get('message')
        
        if channel_id and message_id:
            try:
                channel = self.bot.get_channel(int(channel_id))
                if channel:
                    try:
                        message = await channel.fetch_message(int(message_id))
                        embed = create_embed(
                            title="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é",
                            description=(
                                "**–ï—Å—Ç—å –∏–¥–µ—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä–∞?**\n"
                                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–¥–µ—é!\n\n"
                                "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–¥–µ—è–º:**\n"
                                "‚Ä¢ –ò–¥–µ—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π\n"
                                "‚Ä¢ –ò–¥–µ—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑—É–µ–º–æ–π\n"
                                "‚Ä¢ –ò–¥–µ—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞\n"
                                "‚Ä¢ –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ - –æ–¥–Ω–∞ –∏–¥–µ—è"
                            ),
                        )
                        view = IdeaButton()
                        await message.edit(embed=embed, view=view)
                        print(f"‚úÖ –ü–∞–Ω–µ–ª—å –∏–¥–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {channel.name} ({channel.id})")
                    except discord.NotFound:
                        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é –∏–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
                else:
                    print("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏ –∏–¥–µ–π: {e}")

    async def handle_idea_submit(self, interaction: discord.Interaction, title: str, description: str):
        channel_id = self.config.get('ideas', {}).get('channel')
        if not channel_id:
            await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return

        channel = self.bot.get_channel(int(channel_id))
        if not channel:
            await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        embed = create_embed(
            title=f"üí° –ù–æ–≤–∞—è –∏–¥–µ—è: {title}",
            description=(
                f"{EMOJIS['DOT']} **–û—Ç:** {interaction.user.mention} (`{interaction.user.id}`)\n\n"
                f"{EMOJIS['DOT']} **–û–ø–∏—Å–∞–Ω–∏–µ:**\n```\n{description}```"
            ),
            footer={"text": f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.id}"},
        )

        if interaction.user.avatar:
            embed.set_thumbnail(url=interaction.user.avatar.url)

        await channel.send(embed=embed, view=IdeaView(interaction.user.id))

        success_embed = create_embed(
            title="‚úÖ –ò–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
            description="–í–∞—à–∞ –∏–¥–µ—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            color=0x00FF00
        )
        await interaction.response.send_message(embed=success_embed, ephemeral=True)

    @app_commands.command(name="ideas", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é –∏–¥–µ–π")
    @commands.has_permissions(administrator=True)
    async def ideas(self, interaction: discord.Interaction, action: str, message_id: str = None, ideas_channel: str = None):
        action = action.lower()
        if action not in ["create", "set"]:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'create' –∏–ª–∏ 'set'")
            return

        try:
            if action == "create":
                await self._handle_create_ideas(interaction, message_id, ideas_channel)
            else:
                await self._handle_set_ideas(interaction, ideas_channel)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _handle_create_ideas(self, interaction, message_id, ideas_channel):
        try:
            message = await interaction.channel.fetch_message(int(message_id))
        except (discord.NotFound, ValueError):
            await interaction.response.send_message("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        try:
            ideas_channel_id = int(ideas_channel)
            if not (channel := self.bot.get_channel(ideas_channel_id)):
                await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
        except ValueError:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞!")
            return

        embed = create_embed(
            title="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é",
            description=(
                "**–ï—Å—Ç—å –∏–¥–µ—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä–∞?**\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–¥–µ—é!\n\n"
                "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–¥–µ—è–º:**\n"
                "‚Ä¢ –ò–¥–µ—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π\n"
                "‚Ä¢ –ò–¥–µ—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑—É–µ–º–æ–π\n"
                "‚Ä¢ –ò–¥–µ—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞\n"
                "‚Ä¢ –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ - –æ–¥–Ω–∞ –∏–¥–µ—è"
            ),
        )

        await message.edit(embed=embed, view=IdeaButton())

        if 'ideas' not in self.config:
            self.config['ideas'] = {}
        self.config['ideas'].update({
            'channel': str(ideas_channel_id),
            'message': str(message_id)
        })

        with open("config/config.yaml", "w", encoding='utf-8') as f:
            yaml.dump(self.config, f, indent=4, allow_unicode=True)

        success_embed = create_embed(
            title="‚úÖ –ü–∞–Ω–µ–ª—å –∏–¥–µ–π —Å–æ–∑–¥–∞–Ω–∞",
            description=(
                f"üìù ID —Å–æ–æ–±—â–µ–Ω–∏—è: `{message_id}`\n"
                f"üì® –ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π: {channel.mention}"
            ),
            color=0x00FF00,
        )
        await interaction.response.send_message(embed=success_embed)

    async def _handle_set_ideas(self, interaction, ideas_channel):
        channel = await commands.TextChannelConverter().convert(interaction, ideas_channel)
        
        if 'ideas' not in self.config:
            self.config['ideas'] = {}
        self.config['ideas']['channel'] = str(channel.id)

        with open("config/config.yaml", "w", encoding='utf-8') as f:
            yaml.dump(self.config, f, indent=4, allow_unicode=True)

        embed = create_embed(
            title="‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            description=f"–ö–∞–Ω–∞–ª {channel.mention} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–π.",
        )
        await interaction.response.send_message(embed=embed)


async def setup(bot):
    await bot.add_cog(Ideas(bot))
