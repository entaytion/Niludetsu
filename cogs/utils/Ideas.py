import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import Modal, TextInput, View, Button
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.constants import Emojis
from Niludetsu.database.db import Database

class ReasonModal(Modal):
    def __init__(self, title: str, callback):
        super().__init__(title=title)
        self.callback = callback

        self.reason_input = TextInput(
            label="–ü—Ä–∏—á–∏–Ω–∞",
            placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É...",
            style=discord.TextStyle.paragraph,
            required=False,
            max_length=1000,
        )
        self.add_item(self.reason_input)

    async def on_submit(self, interaction: discord.Interaction):
        await self.callback(interaction, self.reason_input.value if self.reason_input.value else None)


class IdeaButton(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é", style=discord.ButtonStyle.primary, emoji="üí°", custom_id="submit_idea")
    async def submit(self, interaction: discord.Interaction, button: Button):
        modal = IdeaModal()
        await interaction.response.send_modal(modal)


class IdeaModal(Modal):
    def __init__(self):
        super().__init__(title="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é")

        self.title_input = TextInput(
            label="–ó–∞–≥–æ–ª–æ–≤–æ–∫",
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏",
            style=discord.TextStyle.short,
            required=True,
            max_length=100,
        )
        self.description_input = TextInput(
            label="–û–ø–∏—Å–∞–Ω–∏–µ",
            placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –∏–¥–µ–∏",
            style=discord.TextStyle.paragraph,
            required=True,
            max_length=1000,
        )

        self.add_item(self.title_input)
        self.add_item(self.description_input)

    async def on_submit(self, interaction: discord.Interaction):
        if ideas_cog := interaction.client.get_cog("Ideas"):
            await ideas_cog.handle_idea_submit(
                interaction,
                self.title_input.value,
                self.description_input.value,
            )


class IdeaView(View):
    def __init__(self, user_id: int):
        super().__init__(timeout=None)
        self.user_id = user_id

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.success, emoji="‚úÖ", custom_id="accept_idea")
    async def accept(self, interaction: discord.Interaction, button: Button):
        try:
            user = interaction.guild.get_member(self.user_id)
            if not user:
                return await interaction.response.send_message(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                        description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                        color="RED"
                    ),
                    ephemeral=True
                )
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await user.send(
                    embed=Embed(
                        title=f"{Emojis.SUCCESS} –ò–¥–µ—è –ø—Ä–∏–Ω—è—Ç–∞!",
                        description="–í–∞—à–∞ –∏–¥–µ—è –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∫–ª–∞–¥ –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞.",
                        color="GREEN"
                    )
                )
            except:
                pass
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            embed = interaction.message.embeds[0]
            embed.color = discord.Color.green()
            embed.title = f"{Emojis.SUCCESS} –ò–¥–µ—è –ø—Ä–∏–Ω—è—Ç–∞: {embed.title.split(':')[1]}"
            
            await interaction.message.edit(embed=embed, view=None)
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.SUCCESS} –ò–¥–µ—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
                    description=f"–ò–¥–µ—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞",
                    color="GREEN"
                ),
                ephemeral=True
            )
            
        except Exception as e:
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"```{str(e)}```",
                    color="RED"
                ),
                ephemeral=True
            )
            
    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="‚ùå", custom_id="reject_idea")
    async def reject(self, interaction: discord.Interaction, button: Button):
        try:
            user = interaction.guild.get_member(self.user_id)
            if not user:
                return await interaction.response.send_message(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                        description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                        color="RED"
                    ),
                    ephemeral=True
                )
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await user.send(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –ò–¥–µ—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                        description="–í–∞—à–∞ –∏–¥–µ—è –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                        color="RED"
                    )
                )
            except:
                pass
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            embed = interaction.message.embeds[0]
            embed.color = discord.Color.red()
            embed.title = f"{Emojis.ERROR} –ò–¥–µ—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {embed.title.split(':')[1]}"
            
            await interaction.message.edit(embed=embed, view=None)
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.SUCCESS} –ò–¥–µ—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞",
                    description=f"–ò–¥–µ—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.mention} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                    color="GREEN"
                ),
                ephemeral=True
            )
            
        except Exception as e:
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"```{str(e)}```",
                    color="RED"
                ),
                ephemeral=True
            )


class Ideas(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        bot.loop.create_task(self.setup_ideas_view())

    async def setup_ideas_view(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –∏–¥–µ–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π
            result = await self.db.fetch_one(
                "SELECT value FROM settings WHERE category = 'ideas' AND key = 'channel'"
            )
            
            if not result:
                return
                
            channel_id = result['value']
            channel = self.bot.get_channel(int(channel_id))
            if not channel:
                return
                
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–Ω–µ–ª—å—é
            embed = Embed(
                title="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é",
                description=(
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–¥–µ—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞.\n\n"
                    f"{Emojis.DOT} –ò–¥–µ—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π\n"
                    f"{Emojis.DOT} –û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å\n"
                    f"{Emojis.DOT} –£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é –ø—Ä–æ–±–ª–µ–º—É —Ä–µ—à–∞–µ—Ç –≤–∞—à–∞ –∏–¥–µ—è"
                ),
                color="BLUE"
            )
            
            message = await channel.send(embed=embed, view=IdeaButton())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.db.execute(
                """
                INSERT OR REPLACE INTO settings (category, key, value)
                VALUES ('ideas', 'message', ?)
                """,
                str(message.id)
            )
            
            return message
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞–Ω–µ–ª–∏ –∏–¥–µ–π: {e}")
            return None

    async def handle_idea_submit(self, interaction: discord.Interaction, title: str, description: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–¥–µ–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π
            channel_id = await self.db.fetch_one(
                "SELECT value FROM settings WHERE category = 'ideas' AND key = 'channel'"
            )
            
            if not channel_id:
                return await interaction.response.send_message(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                        description="–ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                        color="RED"
                    ),
                    ephemeral=True
                )
                
            channel = self.bot.get_channel(int(channel_id))
            if not channel:
                return await interaction.response.send_message(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                        description="–ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        color="RED"
                    ),
                    ephemeral=True
                )

            embed = Embed(
                title=f"üí° –ù–æ–≤–∞—è –∏–¥–µ—è: {title}",
                description=(
                    f"{Emojis.DOT} **–û—Ç:** {interaction.user.mention} (`{interaction.user.id}`)\n\n"
                    f"{Emojis.DOT} **–û–ø–∏—Å–∞–Ω–∏–µ:**\n```\n{description}```"
                ),
                footer={"text": f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {interaction.user.id}"}
            )

            if interaction.user.avatar:
                embed.set_thumbnail(url=interaction.user.avatar.url)

            await channel.send(embed=embed, view=IdeaView(interaction.user.id))

            success_embed = Embed(
                title="‚úÖ –ò–¥–µ—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
                description="–í–∞—à–∞ –∏–¥–µ—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
                color="GREEN"
            )
            await interaction.response.send_message(embed=success_embed, ephemeral=True)

        except Exception as e:
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"```{str(e)}```",
                    color="RED"
                ),
                ephemeral=True
            )

    @app_commands.command(name="ideas", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª—å—é –∏–¥–µ–π")
    @app_commands.describe(
        action="–î–µ–π—Å—Ç–≤–∏–µ (create/set)",
        message_id="ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–Ω–µ–ª—å—é –¥–ª—è –ø–æ–¥–∞—á–∏ –∏–¥–µ–π",
        ideas_channel="ID –∫–∞–Ω–∞–ª–∞ –∫—É–¥–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –∏–¥–µ–∏"
    )
    @commands.has_permissions(administrator=True)
    async def ideas(self, interaction: discord.Interaction, action: str, message_id: str = None, ideas_channel: str = None):
        action = action.lower()
        if action not in ["create", "set"]:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'create' –∏–ª–∏ 'set'")
            return

        try:
            if action == "create":
                await self._handle_create_ideas(interaction, message_id, ideas_channel)
            else:
                await self._handle_set_ideas(interaction, ideas_channel)
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    async def _handle_create_ideas(self, interaction, message_id, ideas_channel):
        try:
            message = await interaction.channel.fetch_message(int(message_id))
        except (discord.NotFound, ValueError):
            await interaction.response.send_message("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        try:
            ideas_channel_id = int(ideas_channel)
            if not (channel := self.bot.get_channel(ideas_channel_id)):
                await interaction.response.send_message("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
        except ValueError:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞!")
            return

        embed = Embed(
            title="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é",
            description=(
                "**–ï—Å—Ç—å –∏–¥–µ—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–µ—Ä–≤–µ—Ä–∞?**\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–¥–µ—é!\n\n"
                "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–¥–µ—è–º:**\n"
                "‚Ä¢ –ò–¥–µ—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ–π\n"
                "‚Ä¢ –ò–¥–µ—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑—É–µ–º–æ–π\n"
                "‚Ä¢ –ò–¥–µ—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –Ω–∞—Ä—É—à–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —Å–µ—Ä–≤–µ—Ä–∞\n"
                "‚Ä¢ –û–¥–Ω–∞ –∑–∞—è–≤–∫–∞ - –æ–¥–Ω–∞ –∏–¥–µ—è"
            )
        )

        await message.edit(embed=embed, view=IdeaButton())
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db.execute(
            """
            INSERT INTO settings (category, key, value) 
            VALUES (?, ?, ?), (?, ?, ?)
            ON CONFLICT (category, key) DO UPDATE SET value = excluded.value
            """,
            'ideas', 'channel', str(ideas_channel_id),
            'ideas', 'message', str(message_id)
        )

        await interaction.response.send_message(
            f"‚úÖ –ü–∞–Ω–µ–ª—å –∏–¥–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"üìù ID —Å–æ–æ–±—â–µ–Ω–∏—è: `{message_id}`\n"
            f"üì® –ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π: {channel.mention}"
        )

    async def _handle_set_ideas(self, interaction, ideas_channel):
        channel = await commands.TextChannelConverter().convert(interaction, ideas_channel)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await self.db.execute(
            """
            INSERT INTO settings (category, key, value) 
            VALUES (?, ?, ?)
            ON CONFLICT (category, key) DO UPDATE SET value = ?
            """,
            'ideas', 'channel', str(channel.id), str(channel.id)
        )
            
        embed = Embed(
            title="‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –∏–¥–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
            description=f"–ö–∞–Ω–∞–ª {channel.mention} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–π."
        )
        await interaction.response.send_message(embed=embed)


async def setup(bot):
    await bot.add_cog(Ideas(bot))
