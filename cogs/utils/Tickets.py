import discord
from discord.ext import commands
from discord import app_commands
import yaml
import asyncio
from datetime import datetime
from Niludetsu.utils.embed import create_embed
from Niludetsu.utils.emojis import EMOJIS

class TicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.primary, emoji="üì©", custom_id="create_ticket")
    async def create_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open('config/config.yaml', 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        with open('config/tickets.yaml', 'r', encoding='utf-8') as f:
            ticket_data = yaml.safe_load(f) or {
                "ticket_counter": 0,
                "active_tickets": {},
                "closed_tickets": {},
                "ratings": {}
            }

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ ID
        category_id = int(config['tickets']['category'])
        support_role_id = int(config['tickets']['support_role'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
        category = interaction.guild.get_channel(category_id)
        existing_ticket = discord.utils.get(category.text_channels, 
                                          topic=f"User ID: {interaction.user.id}")
        
        if existing_ticket:
            return await interaction.response.send_message(
                embed=create_embed(
                    description="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç!"
                ),
                ephemeral=True
            )

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–∏–∫–µ—Ç–æ–≤
        ticket_data["ticket_counter"] += 1
        ticket_number = ticket_data["ticket_counter"]

        # –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª —Ç–∏–∫–µ—Ç–∞
        overwrites = {
            interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
            interaction.guild.get_role(support_role_id): discord.PermissionOverwrite(read_messages=True, send_messages=True)
        }

        channel = await interaction.guild.create_text_channel(
            name=f"ticket-{ticket_number}",
            category=category,
            topic=f"User ID: {interaction.user.id}",
            overwrites=overwrites
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
        ticket_info = {
            "number": ticket_number,
            "user_id": interaction.user.id,
            "guild_id": interaction.guild.id,
            "created_at": datetime.now().isoformat(),
            "status": "open",
            "last_activity": datetime.now().isoformat(),
            "added_users": []
        }
        ticket_data["active_tickets"][str(channel.id)] = ticket_info

        with open('config/tickets.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(ticket_data, f, default_flow_style=False, allow_unicode=True)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª —Ç–∏–∫–µ—Ç–∞
        embed = create_embed(
            title=f"–¢–∏–∫–µ—Ç #{ticket_number}",
            description=f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {interaction.user.mention}!\n–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–∫–æ—Ä–æ –≤–∞–º –ø–æ–º–æ–∂–µ—Ç."
        )
        
        view = TicketControlView()
        await channel.send(
            content=f"{interaction.user.mention} {interaction.guild.get_role(support_role_id).mention}",
            embed=embed,
            view=view
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        await interaction.response.send_message(
            embed=create_embed(
                description=f"–í–∞—à —Ç–∏–∫–µ—Ç #{ticket_number} —Å–æ–∑–¥–∞–Ω: {channel.mention}"
            ),
            ephemeral=True
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞
        logs_channel = interaction.guild.get_channel(int(config['tickets']['logs_channel']))
        if logs_channel:
            log_embed = create_embed(
                title=f"–¢–∏–∫–µ—Ç #{ticket_number} —Å–æ–∑–¥–∞–Ω",
                description=f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {interaction.user.mention}\n**–ö–∞–Ω–∞–ª:** {channel.mention}"
            )
            await logs_channel.send(embed=log_embed)

class RatingView(discord.ui.View):
    def __init__(self, ticket_id: int):
        super().__init__(timeout=300)
        self.ticket_id = ticket_id

    @discord.ui.button(label="1", style=discord.ButtonStyle.red, custom_id="rate_1")
    async def rate_1(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.rate(interaction, 1)

    @discord.ui.button(label="2", style=discord.ButtonStyle.gray, custom_id="rate_2")
    async def rate_2(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.rate(interaction, 2)

    @discord.ui.button(label="3", style=discord.ButtonStyle.gray, custom_id="rate_3")
    async def rate_3(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.rate(interaction, 3)

    @discord.ui.button(label="4", style=discord.ButtonStyle.gray, custom_id="rate_4")
    async def rate_4(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.rate(interaction, 4)

    @discord.ui.button(label="5", style=discord.ButtonStyle.green, custom_id="rate_5")
    async def rate_5(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.rate(interaction, 5)

    async def rate(self, interaction: discord.Interaction, rating: int):
        with open('config/tickets.yaml', 'r', encoding='utf-8') as f:
            ticket_data = yaml.safe_load(f)
        
        ticket_data["ratings"][str(self.ticket_id)] = rating
        
        with open('config/tickets.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(ticket_data, f, default_flow_style=False, allow_unicode=True)

        await interaction.response.send_message(
            embed=create_embed(
                description=f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {rating} –∑–≤–µ–∑–¥."
            ),
            ephemeral=True
        )
        self.stop()

class TicketControlView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å", style=discord.ButtonStyle.danger, emoji="üîí", custom_id="close_ticket")
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        with open('config/config.yaml', 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        
        with open('config/tickets.yaml', 'r', encoding='utf-8') as f:
            ticket_data = yaml.safe_load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
            support_role_id = int(config['tickets']['support_role'])
            if not interaction.user.get_role(support_role_id) and not interaction.user.guild_permissions.administrator:
                return await interaction.response.send_message(
                    embed=create_embed(
                        description="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞!"
                    ),
                    ephemeral=True
                )

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ
            ticket_id = str(interaction.channel.id)
            if ticket_id in ticket_data["active_tickets"]:
                ticket_info = ticket_data["active_tickets"].pop(ticket_id)
                ticket_info["closed_at"] = datetime.now().isoformat()
                ticket_info["closed_by"] = interaction.user.id
                ticket_data["closed_tickets"][ticket_id] = ticket_info
                
                with open('config/tickets.yaml', 'w', encoding='utf-8') as f:
                    yaml.dump(ticket_data, f, default_flow_style=False, allow_unicode=True)

        await interaction.response.send_message(
            embed=create_embed(
                description="–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
            )
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –æ—Ü–µ–Ω–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ç–∏–∫–µ—Ç–∞
        user = interaction.guild.get_member(ticket_info["user_id"])
        if user:
            rating_embed = create_embed(
                title="–û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç 1 –¥–æ 5"
            )
            try:
                await user.send(embed=rating_embed, view=RatingView(interaction.channel.id))
            except:
                pass

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
        logs_channel = interaction.guild.get_channel(int(config['tickets']['logs_channel']))
        if logs_channel:
            log_embed = create_embed(
                title=f"–¢–∏–∫–µ—Ç #{ticket_info['number']} –∑–∞–∫—Ä—ã—Ç",
                description=f"**–ö–∞–Ω–∞–ª:** {interaction.channel.name}\n**–ó–∞–∫—Ä—ã—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:** {interaction.user.mention}"
            )
            await logs_channel.send(embed=log_embed)

        await asyncio.sleep(5)
        await interaction.channel.delete()

    @discord.ui.button(label="–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", style=discord.ButtonStyle.green, emoji="üë•", custom_id="add_member")
    async def add_member(self, interaction: discord.Interaction, button: discord.ui.Button):
        modal = AddMemberModal()
        await interaction.response.send_modal(modal)

class AddMemberModal(discord.ui.Modal, title="–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"):
    user_id = discord.ui.TextInput(
        label="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
        required=True
    )

    async def on_submit(self, interaction: discord.Interaction):
        try:
            user_id = int(self.user_id.value)
            user = interaction.guild.get_member(user_id)
            
            if not user:
                return await interaction.response.send_message(
                    embed=create_embed(
                        description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"
                    ),
                    ephemeral=True
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            await interaction.channel.set_permissions(user, read_messages=True, send_messages=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞
            with open('config/tickets.yaml', 'r', encoding='utf-8') as f:
                ticket_data = yaml.safe_load(f)
                
            ticket_id = str(interaction.channel.id)
            if ticket_id in ticket_data["active_tickets"]:
                if user_id not in ticket_data["active_tickets"][ticket_id]["added_users"]:
                    ticket_data["active_tickets"][ticket_id]["added_users"].append(user_id)
                
                with open('config/tickets.yaml', 'w', encoding='utf-8') as f:
                    yaml.dump(ticket_data, f, default_flow_style=False, allow_unicode=True)

            await interaction.response.send_message(
                embed=create_embed(
                    description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.mention} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∏–∫–µ—Ç!"
                )
            )
        except ValueError:
            await interaction.response.send_message(
                embed=create_embed(
                    description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!"
                ),
                ephemeral=True
            )

class Tickets(commands.GroupCog, name="tickets"):
    def __init__(self, bot):
        self.bot = bot
        super().__init__()

    @commands.Cog.listener()
    async def on_ready(self):
        self.bot.add_view(TicketView())
        self.bot.add_view(TicketControlView())

    @app_commands.command(name="setup", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ç–æ–≤")
    @app_commands.default_permissions(administrator=True)
    async def setup(self, interaction: discord.Interaction):
        with open('config/config.yaml', 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)

        channel_id = int(config['tickets']['panel']['channel'])
        channel = interaction.guild.get_channel(channel_id)

        if not channel:
            return await interaction.response.send_message(
                embed=create_embed(
                    description="–ö–∞–Ω–∞–ª –¥–ª—è –ø–∞–Ω–µ–ª–∏ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                    color='RED'
                ),
                ephemeral=True
            )

        embed = create_embed(
            title="üì© –°–∏—Å—Ç–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤",
            description="–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç –∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",
            color='BLUE'
        )

        view = TicketView()
        await channel.send(embed=embed, view=view)
        
        await interaction.response.send_message(
            embed=create_embed(
                description="–ü–∞–Ω–µ–ª—å —Ç–∏–∫–µ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!",
                color='GREEN'
            ),
            ephemeral=True
        )

    @app_commands.command(name="stats", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–∏–∫–µ—Ç–æ–≤")
    @app_commands.default_permissions(administrator=True)
    async def stats(self, interaction: discord.Interaction):
        with open('config/tickets.yaml', 'r', encoding='utf-8') as f:
            ticket_data = yaml.safe_load(f)

        total_tickets = ticket_data["ticket_counter"]
        active_tickets = len(ticket_data["active_tickets"])
        closed_tickets = len(ticket_data["closed_tickets"])
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
        ratings = ticket_data["ratings"].values()
        avg_rating = sum(ratings) / len(ratings) if ratings else 0

        embed = create_embed(
            title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤",
            color='BLUE'
        )
        embed.add_field(name="–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤", value=str(total_tickets), inline=True)
        embed.add_field(name="–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã", value=str(active_tickets), inline=True)
        embed.add_field(name="–ó–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã", value=str(closed_tickets), inline=True)
        embed.add_field(name="–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞", value=f"{avg_rating:.1f}‚≠ê", inline=True)

        await interaction.response.send_message(embed=embed)

async def setup(bot):
    await bot.add_cog(Tickets(bot)) 