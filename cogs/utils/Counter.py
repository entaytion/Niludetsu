import discord
from discord.ext import commands
from discord import app_commands
import re
from Niludetsu import (
    Embed,
    Emojis,
    cooldown
)
import asyncio
from Niludetsu.database.db import Database

class Counter(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.last_number = {}  # {channel_id: last_number}
        self.last_user = {}  # {channel_id: user_id}
        self.forum_channel_id = 1338883900877049876  # ID —Ñ–æ—Ä—É–º-–∫–∞–Ω–∞–ª–∞
        self.counter_thread_id = None  # ID –≤–µ—Ç–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞
        self.ready = False
        asyncio.create_task(self._initialize())

    async def _initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        await self.bot.wait_until_ready()  # –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
        await self.db.init()
        await self.load_numbers()
        self.ready = True
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º ID –≤–µ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = await self.db.fetch_one(
            "SELECT thread_id FROM games WHERE game_type = 'counter' AND forum_id = ?",
            str(self.forum_channel_id)
        )
        if result and result['thread_id']:
            self.counter_thread_id = int(result['thread_id'])
            
        await self.ensure_counter_thread()

    async def ensure_counter_thread(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ"""
        if not self.ready:
            return

        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä—É–º-–∫–∞–Ω–∞–ª
            forum = self.bot.get_channel(self.forum_channel_id)
            if not forum:
                print(f"‚ùå –§–æ—Ä—É–º-–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.forum_channel_id}")
                return

            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ—Ç–∫—É
            if self.counter_thread_id:
                thread = self.bot.get_channel(self.counter_thread_id)
                if thread and not thread.archived:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
                    return thread  # –í–µ—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ç–∫—É –∏ —ç–º–±–µ–¥
            embed = Embed(
                title="üî¢ –°—á–µ—Ç—á–∏–∫",
                description="–ù–∞—á–∏–Ω–∞–µ–º —Å—á–∏—Ç–∞—Ç—å —Å 1!\n–¢–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ: 0",
                color="DEFAULT"
            )
            thread = await forum.create_thread(
                name="üî¢ –°—á–µ—Ç—á–∏–∫",
                embed=embed,
                auto_archive_duration=4320  # 3 –¥–Ω—è
            )
            self.counter_thread_id = thread.thread.id
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–µ—Ç–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.execute(
                """
                INSERT INTO games (channel_id, game_type, last_value, forum_id, thread_id, created_at, updated_at)
                VALUES (?, 'counter', ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                ON CONFLICT(channel_id) DO UPDATE SET 
                last_value = ?, forum_id = ?, thread_id = ?, updated_at = CURRENT_TIMESTAMP
                """,
                str(thread.thread.id), "0", str(self.forum_channel_id), str(thread.thread.id),
                "0", str(self.forum_channel_id), str(thread.thread.id)
            )
            
            self.last_number[thread.thread.id] = 0
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ç–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞: {thread.thread.id}")
            return thread

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ—Ç–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
            return None

    async def load_numbers(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–∏—Å–µ–ª –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        rows = await self.db.fetch_all(
            "SELECT channel_id, last_value FROM games WHERE game_type = 'counter'"
        )
        for row in rows:
            channel_id = int(row['channel_id'])
            self.last_number[channel_id] = int(row['last_value'])
            # –û—á–∏—â–∞–µ–º last_user –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            self.last_user[channel_id] = None
            
        if self.last_number:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
            self.counter_thread_id = int(list(self.last_number.keys())[0])

    async def update_counter_embed(self, channel_id: int, number: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–±–µ–¥–∞ —Å —Ç–µ–∫—É—â–∏–º —á–∏—Å–ª–æ–º"""
        try:
            channel = self.bot.get_channel(channel_id)
            if channel:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in channel.history(limit=10):
                    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ —Å —ç–º–±–µ–¥–æ–º
                    if message.author == self.bot.user and message.embeds:
                        embed = message.embeds[0]
                        if embed.title == "üî¢ –°—á–µ—Ç—á–∏–∫":
                            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥
                            new_embed = Embed(
                                title="üî¢ –°—á–µ—Ç—á–∏–∫",
                                description=f"–¢–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ: {number}",
                                color="DEFAULT"
                            )
                            await message.edit(embed=new_embed)
                            return
                
                # –ï—Å–ª–∏ —ç–º–±–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                embed = Embed(
                    title="üî¢ –°—á–µ—Ç—á–∏–∫",
                    description=f"–¢–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ: {number}",
                    color="DEFAULT"
                )
                await channel.send(embed=embed)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–º–±–µ–¥–∞: {e}")

    async def save_number(self, channel_id: int, number: int, user_id: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–∏—Å–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        await self.db.execute(
            """INSERT INTO games (channel_id, game_type, last_value, updated_at) 
               VALUES (?, 'counter', ?, CURRENT_TIMESTAMP)
               ON CONFLICT(channel_id) DO UPDATE SET 
               last_value = ?, updated_at = CURRENT_TIMESTAMP""",
            str(channel_id), str(number), str(number)
        )
        self.last_number[channel_id] = number
        self.last_user[channel_id] = user_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–±–µ–¥
        await self.update_counter_embed(channel_id, number)

    def evaluate_expression(self, expression: str) -> int:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
            expression = expression.replace(" ", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–º
            if expression.isdigit():
                return int(expression)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            if not re.match(r'^[0-9+\-*/()]+$', expression):
                return None
                
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            result = eval(expression, {"__builtins__": {}}, {})
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
            if isinstance(result, (int, float)) and float(result).is_integer():
                return int(result)
            return None
        except:
            return None

    async def setup_counter(self, ctx):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–µ—Ç–∫—É
        thread = await self.ensure_counter_thread()
        
        if thread:
            return await ctx.send(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"–°—á–µ—Ç—á–∏–∫ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –≤–µ—Ç–∫–µ {thread.mention}\n"
                              f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {self.last_number.get(thread.id, 0)}",
                    color="RED"
                )
            )

        # –ï—Å–ª–∏ –≤–µ—Ç–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        thread = await self.ensure_counter_thread()
        
        if thread:
            return await ctx.send(
                embed=Embed(
                    title=f"{Emojis.SUCCESS} –°—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
                    description=f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ç–∫–∞: {thread.mention}\n"
                              f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: 0",
                    color="GREEN"
                )
            )
        else:
            return await ctx.send(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ—Ç–∫—É —Å—á–µ—Ç—á–∏–∫–∞",
                    color="RED"
                )
            )

    async def show_info(self, ctx):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç—á–∏–∫–µ"""
        thread = self.bot.get_channel(self.counter_thread_id)
        if thread and thread.id in self.last_number:
            return await ctx.send(
                embed=Embed(
                    title="üî¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç—á–∏–∫–µ",
                    description=(
                        f"**–ö–∞–Ω–∞–ª:** {thread.mention}\n"
                        f"**–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:** {self.last_number[thread.id]}\n"
                        f"**–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω"
                    ),
                    color="BLUE"
                )
            )
        else:
            return await ctx.send(
                embed=Embed(
                    title="üî¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç—á–∏–∫–µ",
                    description="–°—á–µ—Ç—á–∏–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!games counter setup`",
                    color="YELLOW"
                )
            )

    async def delete_counter(self, ctx):
        """–£–¥–∞–ª–∏—Ç—å —Å—á–µ—Ç—á–∏–∫"""
        if self.counter_thread_id:
            await self.db.execute(
                "DELETE FROM games WHERE channel_id = ? AND game_type = 'counter'",
                str(self.counter_thread_id)
            )
            if self.counter_thread_id in self.last_number:
                del self.last_number[self.counter_thread_id]
            return await ctx.send(
                embed=Embed(
                    title=f"{Emojis.SUCCESS} –°—á–µ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω",
                    description="–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã",
                    color="GREEN"
                )
            )
        else:
            return await ctx.send(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description="–°—á–µ—Ç—á–∏–∫ –Ω–µ –±—ã–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    color="RED"
                )
            )

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        try:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –≤ –≤–µ—Ç–∫–µ —Å—á–µ—Ç—á–∏–∫–∞
            if message.author.bot or message.channel.id != self.counter_thread_id:
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–æ—Ç –∂–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å —Å–Ω–æ–≤–∞
            if message.channel.id in self.last_user and self.last_user[message.channel.id] == message.author.id:
                try:
                    await message.delete()
                except discord.NotFound:
                    pass
                return

            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            result = self.evaluate_expression(message.content.strip())
            if result is None:
                try:
                    await message.delete()
                except discord.NotFound:
                    pass
                return

            current_number = self.last_number.get(message.channel.id, 0)
            expected_number = current_number + 1

            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Å—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é
            if result == expected_number:
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await self.save_number(message.channel.id, result, message.author.id)
                try:
                    await message.add_reaction("‚úÖ")
                except discord.NotFound:
                    pass
                return
            else:
                try:
                    await message.delete()
                except discord.NotFound:
                    pass
                return
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: {e}")

    @commands.Cog.listener()
    async def on_ready(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        if not self.ready:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ —Å—á–µ—Ç—á–∏–∫–∞
        if self.counter_thread_id:
            channel = self.bot.get_channel(self.counter_thread_id)
            if not channel:
                print(f"‚ùå –í–µ—Ç–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.counter_thread_id}")
                # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await self.db.execute(
                    "DELETE FROM games WHERE channel_id = ? AND game_type = 'counter'",
                    str(self.counter_thread_id)
                )
                if self.counter_thread_id in self.last_number:
                    del self.last_number[self.counter_thread_id]
                self.counter_thread_id = None
                # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É
                await self.ensure_counter_thread()

    @app_commands.command(name="count", description="–ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —á—Ç–æ-–ª–∏–±–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
    @app_commands.describe(
        text="–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞",
        count_type="–ß—Ç–æ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å (chars/words/lines)"
    )
    @cooldown(seconds=3)
    async def count(
        self,
        interaction: discord.Interaction,
        text: str,
        count_type: str = "chars"
    ):
        count_type = count_type.lower()
        if count_type not in ["chars", "words", "lines"]:
            return await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥—Å—á–µ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: chars/words/lines",
                    color="RED"
                ),
                ephemeral=True
            )

        result = 0
        if count_type == "chars":
            result = len(text)
        elif count_type == "words":
            result = len(text.split())
        else:  # lines
            result = len(text.splitlines())

        count_types = {
            "chars": "—Å–∏–º–≤–æ–ª–æ–≤",
            "words": "—Å–ª–æ–≤",
            "lines": "—Å—Ç—Ä–æ–∫"
        }

        await interaction.response.send_message(
            embed=Embed(
                title=f"{Emojis.SUCCESS} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Å—á–µ—Ç–∞",
                description=f"–í —Ç–µ–∫—Å—Ç–µ `{result}` {count_types[count_type]}",
                color="GREEN"
            )
        )

async def setup(bot):
    await bot.add_cog(Counter(bot)) 