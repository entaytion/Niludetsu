import discord
from discord.ext import commands
from utils import get_user, save_user, create_embed
from datetime import datetime

class Marry(commands.Cog):
    def __init__(self, client):
        self.client = client
        self.proposals = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó

    @discord.app_commands.command(name="marry", description="–í—ã–π—Ç–∏ –∑–∞–º—É–∂ / –∂–µ–Ω–∏—Ç—å—Å—è –∑–∞ –∫–æ–≥–æ-—Ç–æ")
    @discord.app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    async def marry(self, interaction: discord.Interaction, user: discord.Member):
        if user.bot:
            await interaction.response.send_message(
                embed=create_embed(
                    description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è —Å –±–æ—Ç–æ–º!"
                )
            )
            return

        if user.id == interaction.user.id:
            await interaction.response.send_message(
                embed=create_embed(
                    description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è —Å–∞–º–∏ —Å —Å–æ–±–æ–π!"
                )
            )
            return

        author_data = get_user(self.client, str(interaction.user.id))
        target_data = get_user(self.client, str(user.id))

        if not author_data or not target_data:
            await interaction.response.send_message(
                embed=create_embed(
                    description="–û–±–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!"
                )
            )
            return

        if author_data.get('spouse'):
            await interaction.response.send_message(
                embed=create_embed(
                    description="–í—ã —É–∂–µ –∂–µ–Ω–∞—Ç—ã!"
                )
            )
            return

        if target_data.get('spouse'):
            await interaction.response.send_message(
                embed=create_embed(
                    description="–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∂–µ–Ω–∞—Ç!"
                )
            )
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        class MarryButtons(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=60)
                self.value = None

            @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green)
            async def accept(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != user.id:
                    await button_interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!")
                    return
                self.value = True
                self.stop()
                for item in self.children:
                    item.disabled = True
                await button_interaction.response.edit_message(view=self)

            @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
            async def decline(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != user.id:
                    await button_interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!")
                    return
                self.value = False
                self.stop()
                for item in self.children:
                    item.disabled = True
                await button_interaction.response.edit_message(view=self)

        view = MarryButtons()
        await interaction.response.send_message(
            embed=create_embed(
                title="üíç –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞",
                description=f"{interaction.user.mention} –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {user.mention}!\n"
                           f"–£ –≤–∞—Å –µ—Å—Ç—å 60 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å."
            ),
            view=view
        )

        # –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        await view.wait()

        if view.value is None:
            await interaction.edit_original_response(
                embed=create_embed(
                    description="–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –≤—ã—à–ª–æ!"
                ),
                view=None
            )
        elif view.value:
            # –û–¥—Ä—É–∂—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
            author_data = get_user(self.client, str(interaction.user.id))
            target_data = get_user(self.client, str(user.id))
            
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ —à–ª—é–±
            marriage_date = datetime.now().isoformat()
            joint_balance = (author_data.get('balance', 0) + target_data.get('balance', 0)) // 2
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø–µ—Ä—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            author_data.update({
                'spouse': str(user.id),
                'marriage_date': marriage_date,
                'balance': joint_balance
            })
            
            # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            target_data.update({
                'spouse': str(interaction.user.id),
                'marriage_date': marriage_date,
                'balance': joint_balance
            })
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
            save_user(str(interaction.user.id), author_data)
            save_user(str(user.id), target_data)
            
            await interaction.edit_original_response(
                embed=create_embed(
                    title="üíë –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –º–æ–ª–æ–¥—ã—Ö!",
                    description=f"{interaction.user.mention} –∏ {user.mention} —Ç–µ–ø–µ—Ä—å –∂–µ–Ω–∞—Ç—ã!\n"
                               f"–í–∞—à –æ–±—â–∏–π –±–∞–Ω–∫: {joint_balance} <:aeMoney:1266066622561517781>"
                ),
                view=None
            )
        else:
            await interaction.edit_original_response(
                embed=create_embed(
                    description=f"{user.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {interaction.user.mention}!"
                ),
                view=None
            )

async def setup(client):
    await client.add_cog(Marry(client)) 