import discord
from discord.ext import commands
from Niludetsu import Embed, AkinatorAPI

class AkinatorView(discord.ui.View):
    def __init__(self, aki_instance):
        super().__init__(timeout=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        self.aki = aki_instance

    @discord.ui.button(label="–î–∞", style=discord.ButtonStyle.success, emoji="‚úÖ")
    async def yes_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.process_answer(interaction, 'y')

    @discord.ui.button(label="–ù–µ—Ç", style=discord.ButtonStyle.danger, emoji="‚ùå")
    async def no_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.process_answer(interaction, 'n')

    @discord.ui.button(label="–ù–µ –∑–Ω–∞—é", style=discord.ButtonStyle.gray, emoji="‚ùì")
    async def idk_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.process_answer(interaction, 'idk')

    @discord.ui.button(label="–í–µ—Ä–æ—è—Ç–Ω–æ –¥–∞", style=discord.ButtonStyle.primary, emoji="üëç")
    async def probably_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.process_answer(interaction, 'p')

    @discord.ui.button(label="–í–µ—Ä–æ—è—Ç–Ω–æ –Ω–µ—Ç", style=discord.ButtonStyle.primary, emoji="üëé")
    async def probably_not_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.process_answer(interaction, 'pn')

    @discord.ui.button(label="–ù–∞–∑–∞–¥", style=discord.ButtonStyle.gray, emoji="‚Ü©Ô∏è", row=1)
    async def back_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        self.aki.go_back()
        embed=Embed(
            title="üßû‚Äç‚ôÇÔ∏è –ê–∫–∏–Ω–∞—Ç–æ—Ä",
            description=f"**–í–æ–ø—Ä–æ—Å #{self.aki.step + 1}**\n{self.aki.question}",
            color="BLUE"
        )
        await interaction.edit_original_response(embed=embed, view=self)

    @discord.ui.button(label="–ó–∞–∫–æ–Ω—á–∏—Ç—å", style=discord.ButtonStyle.red, emoji="üèÅ", row=1)
    async def end_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.defer()
        if self.aki.progression >= 80:
            description = f"**{self.aki.name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\n"
            if self.aki.description:
                description += f"{self.aki.description}\n\n"
            description += f"–Ø —É–≤–µ—Ä–µ–Ω –Ω–∞ {round(self.aki.progression)}%"
            
            embed=Embed(
                title="üßû‚Äç‚ôÇÔ∏è –Ø –¥—É–º–∞—é, —ç—Ç–æ...",
                description=description,
                color="GREEN"
            )
            if self.aki.photo:
                embed.set_image(url=self.aki.photo)
        else:
            embed=Embed(
                description="–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –Ø –Ω–µ —Å–º–æ–≥ —É–≥–∞–¥–∞—Ç—å üò¢",
                color="RED"
            )
        await interaction.edit_original_response(embed=embed, view=None)

    async def process_answer(self, interaction: discord.Interaction, answer: str):
        await interaction.response.defer()
        self.aki.post_answer(answer)
        
        if self.aki.progression >= 80 and self.aki.step >= 10:
            description = f"**{self.aki.name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}**\n"
            if self.aki.description:
                description += f"{self.aki.description}\n\n"
            description += f"–Ø —É–≤–µ—Ä–µ–Ω –Ω–∞ {round(self.aki.progression)}%"
            
            embed=Embed(
                title="üßû‚Äç‚ôÇÔ∏è –Ø –¥—É–º–∞—é, —ç—Ç–æ...",
                description=description,
                color="GREEN"
            )
            if self.aki.photo:
                embed.set_image(url=self.aki.photo)
            await interaction.edit_original_response(embed=embed, view=None)
        else:
            embed=Embed(
                title="üßû‚Äç‚ôÇÔ∏è –ê–∫–∏–Ω–∞—Ç–æ—Ä",
                description=f"**–í–æ–ø—Ä–æ—Å #{self.aki.step + 1}**\n{self.aki.question}",
                color="BLUE"
            )
            await interaction.edit_original_response(embed=embed, view=self)

class Akinator(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.games = {}

    @discord.app_commands.command(name="akinator", description="–ò–≥—Ä–∞—Ç—å –≤ –ê–∫–∏–Ω–∞—Ç–æ—Ä–∞")
    async def akinator(self, interaction: discord.Interaction):
        if interaction.user.id in self.games:
            await interaction.response.send_message(
                embed=Embed(
                    description="‚ùå –í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É.",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        aki = AkinatorAPI()
        q = aki.start_game()

        embed=Embed(
            title="üßû‚Äç‚ôÇÔ∏è –ê–∫–∏–Ω–∞—Ç–æ—Ä",
            description=f"**–í–æ–ø—Ä–æ—Å #{aki.step + 1}**\n{q}",
            color="BLUE"
        )

        self.games[interaction.user.id] = aki
        view = AkinatorView(aki)
        await interaction.response.send_message(embed=embed, view=view)

async def setup(bot):
    await bot.add_cog(Akinator(bot))