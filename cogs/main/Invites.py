import discord
from discord import app_commands
from discord.ext import commands
import yaml
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, List, Tuple
from utils import create_embed, EMOJIS

class AccountType:
    NORMAL = "–û–±—ã—á–Ω—ã–π"
    NEW = "–ù–æ–≤—ã–π"
    SUSPICIOUS = "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π"

class InviteSource:
    UNKNOWN = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    DISCORD = "Discord"
    SERVER = "–°–µ—Ä–≤–µ—Ä"
    VANITY = "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
    INTEGRATION = "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
    TWITTER = "Twitter"
    FACEBOOK = "Facebook"
    INSTAGRAM = "Instagram"
    REDDIT = "Reddit"
    YOUTUBE = "YouTube"
    TWITCH = "Twitch"
    STEAM = "Steam"
    XBOX = "Xbox"
    PLAYSTATION = "PlayStation"
    MOBILE = "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    DESKTOP = "–ö–æ–º–ø—å—é—Ç–µ—Ä"
    WEB = "–í–µ–±-–±—Ä–∞—É–∑–µ—Ä"

    @staticmethod
    def get_platform_emoji(source: str) -> str:
        emoji_map = {
            "TWITTER": "üê¶",
            "FACEBOOK": "üë•",
            "INSTAGRAM": "üì∏",
            "REDDIT": "ü§ñ",
            "YOUTUBE": "üé•",
            "TWITCH": "üì∫",
            "STEAM": "üéÆ",
            "XBOX": "üü©",
            "PLAYSTATION": "üéØ",
            "MOBILE": "üì±",
            "DESKTOP": "üíª",
            "WEB": "üåê",
            "UNKNOWN": "‚ùì"
        }
        return emoji_map.get(source, "‚ùì")

    @staticmethod
    def from_invite_source(source: Optional[str]) -> Tuple[str, str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if not source:
            return "UNKNOWN", f"‚ùì –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            
        source = source.upper()
        platform = source.split('_')[0] if '_' in source else source
        
        if platform in ["TWITTER", "FACEBOOK", "INSTAGRAM", "REDDIT", "YOUTUBE", "TWITCH"]:
            emoji = InviteSource.get_platform_emoji(platform)
            return platform, f"{emoji} {platform.capitalize()}"
        elif platform in ["DESKTOP", "MOBILE", "WEB"]:
            emoji = InviteSource.get_platform_emoji(platform)
            return platform, f"{emoji} {platform.capitalize()}"
        elif platform in ["XBOX", "PLAYSTATION", "STEAM"]:
            emoji = InviteSource.get_platform_emoji(platform)
            return platform, f"{emoji} {platform}"
        else:
            return "UNKNOWN", f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ ({source})"

class InviteTracker:
    def __init__(self, bot):
        self.bot = bot
        self.invites: Dict[int, List[discord.Invite]] = {}
        self.invite_uses: Dict[int, Dict[str, int]] = {}
        with open("config/config.yaml", "r", encoding="utf-8") as f:
            self.config = yaml.safe_load(f)
            self.settings = self.config.get('invites', {})
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        self.config['invites'] = self.settings
        with open('config/config.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(self.config, f, indent=4, allow_unicode=True)

    async def cache_invites(self):
        """–ö—ç—à–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∏–Ω–≤–∞–π—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        for guild in self.bot.guilds:
            try:
                guild_invites = await guild.invites()
                self.invites[guild.id] = guild_invites
                self.invite_uses[guild.id] = {invite.code: invite.uses for invite in guild_invites}
            except discord.Forbidden:
                continue

    async def get_used_invite(self, guild: discord.Guild) -> Optional[discord.Invite]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–π –∏–Ω–≤–∞–π—Ç –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"""
        try:
            current_invites = await guild.invites()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤
            old_uses = self.invite_uses.get(guild.id, {})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ç–µ–∫—É—â–∏—Ö –∏–Ω–≤–∞–π—Ç–æ–≤
            self.invites[guild.id] = current_invites
            self.invite_uses[guild.id] = {invite.code: invite.uses for invite in current_invites}
            
            # –ò—â–µ–º –∏–Ω–≤–∞–π—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            for invite in current_invites:
                old_uses_count = old_uses.get(invite.code, 0)
                if invite.uses > old_uses_count:
                    return invite
                    
        except discord.Forbidden:
            return None
            
        return None

    def get_log_channel(self, guild_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤"""
        return self.settings.get('log_channels', {}).get(str(guild_id))

    def set_log_channel(self, guild_id: int, channel_id: int):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤"""
        if 'log_channels' not in self.settings:
            self.settings['log_channels'] = {}
        self.settings['log_channels'][str(guild_id)] = channel_id
        self.save_settings()

    def set_welcome_message(self, guild_id: int, message: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if 'welcome_messages' not in self.settings:
            self.settings['welcome_messages'] = {}
        self.settings['welcome_messages'][str(guild_id)] = message
        self.save_settings()

    def set_leave_message(self, guild_id: int, message: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
        if 'leave_messages' not in self.settings:
            self.settings['leave_messages'] = {}
        self.settings['leave_messages'][str(guild_id)] = message
        self.save_settings()

    def get_welcome_message(self, guild_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        return self.settings.get('welcome_messages', {}).get(
            str(guild_id),
            "üëã {member.mention} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É!\n" +
            "üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç: {inviter.mention}\n" +
            "üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {invite.uses}"
        )

    def get_leave_message(self, guild_id: int) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
        return self.settings.get('leave_messages', {}).get(
            str(guild_id),
            "üëã {member} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä\n" +
            "‚è±Ô∏è –ü—Ä–æ–±—ã–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {time_on_server}"
        )

    def get_account_type(self, member: discord.Member) -> Tuple[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        account_age = datetime.now(timezone.utc) - member.created_at
        
        if account_age < timedelta(days=3):
            return AccountType.SUSPICIOUS, f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ 3 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ ({account_age.days} –¥–Ω.)"
        elif account_age < timedelta(days=7):
            return AccountType.NEW, f"‚ÑπÔ∏è –ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç ({account_age.days} –¥–Ω.)"
        else:
            return AccountType.NORMAL, f"‚úÖ –û–±—ã—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ({account_age.days} –¥–Ω.)"

    def get_invite_source(self, invite: Optional[discord.Invite]) -> Tuple[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        if not invite:
            return InviteSource.UNKNOWN, "üîç –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        if hasattr(invite, 'source'):
            platform, source_text = InviteSource.from_invite_source(invite.source)
            return platform, source_text
            
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
        if invite.guild and invite.guild.vanity_url_code and invite.code == invite.guild.vanity_url_code:
            return InviteSource.VANITY, "üåü –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        elif invite.inviter and invite.inviter.bot:
            return InviteSource.INTEGRATION, f"ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ({invite.inviter.name})"
        elif "discord.gg/" in (invite.code or ""):
            return InviteSource.DISCORD, "üîó –°—Å—ã–ª–∫–∞ Discord"
        else:
            return InviteSource.SERVER, "üè† –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"

    async def format_join_message(self, member: discord.Member, invite: Optional[discord.Invite]) -> discord.Embed:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        embed = create_embed(
            title="–£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è",
            color=0x2ecc71,
            timestamp=datetime.utcnow()
        )
        
        embed.set_thumbnail(url=member.display_avatar.url)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
        account_type, account_info = self.get_account_type(member)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite_source, source_info = self.get_invite_source(invite)
        
        fields = [
            ("üë§ –£—á–∞—Å—Ç–Ω–∏–∫", f"{member.mention} ({member})", True),
            ("üè∑Ô∏è ID", member.id, True),
            ("üìÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω", f"<t:{int(member.created_at.timestamp())}:R>", True),
            ("üîç –¢–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞", account_info, True),
            ("üì® –ò—Å—Ç–æ—á–Ω–∏–∫", source_info, True)
        ]
        
        if invite:
            inviter = invite.inviter
            fields.extend([
                ("üîó –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ", f"discord.gg/{invite.code}", True),
                ("üë• –ü—Ä–∏–≥–ª–∞—Å–∏–ª", f"{inviter.mention} ({inviter})" if inviter else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", True),
                ("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π", invite.uses, True),
                ("‚è±Ô∏è –°–æ–∑–¥–∞–Ω–æ", f"<t:{int(invite.created_at.timestamp())}:R>", True),
                ("‚ôæÔ∏è –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ", "–î–∞" if invite.max_uses == 0 else "–ù–µ—Ç", True),
                ("‚åõ –ò—Å—Ç–µ–∫–∞–µ—Ç", f"<t:{int(invite.expires_at.timestamp())}:R>" if invite.expires_at else "–ù–∏–∫–æ–≥–¥–∞", True)
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            if invite.channel:
                fields.append(("üìù –ö–∞–Ω–∞–ª", f"{invite.channel.mention} ({invite.channel.name})", True))
        
        for name, value, inline in fields:
            embed.add_field(name=name, value=value, inline=inline)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        if account_type == AccountType.SUSPICIOUS:
            embed.description = f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å–æ–≤—Å–µ–º –Ω–µ–¥–∞–≤–Ω–æ!"
            
        return embed

    async def format_leave_message(self, member: discord.Member) -> discord.Embed:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        embed = create_embed(
            title="–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä",
            color=0xe74c3c,
            timestamp=datetime.now(timezone.utc)
        )
        
        embed.set_thumbnail(url=member.display_avatar.url)
        
        time_on_server = datetime.now(timezone.utc) - member.joined_at
        days = time_on_server.days
        hours, remainder = divmod(time_on_server.seconds, 3600)
        minutes, _ = divmod(remainder, 60)
        
        time_format = []
        if days > 0:
            time_format.append(f"{days} –¥–Ω.")
        if hours > 0:
            time_format.append(f"{hours} —á.")
        if minutes > 0:
            time_format.append(f"{minutes} –º–∏–Ω.")
        
        time_str = " ".join(time_format) if time_format else "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"
        
        fields = [
            ("üë§ –£—á–∞—Å—Ç–Ω–∏–∫", f"{member} ({member.id})", True),
            ("üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è", f"<t:{int(member.joined_at.timestamp())}:R>", True),
            ("‚è±Ô∏è –ü—Ä–æ–±—ã–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", time_str, True)
        ]
        
        for name, value, inline in fields:
            embed.add_field(name=name, value=value, inline=inline)
            
        return embed

    async def on_member_join(self, member: discord.Member):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if member.bot:
            return
            
        guild = member.guild
        log_channel_id = self.get_log_channel(guild.id)
        if not log_channel_id:
            return
            
        log_channel = guild.get_channel(log_channel_id)
        if not log_channel:
            return
            
        invite = await self.get_used_invite(guild)
        embed = await self.format_join_message(member, invite)
        
        try:
            await log_channel.send(embed=embed)
        except discord.Forbidden:
            pass

    async def on_member_remove(self, member: discord.Member):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if member.bot:
            return
            
        guild = member.guild
        log_channel_id = self.get_log_channel(guild.id)
        if not log_channel_id:
            return
            
        log_channel = guild.get_channel(log_channel_id)
        if not log_channel:
            return
            
        embed = await self.format_leave_message(member)
        
        try:
            await log_channel.send(embed=embed)
        except discord.Forbidden:
            pass

    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞"""
        await self.cache_invites()

class InvitesCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.invite_tracker = InviteTracker(bot)
        
    async def cog_load(self):
        await self.invite_tracker.setup()
        
    @commands.Cog.listener()
    async def on_member_join(self, member: discord.Member):
        await self.invite_tracker.on_member_join(member)
        
    @commands.Cog.listener()
    async def on_member_remove(self, member: discord.Member):
        await self.invite_tracker.on_member_remove(member)
        
    invites = app_commands.Group(name="invites", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –∏–Ω–≤–∞–π—Ç–æ–≤")
    
    @invites.command(name="channel", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –∏–Ω–≤–∞–π—Ç–æ–≤")
    @app_commands.describe(channel="–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤")
    @commands.has_permissions(administrator=True)
    async def set_log_channel(self, interaction: discord.Interaction, channel: discord.TextChannel):
        self.invite_tracker.set_log_channel(interaction.guild_id, channel.id)
        await interaction.response.send_message(
            embed=create_embed(
                description=f"{EMOJIS['SUCCESS']} –ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –∏–Ω–≤–∞–π—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel.mention}"
            ),
            ephemeral=True
        )
        
    @invites.command(name="welcome", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    @app_commands.describe(message="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
    @commands.has_permissions(administrator=True)
    async def set_welcome_message(self, interaction: discord.Interaction, *, message: str):
        self.invite_tracker.set_welcome_message(interaction.guild_id, message)
        await interaction.response.send_message(
            embed=create_embed(
                description=f"{EMOJIS['SUCCESS']} –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
            ),
            ephemeral=True
        )
        
    @invites.command(name="leave", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ")
    @app_commands.describe(message="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
    @commands.has_permissions(administrator=True)
    async def set_leave_message(self, interaction: discord.Interaction, *, message: str):
        self.invite_tracker.set_leave_message(interaction.guild_id, message)
        await interaction.response.send_message(
            embed=create_embed(
                description=f"{EMOJIS['SUCCESS']} –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
            ),
            ephemeral=True
        )
        
    @invites.command(name="test", description="–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")
    @app_commands.describe(type="–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞")
    @app_commands.choices(type=[
        app_commands.Choice(name="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ", value="welcome"),
        app_commands.Choice(name="–ü—Ä–∏ –≤—ã—Ö–æ–¥–µ", value="leave")
    ])
    @commands.has_permissions(administrator=True)
    async def test_messages(self, interaction: discord.Interaction, type: app_commands.Choice[str]):
        await interaction.response.defer(ephemeral=True)
        
        if type.value == "welcome":
            invite = None
            try:
                invites = await interaction.guild.invites()
                if invites:
                    invite = invites[0]
            except discord.Forbidden:
                pass
                
            embed = await self.invite_tracker.format_join_message(interaction.user, invite)
            await interaction.followup.send(
                content="–¢–µ—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:",
                embed=embed
            )
        else:
            embed = await self.invite_tracker.format_leave_message(interaction.user)
            await interaction.followup.send(
                content="–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:",
                embed=embed
            )
            
    @invites.command(name="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏")
    @app_commands.describe(code="–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–±–µ–∑ discord.gg/)")
    @commands.has_permissions(administrator=True)
    async def invite_info(self, interaction: discord.Interaction, code: str):
        try:
            invite = await self.bot.fetch_invite(code)
            
            embed = create_embed(
                title=f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏",
                description=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ —Å –∫–æ–¥–æ–º `{code}`"
            )
            
            if invite.guild:
                embed.add_field(name="üè† –°–µ—Ä–≤–µ—Ä", value=invite.guild.name, inline=True)
            
            if invite.channel:
                embed.add_field(name="üìù –ö–∞–Ω–∞–ª", value=invite.channel.mention, inline=True)
            
            if invite.inviter:
                embed.add_field(name="üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å", value=invite.inviter.mention, inline=True)
            
            if invite.created_at:
                embed.add_field(name="‚è±Ô∏è –°–æ–∑–¥–∞–Ω–æ", value=f"<t:{int(invite.created_at.timestamp())}:R>", inline=True)
            
            if hasattr(invite, 'uses') and invite.uses is not None:
                embed.add_field(name="üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π", value=str(invite.uses), inline=True)
            
            if hasattr(invite, 'max_uses') and invite.max_uses:
                embed.add_field(name="üî¢ –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π", value=str(invite.max_uses), inline=True)
            
            if hasattr(invite, 'expires_at') and invite.expires_at:
                embed.add_field(name="‚åõ –ò—Å—Ç–µ–∫–∞–µ—Ç", value=f"<t:{int(invite.expires_at.timestamp())}:R>", inline=True)
            
            await interaction.response.send_message(embed=embed)
            
        except discord.NotFound:
            await interaction.response.send_message(
                embed=create_embed(
                    description=f"{EMOJIS['ERROR']} –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                ),
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(
                embed=create_embed(
                    description=f"{EMOJIS['ERROR']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏: {str(e)}"
                ),
                ephemeral=True
            )

    @invites.command(name="list", description="–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")
    @commands.has_permissions(administrator=True)
    async def list_invites(self, interaction: discord.Interaction):
        await interaction.response.defer(ephemeral=True)
        
        try:
            guild_invites = await interaction.guild.invites()
            
            if not guild_invites:
                await interaction.followup.send(
                    embed=create_embed(
                        description=f"{EMOJIS['INFO']} –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π!",
                        color=0xe74c3c
                    ),
                    ephemeral=True
                )
                return
                
            embeds = []
            current_embed = create_embed(
                title="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
                timestamp=datetime.utcnow()
            )
            
            for i, invite in enumerate(guild_invites):
                # –ö–∞–∂–¥—ã–µ 25 –ø–æ–ª–µ–π —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–º–±–µ–¥
                if i > 0 and i % 25 == 0:
                    embeds.append(current_embed)
                    current_embed = create_embed(
                        title="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)",
                        timestamp=datetime.utcnow()
                    )
                
                inviter = invite.inviter
                channel = invite.channel
                value = (
                    f"üë• {inviter.mention if inviter else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                    f"üìù {channel.mention if channel else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                    f"üìä {invite.uses}/{invite.max_uses if invite.max_uses else '‚àû'}\n"
                    f"‚è±Ô∏è –°–æ–∑–¥–∞–Ω–æ: <t:{int(invite.created_at.timestamp())}:R>"
                )
                
                if invite.expires_at:
                    value += f"\n‚åõ –ò—Å—Ç–µ–∫–∞–µ—Ç: <t:{int(invite.expires_at.timestamp())}:R>"
                    
                current_embed.add_field(
                    name=f"üîó discord.gg/{invite.code}",
                    value=value,
                    inline=True
                )
            
            embeds.append(current_embed)
            
            for embed in embeds:
                await interaction.followup.send(embed=embed, ephemeral=True)
                
        except discord.Forbidden:
            await interaction.followup.send(
                embed=create_embed(
                    description=f"{EMOJIS['ERROR']} –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π!",
                    color=0xe74c3c
                ),
                ephemeral=True
            )
            
async def setup(bot):
    await bot.add_cog(InvitesCog(bot)) 