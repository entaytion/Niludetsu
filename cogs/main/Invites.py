import discord
from discord import app_commands
from discord.ext import commands
import yaml
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, List, Tuple
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.constants import Emojis

class AccountType:
    NORMAL = "–û–±—ã—á–Ω—ã–π"
    NEW = "–ù–æ–≤—ã–π"
    SUSPICIOUS = "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π"

class InviteSource:
    UNKNOWN = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    DISCORD = "Discord"
    SERVER = "–°–µ—Ä–≤–µ—Ä"
    VANITY = "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"
    INTEGRATION = "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
    TWITTER = "Twitter"
    FACEBOOK = "Facebook"
    INSTAGRAM = "Instagram"
    REDDIT = "Reddit"
    YOUTUBE = "YouTube"
    TWITCH = "Twitch"
    STEAM = "Steam"
    XBOX = "Xbox"
    PLAYSTATION = "PlayStation"
    MOBILE = "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
    DESKTOP = "–ö–æ–º–ø—å—é—Ç–µ—Ä"
    WEB = "–í–µ–±-–±—Ä–∞—É–∑–µ—Ä"

    @staticmethod
    def get_platform_emoji(source: str) -> str:
        emoji_map = {
            "TWITTER": "üê¶",
            "FACEBOOK": "üë•",
            "INSTAGRAM": "üì∏",
            "REDDIT": "ü§ñ",
            "YOUTUBE": "üé•",
            "TWITCH": "üì∫",
            "STEAM": "üéÆ",
            "XBOX": "üü©",
            "PLAYSTATION": "üéØ",
            "MOBILE": "üì±",
            "DESKTOP": "üíª",
            "WEB": "üåê",
            "UNKNOWN": "‚ùì"
        }
        return emoji_map.get(source, "‚ùì")

    @staticmethod
    def from_invite_source(source: Optional[str]) -> Tuple[str, str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        if not source:
            return "UNKNOWN", f"‚ùì –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            
        source = source.upper()
        platform = source.split('_')[0] if '_' in source else source
        
        if platform in ["TWITTER", "FACEBOOK", "INSTAGRAM", "REDDIT", "YOUTUBE", "TWITCH"]:
            emoji = InviteSource.get_platform_emoji(platform)
            return platform, f"{emoji} {platform.capitalize()}"
        elif platform in ["DESKTOP", "MOBILE", "WEB"]:
            emoji = InviteSource.get_platform_emoji(platform)
            return platform, f"{emoji} {platform.capitalize()}"
        elif platform in ["XBOX", "PLAYSTATION", "STEAM"]:
            emoji = InviteSource.get_platform_emoji(platform)
            return platform, f"{emoji} {platform}"
        else:
            return "UNKNOWN", f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ ({source})"

class InviteTracker:
    def __init__(self, bot):
        self.bot = bot
        self.invites: Dict[int, List[discord.Invite]] = {}
        self.invite_uses: Dict[int, Dict[str, int]] = {}
        with open("data/config.yaml", "r", encoding="utf-8") as f:
            self.config = yaml.safe_load(f)
            self.settings = self.config.get('invites', {})
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        self.config['invites'] = self.settings
        with open('data/config.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(self.config, f, indent=4, allow_unicode=True)

    async def cache_invites(self):
        """–ö—ç—à–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∏–Ω–≤–∞–π—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        for guild in self.bot.guilds:
            try:
                guild_invites = await guild.invites()
                self.invites[guild.id] = guild_invites
                self.invite_uses[guild.id] = {invite.code: invite.uses for invite in guild_invites}
            except discord.Forbidden:
                continue

    async def get_used_invite(self, guild: discord.Guild) -> Optional[discord.Invite]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–æ–π –∏–Ω–≤–∞–π—Ç –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"""
        try:
            current_invites = await guild.invites()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–æ–≤
            old_uses = self.invite_uses.get(guild.id, {})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ç–µ–∫—É—â–∏—Ö –∏–Ω–≤–∞–π—Ç–æ–≤
            self.invites[guild.id] = current_invites
            self.invite_uses[guild.id] = {invite.code: invite.uses for invite in current_invites}
            
            # –ò—â–µ–º –∏–Ω–≤–∞–π—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ç–æ—Ä–æ–≥–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            for invite in current_invites:
                old_uses_count = old_uses.get(invite.code, 0)
                if invite.uses > old_uses_count:
                    return invite
                    
        except discord.Forbidden:
            return None
            
        return None

    def get_log_channel(self, guild_id: int) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤"""
        return self.settings.get('channel')

    def get_account_type(self, member: discord.Member) -> Tuple[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        account_age = datetime.now(timezone.utc) - member.created_at
        
        if account_age < timedelta(days=3):
            return AccountType.SUSPICIOUS, f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ 3 –¥–Ω–µ–π –Ω–∞–∑–∞–¥ ({account_age.days} –¥–Ω.)"
        elif account_age < timedelta(days=7):
            return AccountType.NEW, f"‚ÑπÔ∏è –ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç ({account_age.days} –¥–Ω.)"
        else:
            return AccountType.NORMAL, f"‚úÖ –û–±—ã—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ({account_age.days} –¥–Ω.)"

    def get_invite_source(self, invite: Optional[discord.Invite]) -> Tuple[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        if not invite:
            return InviteSource.UNKNOWN, "üîç –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        if hasattr(invite, 'source'):
            platform, source_text = InviteSource.from_invite_source(invite.source)
            return platform, source_text
            
        # –ï—Å–ª–∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É
        if invite.guild and invite.guild.vanity_url_code and invite.code == invite.guild.vanity_url_code:
            return InviteSource.VANITY, "üåü –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        elif invite.inviter and invite.inviter.bot:
            return InviteSource.INTEGRATION, f"ü§ñ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ({invite.inviter.name})"
        elif "discord.gg/" in (invite.code or ""):
            return InviteSource.DISCORD, "üîó –°—Å—ã–ª–∫–∞ Discord"
        else:
            return InviteSource.SERVER, "üè† –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"

    async def format_join_message(self, member: discord.Member, invite: Optional[discord.Invite]) -> discord.Embed:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        embed=Embed(
            title=f"üëã –ù–æ–≤—ã–π {'–±–æ—Ç' if member.bot else '—É—á–∞—Å—Ç–Ω–∏–∫'} #{len(member.guild.members)}",
            color=0x2ecc71 if not member.bot else 0x3498db,
            timestamp=datetime.now(timezone.utc)
        )
        
        embed.set_thumbnail(url=member.display_avatar.url)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
        account_type, account_info = self.get_account_type(member)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite_source, source_info = self.get_invite_source(invite)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
        embed.add_field(
            name=f"{'ü§ñ' if member.bot else 'üë§'} {'–ë–æ—Ç' if member.bot else '–£—á–∞—Å—Ç–Ω–∏–∫'}",
            value=f"{member.mention}\n`{member.name}`\nID: `{member.id}`",
            inline=False
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        created_timestamp = int(member.created_at.timestamp())
        embed.add_field(
            name="üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ",
            value=f"–°–æ–∑–¥–∞–Ω: <t:{created_timestamp}:D> (<t:{created_timestamp}:R>)\n{account_info if not member.bot else 'ü§ñ –ë–æ—Ç'}",
            inline=False
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
        if invite:
            inviter = invite.inviter
            invite_info = [
                f"üîó –ö–æ–¥: `{invite.code}`",
                f"üë• –î–æ–±–∞–≤–∏–ª: {inviter.mention if inviter else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: `{invite.uses}`",
                f"üì® –ò—Å—Ç–æ—á–Ω–∏–∫: {source_info}"
            ]
            
            if invite.channel:
                invite_info.append(f"üìù –ö–∞–Ω–∞–ª: {invite.channel.mention}")
                
            if invite.expires_at:
                expires_timestamp = int(invite.expires_at.timestamp())
                invite_info.append(f"‚åõ –ò—Å—Ç–µ–∫–∞–µ—Ç: <t:{expires_timestamp}:R>")
            else:
                invite_info.append("‚åõ –ò—Å—Ç–µ–∫–∞–µ—Ç: –ù–∏–∫–æ–≥–¥–∞")
                
            embed.add_field(
                name="üì® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏",
                value="\n".join(invite_info),
                inline=False
            )
        else:
            embed.add_field(
                name="üì® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏",
                value="‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
                inline=False
            )
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
        if not member.bot:
            if account_type == AccountType.SUSPICIOUS:
                embed.description = "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å–æ–≤—Å–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º!"
                embed.color = 0xe74c3c
            elif account_type == AccountType.NEW:
                embed.description = "‚ÑπÔ∏è –≠—Ç–æ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç Discord"
                embed.color = 0xf1c40f
            
        return embed

    async def format_leave_message(self, member: discord.Member) -> discord.Embed:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        embed=Embed(
            title=f"üëã {'–ë–æ—Ç' if member.bot else '–£—á–∞—Å—Ç–Ω–∏–∫'} –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä",
            color=0xe74c3c,
            timestamp=datetime.now(timezone.utc)
        )
        
        embed.set_thumbnail(url=member.display_avatar.url)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
        embed.add_field(
            name=f"{'ü§ñ' if member.bot else 'üë§'} {'–ë–æ—Ç' if member.bot else '–£—á–∞—Å—Ç–Ω–∏–∫'}",
            value=f"`{member.name}`\nID: `{member.id}`",
            inline=False
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª—è—Ö
        if member.roles[1:]:  # –ò—Å–∫–ª—é—á–∞–µ–º @everyone
            roles = [role.mention for role in reversed(member.roles[1:])]
            roles_str = " ".join(roles[:10])
            if len(member.roles) > 11:
                roles_str += f"\n*...–∏ –µ—â–µ {len(member.roles) - 11} —Ä–æ–ª–µ–π*"
            embed.add_field(
                name=f"üëë –†–æ–ª–∏ ({len(member.roles) - 1})",
                value=roles_str,
                inline=False
            )
            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        joined_at = member.joined_at
        if joined_at:
            joined_timestamp = int(joined_at.timestamp())
            time_on_server = datetime.now(timezone.utc) - joined_at
            days = time_on_server.days
            hours = time_on_server.seconds // 3600
            minutes = (time_on_server.seconds % 3600) // 60
            
            time_parts = []
            if days > 0:
                time_parts.append(f"{days} {'–¥–Ω–µ–π' if days % 10 != 1 or days == 11 else '–¥–µ–Ω—å'}")
            if hours > 0:
                time_parts.append(f"{hours} {'—á–∞—Å–æ–≤' if hours % 10 != 1 or hours == 11 else '—á–∞—Å'}")
            if minutes > 0:
                time_parts.append(f"{minutes} {'–º–∏–Ω—É—Ç' if minutes % 10 != 1 or minutes == 11 else '–º–∏–Ω—É—Ç—É'}")
                
            time_str = ", ".join(time_parts) if time_parts else "–º–µ–Ω–µ–µ –º–∏–Ω—É—Ç—ã"
            
            embed.add_field(
                name="‚è±Ô∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–±—ã–≤–∞–Ω–∏–∏",
                value=f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: <t:{joined_timestamp}:D> (<t:{joined_timestamp}:R>)\n–ü—Ä–æ–±—ã–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {time_str}",
                inline=False
            )
            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        created_timestamp = int(member.created_at.timestamp())
        account_age = datetime.now(timezone.utc) - member.created_at
        account_age_days = account_age.days
        
        embed.add_field(
            name="üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ",
            value=f"–°–æ–∑–¥–∞–Ω: <t:{created_timestamp}:D> (<t:{created_timestamp}:R>)\n–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞: {account_age_days} {'–¥–Ω–µ–π' if account_age_days % 10 != 1 or account_age_days == 11 else '–¥–µ–Ω—å'}",
            inline=False
        )
        
        return embed

    async def on_member_join(self, member: discord.Member):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        guild = member.guild
        log_channel_id = self.get_log_channel(guild.id)
        if not log_channel_id:
            return
            
        log_channel = guild.get_channel(log_channel_id)
        if not log_channel:
            return
            
        invite = await self.get_used_invite(guild)
        embed = await self.format_join_message(member, invite)
        
        try:
            await log_channel.send(embed=embed)
        except discord.Forbidden:
            pass

    async def on_member_remove(self, member: discord.Member):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        guild = member.guild
        log_channel_id = self.get_log_channel(guild.id)
        if not log_channel_id:
            return
            
        log_channel = guild.get_channel(log_channel_id)
        if not log_channel:
            return
            
        embed = await self.format_leave_message(member)
        
        try:
            await log_channel.send(embed=embed)
        except discord.Forbidden:
            pass

    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤
        if not self.settings.get('channel'):
            print("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –∏–Ω–≤–∞–π—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return
            
        # –ö—ç—à–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–µ –∏–Ω–≤–∞–π—Ç—ã
        await self.cache_invites()

class InvitesCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.invite_tracker = InviteTracker(bot)
        
    async def cog_load(self):
        await self.invite_tracker.setup()
        
    @commands.Cog.listener()
    async def on_member_join(self, member: discord.Member):
        await self.invite_tracker.on_member_join(member)
        
    @commands.Cog.listener()
    async def on_member_remove(self, member: discord.Member):
        await self.invite_tracker.on_member_remove(member)

async def setup(bot):
    await bot.add_cog(InvitesCog(bot)) 