import discord
from discord.ext import commands
from discord import app_commands
from Niludetsu.utils.embed import create_embed
from Niludetsu.core.base import EMOJIS
from datetime import datetime
import humanize
import pytz

def format_date(date):
    if date is None:
        return "–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_tz = pytz.timezone('Europe/Moscow')
    date = date.astimezone(moscow_tz)
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    return f"<t:{int(date.timestamp())}:F> (<t:{int(date.timestamp())}:R>)"

def get_member_status(member):
    status_emoji = {
        discord.Status.online: "üü¢ –í —Å–µ—Ç–∏",
        discord.Status.idle: "üü° –ù–µ–∞–∫—Ç–∏–≤–µ–Ω",
        discord.Status.dnd: "üî¥ –ù–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å",
        discord.Status.offline: "‚ö´ –ù–µ –≤ —Å–µ—Ç–∏"
    }
    return status_emoji.get(member.status, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

def get_user_badges(user):
    badges = []
    flags = user.public_flags
    
    if user.bot:
        badges.append("ü§ñ –ë–æ—Ç")
    if flags.staff:
        badges.append("üë®‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫ Discord")
    if flags.partner:
        badges.append("ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä")
    if flags.hypesquad:
        badges.append("üí† HypeSquad Events")
    if flags.bug_hunter:
        badges.append("üêõ –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–∞–≥–∞–º–∏")
    if flags.bug_hunter_level_2:
        badges.append("üêõ –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ –±–∞–≥–∞–º–∏ 2 —É—Ä–æ–≤–Ω—è")
    if flags.hypesquad_bravery:
        badges.append("<:discord_bravery:1332429970668257311> Bravery")
    if flags.hypesquad_brilliance:
        badges.append("<:discord_brillance:1332429912782540852> Brilliance") 
    if flags.hypesquad_balance:
        badges.append("<:discord_balance:1332429979622965248> Balance")
    if flags.early_supporter:
        badges.append("üëë –†–∞–Ω–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∞–≤—à–∏–π")
    if flags.verified_bot_developer:
        badges.append("üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–æ–≤")
    if flags.active_developer:
        badges.append("üë®‚Äçüíª –ê–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
    if flags.system:
        badges.append("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ Discord")
    if flags.team_user:
        badges.append("üë• –£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã")
    if flags.verified_bot:
        badges.append("‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –±–æ—Ç")
    
    return badges if badges else ["–ù–µ—Ç –∑–Ω–∞—á–∫–æ–≤"]

def get_member_activities(member):
    if not member or not member.activities:
        return None
    
    activities = []
    for activity in member.activities:
        if activity.type == discord.ActivityType.playing:
            details = getattr(activity, 'details', None)
            state = getattr(activity, 'state', None)
            activity_info = f"üéÆ –ò–≥—Ä–∞–µ—Ç –≤ {activity.name}"
            if details:
                activity_info += f"\n‚îî {details}"
            if state:
                activity_info += f"\n‚îî {state}"
            activities.append(activity_info)
        elif activity.type == discord.ActivityType.streaming:
            activities.append(f"üì∫ –°—Ç—Ä–∏–º–∏—Ç {activity.name}\n‚îî {activity.url}")
        elif activity.type == discord.ActivityType.listening and isinstance(activity, discord.Spotify):
            activities.append(f"üéµ –°–ª—É—à–∞–µ—Ç Spotify\n‚îî {activity.title} - {activity.artist}\n‚îî –ê–ª—å–±–æ–º: {activity.album}")
        elif activity.type == discord.ActivityType.watching:
            activities.append(f"üëÄ –°–º–æ—Ç—Ä–∏—Ç {activity.name}")
        elif activity.type == discord.ActivityType.competing:
            activities.append(f"üèÜ –°–æ—Ä–µ–≤–Ω—É–µ—Ç—Å—è –≤ {activity.name}")
        elif activity.type == discord.ActivityType.custom:
            if activity.emoji:
                activities.append(f"{activity.emoji} {activity.name}")
            else:
                activities.append(activity.name)
    
    return activities

class UserInfo(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="userinfo", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    @app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ –∫–æ—Ç–æ—Ä–æ–º –Ω—É–∂–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    async def userinfo(self, interaction: discord.Interaction, user: discord.Member = None):
        await interaction.response.defer()
        
        member = user or interaction.user
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        roles = [role.mention for role in member.roles if role.name != "@everyone"]
        roles.reverse()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã
        created_at = int(member.created_at.timestamp())
        joined_at = int(member.joined_at.timestamp()) if member.joined_at else None
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        status = get_member_status(member)
        activities = get_member_activities(member)
        badges = get_user_badges(member)
        
        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥
        embed = create_embed(
            title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {member.name}",
            color=member.color.value if member.color != discord.Color.default() else 0x2b2d31
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        embed.add_field(
            name="üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            value=f"{EMOJIS['DOT']} **ID:** {member.id}\n"
                  f"{EMOJIS['DOT']} **–ò–º—è:** {member.name}\n"
                  f"{EMOJIS['DOT']} **–ù–∏–∫–Ω–µ–π–º:** {member.display_name}\n"
                  f"{EMOJIS['DOT']} **–ë–æ—Ç:** {'–î–∞' if member.bot else '–ù–µ—Ç'}\n"
                  f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞–Ω:** <t:{created_at}:D> (<t:{created_at}:R>)",
            inline=False
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É
        if joined_at:
            embed.add_field(
                name="üì• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏",
                value=f"{EMOJIS['DOT']} **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:** <t:{joined_at}:D> (<t:{joined_at}:R>)\n"
                      f"{EMOJIS['DOT']} **–ü–æ–∑–∏—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:** #{sorted(interaction.guild.members, key=lambda m: m.joined_at or datetime.max).index(member) + 1}",
                inline=False
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–∫–∏
        if badges:
            embed.add_field(
                name="üèÖ –ó–Ω–∞—á–∫–∏",
                value="\n".join(badges),
                inline=False
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
        if roles:
            embed.add_field(
                name=f"üëë –†–æ–ª–∏ ({len(roles)})",
                value=" ".join(roles) if len(" ".join(roles)) < 1024 else f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–æ–ª–µ–π ({len(roles)})",
                inline=False
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        embed.add_field(
            name="üìä –°—Ç–∞—Ç—É—Å",
            value=status,
            inline=True
        )
        
        if activities:
            embed.add_field(
                name="üéÆ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                value="\n\n".join(activities),
                inline=False
            )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É –∏ —Ñ—É—Ç–µ—Ä
        embed.set_thumbnail(url=member.display_avatar.url)
        embed.set_footer(
            text=f"–ó–∞–ø—Ä–æ—Å–∏–ª {interaction.user.name}",
            icon_url=interaction.user.display_avatar.url
        )
        
        await interaction.followup.send(embed=embed)

async def setup(bot):
    await bot.add_cog(UserInfo(bot))