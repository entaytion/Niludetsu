import discord
from discord.ext import commands
from discord import app_commands
import yaml
import traceback
from typing import Optional
from datetime import datetime

from Niludetsu.logging.users import UserLogger
from Niludetsu.logging.errors import ErrorLogger
from Niludetsu.logging.messages import MessageLogger
from Niludetsu.logging.channels import ChannelLogger
from Niludetsu.logging.server import ServerLogger
from Niludetsu.logging.applications import ApplicationLogger
from Niludetsu.logging.emojis import EmojiLogger
from Niludetsu.logging.events import EventLogger
from Niludetsu.logging.invites import InviteLogger
from Niludetsu.logging.roles import RoleLogger
from Niludetsu.logging.webhooks import WebhookLogger
from Niludetsu.logging.stickers import StickerLogger
from Niludetsu.logging.soundboards import SoundboardLogger
from Niludetsu.logging.threads import ThreadLogger
from Niludetsu.logging.voice import VoiceLogger

class Logs(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.log_channel = None
        self.owner_id = "636570363605680139"
        self.logging_enabled = True
        bot.loop.create_task(self.initialize_logs())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–æ–≤
        self.user_logger = UserLogger(bot)
        self.error_logger = ErrorLogger(bot)
        self.message_logger = MessageLogger(bot)
        self.channel_logger = ChannelLogger(bot)
        self.server_logger = ServerLogger(bot)
        self.application_logger = ApplicationLogger(bot)
        self.emoji_logger = EmojiLogger(bot)
        self.event_logger = EventLogger(bot)
        self.invite_logger = InviteLogger(bot)
        self.role_logger = RoleLogger(bot)
        self.webhook_logger = WebhookLogger(bot)
        self.sticker_logger = StickerLogger(bot)
        self.soundboard_logger = SoundboardLogger(bot)
        self.thread_logger = ThreadLogger(bot)
        self.voice_logger = VoiceLogger(bot)

    async def initialize_logs(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤"""
        await self.bot.wait_until_ready()
        try:
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                if 'logging' in config and 'main_channel' in config['logging']:
                    channel_id = int(config['logging']['main_channel'])
                    self.log_channel = self.bot.get_channel(channel_id)
                    if not self.log_channel:
                        print(f"‚ùå –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω! ID: {channel_id}")
                        try:
                            self.log_channel = await self.bot.fetch_channel(channel_id)
                            print(f"‚úÖ –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω: {self.log_channel.name}")
                        except Exception as e:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª: {e}")
                    else:
                        print(f"‚úÖ –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.log_channel.name}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {e}")

    def save_config(self, channel_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            config['logging']['main_channel'] = str(channel_id)
            with open('config/config.yaml', 'w', encoding='utf-8') as f:
                yaml.dump(config, f, indent=4)
        except Exception as e:
            print(f"Error saving config: {e}")

    logs_group = app_commands.Group(name="logs", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

    @logs_group.command(name="show", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤")
    @commands.has_permissions(administrator=True)
    async def logs_show(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤"""
        try:
            if self.log_channel:
                embed = discord.Embed(
                    title="üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö",
                    description=f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {self.log_channel.mention}\n"
                              f"ID –∫–∞–Ω–∞–ª–∞: `{self.log_channel.id}`",
                    color=discord.Color.blue()
                )
            else:
                embed = discord.Embed(
                    title="‚ùå –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ config.yaml",
                    color=discord.Color.red()
                )
            await interaction.response.send_message(embed=embed)
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @logs_group.command(name="set", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤")
    @commands.has_permissions(administrator=True)
    async def logs_set(self, interaction: discord.Interaction, channel: discord.TextChannel):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤"""
        try:
            self.log_channel = channel
            self.save_config(channel.id)
            
            embed = discord.Embed(
                title="‚úÖ –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                description=f"–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {channel.mention}\n"
                          f"ID –∫–∞–Ω–∞–ª–∞: `{channel.id}`",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª
            test_embed = discord.Embed(
                title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                description="–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.",
                color=discord.Color.green()
            )
            await channel.send(embed=test_embed)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @logs_group.command(name="test", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥")
    @commands.has_permissions(administrator=True)
    async def logs_test(self, interaction: discord.Interaction):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        try:
            if not self.log_channel:
                raise Exception("–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            test_embed = discord.Embed(
                title="üìù –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                color=discord.Color.blue()
            )
            test_embed.add_field(name="–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
            test_embed.add_field(name="–ö–∞–Ω–∞–ª", value=self.log_channel.mention, inline=True)
            
            await self.log_channel.send(embed=test_embed)
            
            await interaction.response.send_message(
                embed=discord.Embed(
                    title="‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤",
                    color=discord.Color.green()
                )
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @logs_group.command(name="disable", description="–û—Ç–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    @commands.has_permissions(administrator=True)
    async def logs_disable(self, interaction: discord.Interaction):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.logging_enabled = False
            
            if self.log_channel:
                await self.log_channel.send(
                    embed=discord.Embed(
                        title="‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                        description=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {interaction.user.mention} –æ—Ç–∫–ª—é—á–∏–ª —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                        color=discord.Color.yellow()
                    )
                )
            
            await interaction.response.send_message(
                embed=discord.Embed(
                    title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                    description="–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                    color=discord.Color.yellow()
                )
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @logs_group.command(name="enable", description="–í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    @commands.has_permissions(administrator=True)
    async def logs_enable(self, interaction: discord.Interaction):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.logging_enabled = True
            
            if self.log_channel:
                await self.log_channel.send(
                    embed=discord.Embed(
                        title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∞",
                        description=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {interaction.user.mention} –≤–∫–ª—é—á–∏–ª —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                        color=discord.Color.green()
                    )
                )
            
            await interaction.response.send_message(
                embed=discord.Embed(
                    title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∞",
                    description="–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                    color=discord.Color.green()
                )
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @logs_group.command(name="status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    @commands.has_permissions(administrator=True)
    async def logs_status(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            status = "–í–∫–ª—é—á–µ–Ω–æ" if self.logging_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–æ"
            color = discord.Color.green() if self.logging_enabled else discord.Color.red()
            emoji = "‚úÖ" if self.logging_enabled else "‚ùå"
            
            embed = discord.Embed(
                title=f"{emoji} –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                color=color
            )
            
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=status, inline=True)
            embed.add_field(name="–ö–∞–Ω–∞–ª", value=self.log_channel.mention if self.log_channel else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", inline=True)
            
            await interaction.response.send_message(embed=embed)
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏ –æ—à–∏–±–æ–∫
    @commands.Cog.listener()
    async def on_command(self, ctx):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        await self.event_logger.log_command_use(
            command=ctx.command.qualified_name,
            user=ctx.author,
            channel=ctx.channel,
            guild=ctx.guild
        )

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥"""
        error_trace = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
        
        if isinstance(ctx, discord.Interaction):
            command_name = f"/{ctx.command.qualified_name}"
        else:
            command_name = ctx.message.content

        await self.error_logger.log_command_error(
            command=command_name,
            error=error,
            error_trace=error_trace,
            user=ctx.author if not isinstance(ctx, discord.Interaction) else ctx.user,
            channel=ctx.channel
        )

    @commands.Cog.listener()
    async def on_app_command_error(self, interaction: discord.Interaction, error):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ slash-–∫–æ–º–∞–Ω–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        await self.on_command_error(interaction, error)

    # –°–æ–±—ã—Ç–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    @commands.Cog.listener()
    async def on_guild_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        await self.server_logger.log_guild_update(before, after)

    @commands.Cog.listener()
    async def on_guild_role_create(self, role):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏"""
        if self.logging_enabled:
            await self.role_logger.log_role_create(role)

    @commands.Cog.listener()
    async def on_guild_role_delete(self, role):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
        if self.logging_enabled:
            await self.role_logger.log_role_delete(role)

    @commands.Cog.listener()
    async def on_guild_role_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–∏"""
        if self.logging_enabled:
            await self.role_logger.log_role_update(before, after)

    @commands.Cog.listener()
    async def on_guild_emojis_update(self, guild, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–º–æ–¥–∑–∏"""
        if self.logging_enabled:
            # –ù–∞—Ö–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
            for emoji in before:
                if emoji not in after:  # –£–¥–∞–ª–µ–Ω
                    await self.emoji_logger.log_emoji_delete(emoji)
            
            for emoji in after:
                if emoji not in before:  # –°–æ–∑–¥–∞–Ω
                    await self.emoji_logger.log_emoji_create(emoji)
                else:  # –ò–∑–º–µ–Ω–µ–Ω
                    old_emoji = discord.utils.get(before, id=emoji.id)
                    if old_emoji:
                        await self.emoji_logger.log_emoji_update(old_emoji, emoji)

    @commands.Cog.listener()
    async def on_guild_channel_create(self, channel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        if self.logging_enabled:
            await self.channel_logger.log_channel_create(channel)

    @commands.Cog.listener()
    async def on_guild_channel_delete(self, channel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        if self.logging_enabled:
            await self.channel_logger.log_channel_delete(channel)

    @commands.Cog.listener()
    async def on_guild_channel_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞"""
        if self.logging_enabled:
            await self.channel_logger.log_channel_update(before, after)

    @commands.Cog.listener()
    async def on_guild_channel_pins_update(self, channel, last_pin):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self.logging_enabled:
            await self.channel_logger.log_channel_pins_update(channel, last_pin)

    @commands.Cog.listener()
    async def on_member_join(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        await self.event_logger.log_member_join(member)

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        await self.event_logger.log_member_remove(member)

    @commands.Cog.listener()
    async def on_member_ban(self, guild, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if self.logging_enabled:
            await self.server_logger.log_ban_add(guild, user)

    @commands.Cog.listener()
    async def on_member_unban(self, guild, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if self.logging_enabled:
            await self.server_logger.log_ban_remove(guild, user)

    # –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if self.logging_enabled:
            if before.display_name != after.display_name:
                await self.user_logger.log_user_name_update(before, after)
            if before.roles != after.roles:
                await self.user_logger.log_user_roles_update(before, after)

    @commands.Cog.listener()
    async def on_user_update(self, before, after):
        if before.avatar != after.avatar:
            await self.user_logger.log_user_avatar_update(before, after)

    @commands.Cog.listener()
    async def on_member_ban(self, guild, user):
        if isinstance(user, discord.Member):
            await self.user_logger.log_user_timeout(user, user.timed_out_until)

    @commands.Cog.listener()
    async def on_member_unban(self, guild, user):
        if isinstance(user, discord.Member):
            await self.user_logger.log_user_timeout_remove(user)

    # –°–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    @commands.Cog.listener()
    async def on_message_delete(self, message):
        await self.message_logger.log_message_delete(message)

    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        await self.message_logger.log_message_edit(before, after)

    @commands.Cog.listener()
    async def on_bulk_message_delete(self, messages):
        await self.message_logger.log_bulk_message_delete(messages)

    # –°–æ–±—ã—Ç–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.logging_enabled:
            await self.voice_logger.log_voice_status_update(member, before.channel if before else None, after.channel if after else None)

    # –°–æ–±—ã—Ç–∏—è –≤–µ–±—Ö—É–∫–æ–≤
    @commands.Cog.listener()
    async def on_webhooks_update(self, channel: discord.TextChannel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ"""
        if self.logging_enabled:
            await self.webhook_logger.log_webhook_channel_update(channel)

    @commands.Cog.listener()
    async def on_guild_channel_webhooks_update(self, channel: discord.TextChannel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ"""
        if self.logging_enabled:
            webhooks = await channel.webhooks()
            for webhook in webhooks:
                if webhook.id not in self._webhook_cache.get(channel.id, {}):
                    # –ù–æ–≤—ã–π –≤–µ–±—Ö—É–∫
                    await self.webhook_logger.log_webhook_create(webhook)
                    self._webhook_cache.setdefault(channel.id, {})[webhook.id] = webhook
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    old_webhook = self._webhook_cache[channel.id][webhook.id]
                    if old_webhook.name != webhook.name:
                        await self.webhook_logger.log_webhook_name_update(old_webhook, webhook)
                    if old_webhook.avatar != webhook.avatar:
                        await self.webhook_logger.log_webhook_avatar_update(old_webhook, webhook)
                    if old_webhook.channel != webhook.channel:
                        await self.webhook_logger.log_webhook_channel_update(old_webhook, webhook)
                    self._webhook_cache[channel.id][webhook.id] = webhook

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∏
            if channel.id in self._webhook_cache:
                for webhook_id, webhook in list(self._webhook_cache[channel.id].items()):
                    if not any(w.id == webhook_id for w in webhooks):
                        await self.webhook_logger.log_webhook_delete(webhook)
                        del self._webhook_cache[channel.id][webhook_id]

    async def cog_load(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –≤–µ–±—Ö—É–∫–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞"""
        self._webhook_cache = {}
        for guild in self.bot.guilds:
            for channel in guild.text_channels:
                try:
                    webhooks = await channel.webhooks()
                    self._webhook_cache[channel.id] = {webhook.id: webhook for webhook in webhooks}
                except discord.Forbidden:
                    continue

    # –°–æ–±—ã—Ç–∏—è —Ç—Ä–µ–¥–æ–≤
    @commands.Cog.listener()
    async def on_thread_create(self, thread):
        await self.thread_logger.log_thread_create(thread)

    @commands.Cog.listener()
    async def on_thread_delete(self, thread):
        await self.thread_logger.log_thread_delete(thread)

    @commands.Cog.listener()
    async def on_thread_update(self, before, after):
        if before.name != after.name:
            await self.thread_logger.log_thread_name_update(before, after)
        if before.slowmode_delay != after.slowmode_delay:
            await self.thread_logger.log_thread_slowmode_update(before, after)
        if before.auto_archive_duration != after.auto_archive_duration:
            await self.thread_logger.log_thread_archive_duration_update(before, after)
        if not before.archived and after.archived:
            await self.thread_logger.log_thread_archive(after)
        if before.archived and not after.archived:
            await self.thread_logger.log_thread_unarchive(after)
        if not before.locked and after.locked:
            await self.thread_logger.log_thread_lock(after)
        if before.locked and not after.locked:
            await self.thread_logger.log_thread_unlock(after)

    # –°–æ–±—ã—Ç–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤
    @commands.Cog.listener()
    async def on_guild_sticker_create(self, sticker):
        await self.sticker_logger.log_sticker_create(sticker)

    @commands.Cog.listener()
    async def on_guild_sticker_delete(self, sticker):
        await self.sticker_logger.log_sticker_delete(sticker)

    @commands.Cog.listener()
    async def on_guild_sticker_update(self, before, after):
        if before.name != after.name:
            await self.sticker_logger.log_sticker_name_update(before, after)
        if before.description != after.description:
            await self.sticker_logger.log_sticker_description_update(before, after)
        if before.emoji != after.emoji:
            await self.sticker_logger.log_sticker_emoji_update(before, after)

    # –°–æ–±—ã—Ç–∏—è –∑–≤—É–∫–æ–≤
    @commands.Cog.listener()
    async def on_soundboard_sound_create(self, guild: discord.Guild, sound: discord.SoundboardSound):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤—É–∫–∞"""
        if self.logging_enabled:
            data = {
                'id': sound.id,
                'name': sound.name,
                'emoji': str(sound.emoji) if sound.emoji else None,
                'volume': sound.volume,
                'user': sound.user,
                'guild': sound.guild
            }
            await self.soundboard_logger.log_soundboard_create(data)

    @commands.Cog.listener()
    async def on_soundboard_sound_delete(self, guild: discord.Guild, sound: discord.SoundboardSound):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        if self.logging_enabled:
            data = {
                'id': sound.id,
                'name': sound.name,
                'emoji': str(sound.emoji) if sound.emoji else None,
                'volume': sound.volume,
                'user': sound.user,
                'guild': sound.guild
            }
            await self.soundboard_logger.log_soundboard_delete(data)

    @commands.Cog.listener()
    async def on_soundboard_sound_update(self, guild: discord.Guild, before: discord.SoundboardSound, after: discord.SoundboardSound):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        if self.logging_enabled:
            before_data = {
                'id': before.id,
                'name': before.name,
                'emoji': str(before.emoji) if before.emoji else None,
                'volume': before.volume,
                'user': before.user,
                'guild': before.guild
            }
            after_data = {
                'id': after.id,
                'name': after.name,
                'emoji': str(after.emoji) if after.emoji else None,
                'volume': after.volume,
                'user': after.user,
                'guild': after.guild
            }
            
            if before.name != after.name:
                await self.soundboard_logger.log_soundboard_name_update(before_data, after_data)
            if before.volume != after.volume:
                await self.soundboard_logger.log_soundboard_volume_update(before_data, after_data)
            if str(before.emoji) != str(after.emoji):
                await self.soundboard_logger.log_soundboard_emoji_update(before_data, after_data)

    @commands.Cog.listener()
    async def on_invite_create(self, invite: discord.Invite):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        if self.logging_enabled and self.log_channel:
            await self.invite_logger.log_invite_create(invite)
            
    @commands.Cog.listener()
    async def on_invite_delete(self, invite: discord.Invite):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        if self.logging_enabled and self.log_channel:
            await self.invite_logger.log_invite_delete(invite)

async def setup(bot):
    await bot.add_cog(Logs(bot)) 