import discord
from discord.ext import commands
from discord import app_commands
from utils import create_embed, EMOJIS
import traceback
import yaml
import datetime
import asyncio
import os
import io

class Logs(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.owner_id = "636570363605680139"
        self.log_channel = None
        self.invite_uses = {}
        bot.loop.create_task(self.initialize_logs())

    async def initialize_logs(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        await self.bot.wait_until_ready()  # –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
        try:
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                if 'logging' in config and 'main_channel' in config['logging']:
                    channel_id = int(config['logging']['main_channel'])
                    self.log_channel = self.bot.get_channel(channel_id)
                    if not self.log_channel:
                        print(f"‚ùå –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω! ID: {channel_id}")
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ fetch_channel
                        try:
                            self.log_channel = await self.bot.fetch_channel(channel_id)
                            print(f"‚úÖ –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ fetch: {self.log_channel.name}")
                        except Exception as e:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ fetch: {e}")
                    else:
                        print(f"‚úÖ –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.log_channel.name}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            await self.log_event(
                                title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                                description="–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."
                            )
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {e}")
            print(traceback.format_exc())

    def save_config(self, channel_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            config['logging']['main_channel'] = str(channel_id)
            
            with open('config/config.yaml', 'w', encoding='utf-8') as f:
                yaml.dump(config, f, indent=4)
        except Exception as e:
            print(f"Error saving config: {e}")

    async def get_webhook(self, channel: discord.TextChannel) -> discord.Webhook:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫
            webhooks = await channel.webhooks()
            webhook = discord.utils.get(webhooks, name='NiluBot Logs')
            
            # –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if webhook is None:
                webhook = await channel.create_webhook(name='NiluBot Logs')
            
            return webhook
        except discord.Forbidden:
            print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {channel.name}")
            return None

    async def log_event(self, title: str, description: str, file: discord.File = None, thumbnail_url: str = None, author: dict = None, footer: dict = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª"""
        if not self.log_channel:
            return

        embed = create_embed(title=title, description=description)
        
        if thumbnail_url:
            embed.set_thumbnail(url=thumbnail_url)
            
        if author:
            embed.set_author(**author)

        if footer:
            embed.set_footer(**footer)

        try:
            webhook = await self.get_webhook(self.log_channel)
            await webhook.send(embed=embed, file=file)
        except discord.HTTPException:
            pass

    @app_commands.command(name="logs", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤")
    @commands.has_permissions(administrator=True)
    async def logs(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤"""
        try:
            if self.log_channel:
                embed = create_embed(
                    title="üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö",
                    description=f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {self.log_channel.mention}\n"
                              f"ID –∫–∞–Ω–∞–ª–∞: `{self.log_channel.id}`"
                )
            else:
                embed = create_embed(
                    title="‚ùå –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ config.json"
                )
            await interaction.response.send_message(embed=embed)

        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    async def log_error(self, error, command_name: str, author_mention: str, author_id: str, channel_mention: str):
        """–û–±—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥"""
        if self.log_channel:
            error_trace = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
            await self.log_channel.send(f"<@{self.owner_id}>, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
            await self.log_event(
                title="‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã",
                description=f"{EMOJIS['DOT']} **–ö–æ–º–∞–Ω–¥–∞:** `{command_name}`\n"
                          f"{EMOJIS['DOT']} **–ê–≤—Ç–æ—Ä:** {author_mention} (`{author_id}`)\n"
                          f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {channel_mention}\n"
                          f"{EMOJIS['DOT']} **–û—à–∏–±–∫–∞:**\n```py\n{error_trace[:1900]}```",
                author={'name': 'Command Error'}
            )

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥"""
        if self.log_channel:
            error_trace = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
            await self.log_channel.send(f"<@{self.owner_id}>, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
            
            if isinstance(ctx, discord.Interaction):
                command_name = f"/{ctx.command.parent.name if ctx.command.parent else ''}{' ' if ctx.command.parent else ''}{ctx.command.name}"
                author = ctx.user
            else:
                command_name = ctx.message.content
                author = ctx.author
                
            await self.log_event(
                title="‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã",
                description=f"{EMOJIS['DOT']} **–ö–æ–º–∞–Ω–¥–∞:** `{command_name}`\n"
                          f"{EMOJIS['DOT']} **–ê–≤—Ç–æ—Ä:** {author.mention} (`{author.id}`)\n"
                          f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {ctx.channel.mention}\n"
                          f"{EMOJIS['DOT']} **–û—à–∏–±–∫–∞:**\n```py\n{error_trace[:1900]}```",
                author={'name': 'Command Error'}
            )

    @commands.Cog.listener()
    async def on_app_command_error(self, interaction: discord.Interaction, error):
        """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ slash-–∫–æ–º–∞–Ω–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        await self.on_command_error(interaction, error)

    @commands.Cog.listener()
    async def on_message_delete(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.log_channel or not message.guild:
            return

        if message.author.bot and message.author != self.bot.user:
            return

        moderator = None
        try:
            async for entry in message.guild.audit_logs(limit=1, action=discord.AuditLogAction.message_delete):
                if entry.target.id == message.author.id and (datetime.datetime.now(datetime.timezone.utc) - entry.created_at).total_seconds() < 5:
                    moderator = entry.user
                    break
        except discord.Forbidden:
            pass

        await self.handle_message_event(
            message, 
            'delete',
            {'moderator': moderator} if moderator and moderator != message.author else None
        )

    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if before.author.bot or before.content == after.content:
            return

        await self.handle_message_event(
            after, 
            'edit',
            {'before_content': before.content}
        )

    @commands.Cog.listener()
    async def on_bulk_message_delete(self, messages):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if len(messages) < 2:
            return

        filtered_messages = [msg for msg in messages if not msg.author.bot or msg.author == self.bot.user]
        if not filtered_messages:
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        content = [
            f"–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: #{filtered_messages[0].channel.name}",
            f"–í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "-" * 50 + "\n"
        ]
        
        for message in sorted(filtered_messages, key=lambda m: m.created_at):
            content.append(f"[{message.created_at.strftime('%d/%m/%Y - %H:%M:%S')}] {message.author} ({message.author.id}): {message.content}")
            if message.attachments:
                content.append(f"–í–ª–æ–∂–µ–Ω–∏—è: {', '.join([a.url for a in message.attachments])}")
            if message.embeds:
                content.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–æ–≤: {len(message.embeds)}")
            content.append("")

        file = discord.File(
            io.BytesIO("\n".join(content).encode('utf-8')),
            filename=f"DeletedMessages_{datetime.datetime.now().strftime('%Y-%m-%dT%H-%M-%S')}.txt"
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ
        moderator = None
        reason = None
        try:
            async for entry in filtered_messages[0].guild.audit_logs(limit=1, action=discord.AuditLogAction.message_bulk_delete):
                moderator = entry.user
                reason = entry.reason
                break
        except discord.Forbidden:
            pass

        await self.handle_message_event(
            filtered_messages[0],
            'bulk_delete',
            {
                'count': len(filtered_messages),
                'moderator': moderator.mention if moderator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'reason': reason,
                'file': file
            }
        )

    @commands.Cog.listener()
    async def on_member_join(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–∞–π—Ç–µ
        invite_info = await self.get_invite_info(member)
        await self.handle_member_event(member, 'join', extra_data={'invite_info': invite_info})

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        await self.handle_member_event(member, 'leave')

    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        changes = []
        moderator = None
        reason = None
        
        try:
            async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_update):
                if entry.target.id == after.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            pass

        if before.nick != after.nick:
            changes.append(f"–ù–∏–∫–Ω–µ–π–º: `{before.nick or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}` ‚Üí `{after.nick or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`")

        if before.roles != after.roles:
            added_roles = [role for role in after.roles if role not in before.roles]
            removed_roles = [role for role in before.roles if role not in after.roles]
            
            if added_roles:
                changes.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–æ–ª–∏: {', '.join(role.mention for role in added_roles)}")
            if removed_roles:
                changes.append(f"–£–¥–∞–ª–µ–Ω—ã —Ä–æ–ª–∏: {', '.join(role.mention for role in removed_roles)}")

        if before.premium_since != after.premium_since:
            if after.premium_since:
                changes.append(f"–ù–∞—á–∞–ª –±—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: <t:{int(after.premium_since.timestamp())}:F>")
            else:
                changes.append("–ü—Ä–µ–∫—Ä–∞—Ç–∏–ª –±—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")

        if before.timed_out_until != after.timed_out_until:
            if after.timed_out_until:
                await self.handle_member_event(after, 'timeout', extra_data={
                    'until': after.timed_out_until,
                    'moderator': moderator,
                    'reason': reason
                })
                return
            else:
                await self.handle_member_event(after, 'timeout_remove', extra_data={
                    'moderator': moderator,
                    'reason': reason
                })
                return

        if changes:
            await self.handle_member_event(after, 'update', extra_data={
                'changes': changes,
                'moderator': moderator,
                'reason': reason
            })

    @commands.Cog.listener()
    async def on_member_ban(self, guild, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–æ–≤"""
        moderator = None
        reason = None
        try:
            async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.ban):
                if entry.target.id == user.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            pass

        await self.handle_member_event(user, 'ban', extra_data={
            'moderator': moderator,
            'reason': reason
        })

    @commands.Cog.listener()
    async def on_member_unban(self, guild, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∞–Ω–æ–≤"""
        moderator = None
        reason = None
        try:
            async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.unban):
                if entry.target.id == user.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            pass

        await self.handle_member_event(user, 'unban', extra_data={
            'moderator': moderator,
            'reason': reason
        })

    async def handle_member_event(self, member, event_type: str, before=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if not self.log_channel:
            return

        title_map = {
            'join': 'üëã –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
            'leave': 'üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä',
            'update': 'üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω',
            'ban': 'üî® –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–∞–Ω–µ–Ω',
            'unban': 'üîì –£—á–∞—Å—Ç–Ω–∏–∫ —Ä–∞–∑–±–∞–Ω–µ–Ω',
            'timeout': '‚è∞ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª —Ç–∞–π–º-–∞—É—Ç',
            'timeout_remove': '‚è∞ –¢–∞–π–º-–∞—É—Ç —Å–Ω—è—Ç'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ
        description.append(f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)")
        description.append(f"{EMOJIS['DOT']} **–ò–º—è:** `{member.name}`")
        
        if event_type == 'join':
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
            if extra_data and 'invite_info' in extra_data:
                description.append(f"\n**üì® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏:**\n{extra_data['invite_info']}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            account_age = datetime.datetime.now(datetime.timezone.utc) - member.created_at
            is_suspicious = account_age.days < 7
            
            description.append(f"\n**üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:**")
            description.extend([
                f"{EMOJIS['DOT']} **–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:** <t:{int(member.created_at.timestamp())}:F>",
                f"{EMOJIS['DOT']} **–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:** `{account_age.days} –¥–Ω–µ–π`",
                f"{EMOJIS['DOT']} **–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π:** `{'–î–∞' if is_suspicious else '–ù–µ—Ç'}`",
                f"{EMOJIS['DOT']} **–ë–æ—Ç:** `{'–î–∞' if member.bot else '–ù–µ—Ç'}`",
                f"{EMOJIS['DOT']} **–°–∏—Å—Ç–µ–º–∞:** `{'–î–∞' if member.system else '–ù–µ—Ç'}`",
                f"{EMOJIS['DOT']} **–§–ª–∞–≥–∏:** `{', '.join(flag.name for flag in member.public_flags.all()) or '–ù–µ—Ç'}`"
            ])
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
            description.append(f"\n**üåü –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:**")
            description.extend([
                f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ:** `{member.guild.member_count}`",
                f"{EMOJIS['DOT']} **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:** <t:{int(member.joined_at.timestamp())}:F>"
            ])
            
        elif event_type == 'leave':
            description.extend([
                f"{EMOJIS['DOT']} **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:** <t:{int(member.joined_at.timestamp())}:F>",
                f"{EMOJIS['DOT']} **–ü—Ä–æ–±—ã–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** `{(datetime.datetime.now(datetime.timezone.utc) - member.joined_at).days} –¥–Ω–µ–π`",
                f"{EMOJIS['DOT']} **–†–æ–ª–∏:** {', '.join(role.mention for role in member.roles[1:]) or '–ù–µ—Ç'}",
                f"{EMOJIS['DOT']} **–û—Å—Ç–∞–ª–æ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** `{member.guild.member_count}`"
            ])
            
        elif event_type == 'update':
            if extra_data and 'changes' in extra_data:
                description.append("\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:**")
                description.extend(extra_data['changes'])
            
            if extra_data and 'moderator' in extra_data:
                description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
                description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {extra_data['moderator'].mention}")
                if 'reason' in extra_data:
                    description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{extra_data['reason'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`")
                    
        elif event_type in ['ban', 'unban']:
            if extra_data:
                if 'moderator' in extra_data:
                    description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
                    description.append(f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {extra_data['moderator'].mention}")
                if 'reason' in extra_data:
                    description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{extra_data['reason'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`")
                    
        elif event_type in ['timeout', 'timeout_remove']:
            if extra_data:
                if 'until' in extra_data:
                    duration = extra_data['until'] - datetime.datetime.now(datetime.timezone.utc)
                    duration_str = f"{duration.days} –¥–Ω–µ–π, {duration.seconds // 3600} —á–∞—Å–æ–≤, {(duration.seconds % 3600) // 60} –º–∏–Ω—É—Ç"
                    description.extend([
                        f"{EMOJIS['DOT']} **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** `{duration_str}`",
                        f"{EMOJIS['DOT']} **–î–æ:** <t:{int(extra_data['until'].timestamp())}:F>"
                    ])
                if 'moderator' in extra_data:
                    description.append(f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {extra_data['moderator'].mention}")
                if 'reason' in extra_data:
                    description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{extra_data['reason'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`")

        # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —ç–º–±–µ–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
        author = None
        if extra_data and 'moderator' in extra_data and extra_data['moderator'].avatar:
            author = {
                'name': extra_data['moderator'].name,
                'icon_url': extra_data['moderator'].avatar.url
            }

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description),
            thumbnail_url=member.avatar.url if member.avatar else None,
            author=author
        )

    @commands.Cog.listener()
    async def on_member_timeout(self, member, until):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-–∞—É—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if not self.log_channel:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤
        try:
            async for entry in member.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_update):
                if entry.target.id == member.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        duration = until - datetime.datetime.now(datetime.timezone.utc)
        duration_str = f"{duration.days} –¥–Ω–µ–π, {duration.seconds // 3600} —á–∞—Å–æ–≤, {(duration.seconds % 3600) // 60} –º–∏–Ω—É—Ç"

        embed = create_embed(
            title="‚è∞ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª —Ç–∞–π–º-–∞—É—Ç",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                      f"{EMOJIS['DOT']} **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** `{duration_str}`\n"
                      f"{EMOJIS['DOT']} **–î–æ:** <t:{int(until.timestamp())}:F>\n"
                      f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention if moderator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
            footer={"text": f"ID: {member.id}"}
        )
        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_member_timeout_remove(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω—è—Ç–∏—è —Ç–∞–π–º-–∞—É—Ç–æ–≤"""
        if not self.log_channel:
            return

        try:
            async for entry in member.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_update):
                if entry.target.id == member.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        embed = create_embed(
            title="‚è∞ –¢–∞–π–º-–∞—É—Ç —Å–Ω—è—Ç",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                      f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention if moderator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
            footer={"text": f"ID: {member.id}"}
        )
        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_member_nick_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∏–∫–Ω–µ–π–º–∞"""
        if not self.log_channel:
            return

        try:
            async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_update):
                if entry.target.id == after.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        embed = create_embed(
            title="üìù –ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω–µ–Ω",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {after.mention} (`{after.id}`)\n"
                      f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π –Ω–∏–∫–Ω–µ–π–º:** `{before.display_name}`\n"
                      f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:** `{after.display_name}`\n"
                      f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention if moderator else '–°–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
            footer={"text": f"ID: {after.id}"}
        )
        if after.avatar:
            embed.set_thumbnail(url=after.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_user_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.log_channel:
            return

        changes = []
        if before.name != after.name:
            changes.append(f"–ò–º—è: `{before.name}` ‚Üí `{after.name}`")
        if before.discriminator != after.discriminator:
            changes.append(f"–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä: `{before.discriminator}` ‚Üí `{after.discriminator}`")
        if before.avatar != after.avatar:
            changes.append("–ê–≤–∞—Ç–∞—Ä –∏–∑–º–µ–Ω–µ–Ω")
        if before.banner != after.banner:
            changes.append("–ë–∞–Ω–Ω–µ—Ä –∏–∑–º–µ–Ω–µ–Ω")

        if changes:
            description = (f"{EMOJIS['DOT']} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {after.mention} (`{after.id}`)\n"
                         f"{EMOJIS['DOT']} **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + 
                         "\n".join(f"{EMOJIS['DOT']} {change}" for change in changes))
            
            thumbnail_url = after.avatar.url if after.avatar else None
            
            await self.log_event(
                title="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
                description=description,
                thumbnail_url=thumbnail_url,
                footer={"text": f"ID: {after.id}"}
            )

    @commands.Cog.listener()
    async def on_guild_channel_pins_update(self, channel, last_pin):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.log_channel:
            return

        try:
            pins = await channel.pins()
            pin_count = len(pins)
            latest_pin = pins[0] if pins else None
        except discord.Forbidden:
            pin_count = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
            latest_pin = None

        embed = create_embed(
            title="üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {channel.mention}\n"
                      f"{EMOJIS['DOT']} **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö:** `{pin_count}`\n"
                      f"{EMOJIS['DOT']} **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** <t:{int(datetime.datetime.now().timestamp())}:F>",
            footer={"text": f"ID –∫–∞–Ω–∞–ª–∞: {channel.id}"}
        )

        if latest_pin:
            embed.add_field(
                name="üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                value=f"{EMOJIS['DOT']} **–ê–≤—Ç–æ—Ä:** {latest_pin.author.mention}\n"
                      f"{EMOJIS['DOT']} **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** ```\n{latest_pin.content[:1000]}```",
                inline=False
            )

        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_integrations_update(self, guild):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.log_channel:
            return

        try:
            integrations = await guild.integrations()
            integration_list = "\n".join(f"{EMOJIS['DOT']} `{i.name}` ({i.type})" for i in integrations)
        except discord.Forbidden:
            integration_list = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"

        embed = create_embed(
            title="üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>\n"
                      f"{EMOJIS['DOT']} **–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**\n{integration_list}",
            footer={"text": f"ID —Å–µ—Ä–≤–µ—Ä–∞: {guild.id}"}
        )
        await self.log_event(embed)

    async def handle_message_event(self, message, event_type: str, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.log_channel:
            return

        title_map = {
            'delete': 'üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
            'bulk_delete': 'üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã',
            'edit': '‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
        description.extend([
            f"{EMOJIS['DOT']} **–ê–≤—Ç–æ—Ä:** {message.author.mention}",
            f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {message.channel.mention}"
        ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
        if event_type == 'delete':
            if message.content:
                description.append(f"\n**üìù –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n{message.content}")
            
            if message.attachments:
                description.append("\n**üìé –í–ª–æ–∂–µ–Ω–∏—è:**")
                for attachment in message.attachments:
                    description.append(f"{EMOJIS['DOT']} {attachment.filename}")
                    
        elif event_type == 'edit':
            before_content = extra_data.get('before', '')
            after_content = extra_data.get('after', '')
            
            if before_content != after_content:
                description.extend([
                    f"\n**–î–æ:**\n{before_content}",
                    f"\n**–ü–æ—Å–ª–µ:**\n{after_content}"
                ])

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description),
            footer={"text": f"ID: {message.id}"}
        )

    async def handle_guild_event(self, guild, event_type: str, before=None, after=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.log_channel:
            return

        title_map = {
            'update': '‚öôÔ∏è –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω',
            'emojis': 'üòÄ –≠–º–æ–¥–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'stickers': 'üåü –°—Ç–∏–∫–µ—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'integrations': 'üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        }

        description = []
        
        if event_type == 'update' and before and after:
            changes = []
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if before.name != after.name:
                changes.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{before.name}` ‚Üí `{after.name}`")
            if before.description != after.description:
                changes.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: `{before.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}` ‚Üí `{after.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`")
            if before.icon != after.icon:
                changes.append("–ò–∫–æ–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
            if before.banner != after.banner:
                changes.append("–ë–∞–Ω–Ω–µ—Ä –∏–∑–º–µ–Ω–µ–Ω")
            if before.splash != after.splash:
                changes.append("–°–ø–ª–µ—à –∏–∑–º–µ–Ω–µ–Ω")
            if before.discovery_splash != after.discovery_splash:
                changes.append("–°–ø–ª–µ—à –¥–∏—Å–∫–∞–≤–µ—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω")
            if before.owner_id != after.owner_id:
                changes.append(f"–í–ª–∞–¥–µ–ª–µ—Ü: <@{before.owner_id}> ‚Üí <@{after.owner_id}>")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if before.verification_level != after.verification_level:
                changes.append(f"–£—Ä–æ–≤–µ–Ω—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: `{before.verification_level}` ‚Üí `{after.verification_level}`")
            if before.explicit_content_filter != after.explicit_content_filter:
                changes.append(f"–§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: `{before.explicit_content_filter}` ‚Üí `{after.explicit_content_filter}`")
            if before.mfa_level != after.mfa_level:
                changes.append(f"–£—Ä–æ–≤–µ–Ω—å 2FA: `{before.mfa_level}` ‚Üí `{after.mfa_level}`")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if before.default_notifications != after.default_notifications:
                changes.append(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: `{before.default_notifications}` ‚Üí `{after.default_notifications}`")
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            if before.system_channel != after.system_channel:
                changes.append(f"–°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª: {before.system_channel.mention if before.system_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} ‚Üí {after.system_channel.mention if after.system_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
            if before.rules_channel != after.rules_channel:
                changes.append(f"–ö–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª: {before.rules_channel.mention if before.rules_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} ‚Üí {after.rules_channel.mention if after.rules_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
            
            if changes:
                description.append("**üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:**")
                description.extend(f"{EMOJIS['DOT']} {change}" for change in changes)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                description.extend([
                    f"\n**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:**",
                    f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** `{after.member_count}`",
                    f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª–æ–≤:** `{len(after.channels)}`",
                    f"{EMOJIS['DOT']} **–†–æ–ª–µ–π:** `{len(after.roles)}`",
                    f"{EMOJIS['DOT']} **–≠–º–æ–¥–∑–∏:** `{len(after.emojis)}`",
                    f"{EMOJIS['DOT']} **–°—Ç–∏–∫–µ—Ä–æ–≤:** `{len(after.stickers)}`",
                    f"{EMOJIS['DOT']} **–ë—É—Å—Ç–æ–≤:** `{after.premium_subscription_count}`"
                ])
                
        elif event_type == 'emojis':
            if extra_data:
                if 'added' in extra_data:
                    description.append("**‚ú® –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏:**")
                    description.extend(f"{EMOJIS['DOT']} {emoji} `{emoji.name}`" for emoji in extra_data['added'])
                if 'removed' in extra_data:
                    description.append("\n**üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏:**")
                    description.extend(f"{EMOJIS['DOT']} `{emoji.name}`" for emoji in extra_data['removed'])
                    
        elif event_type == 'stickers':
            if extra_data:
                if 'added' in extra_data:
                    description.append("**‚ú® –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã:**")
                    description.extend(f"{EMOJIS['DOT']} `{sticker.name}`" for sticker in extra_data['added'])
                if 'removed' in extra_data:
                    description.append("\n**üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã:**")
                    description.extend(f"{EMOJIS['DOT']} `{sticker.name}`" for sticker in extra_data['removed'])
                    
        elif event_type == 'integrations':
            if extra_data and 'integrations' in extra_data:
                description.extend([
                    f"{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>",
                    f"{EMOJIS['DOT']} **–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**\n{extra_data['integrations']}"
                ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        moderator = None
        reason = None
        if after:
            try:
                async for entry in after.audit_logs(limit=1):
                    moderator = entry.user
                    reason = entry.reason
                    break
            except discord.Forbidden:
                pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —ç–º–±–µ–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
        author = None
        if moderator and moderator.avatar:
            author = {
                'name': moderator.name,
                'icon_url': moderator.avatar.url
            }

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description),
            thumbnail_url=after.icon.url if after and after.icon else None,
            author=author
        )

    @commands.Cog.listener()
    async def on_guild_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        await self.handle_guild_event(after, 'update', before, after)

    @commands.Cog.listener()
    async def on_guild_emojis_update(self, guild, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–º–æ–¥–∑–∏"""
        new_emojis = [emoji for emoji in after if emoji not in before]
        removed_emojis = [emoji for emoji in before if emoji not in after]
        
        if new_emojis or removed_emojis:
            await self.handle_guild_event(guild, 'emojis', extra_data={
                'added': new_emojis,
                'removed': removed_emojis
            })

    @commands.Cog.listener()
    async def on_guild_stickers_update(self, guild, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∏–∫–µ—Ä–æ–≤"""
        new_stickers = [sticker for sticker in after if sticker not in before]
        removed_stickers = [sticker for sticker in before if sticker not in after]
        
        if new_stickers or removed_stickers:
            await self.handle_guild_event(guild, 'stickers', extra_data={
                'added': new_stickers,
                'removed': removed_stickers
            })

    @commands.Cog.listener()
    async def on_guild_integrations_update(self, guild):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        try:
            integrations = await guild.integrations()
            integration_list = "\n".join(f"{EMOJIS['DOT']} `{i.name}` ({i.type})" for i in integrations)
        except discord.Forbidden:
            integration_list = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"
            
        await self.handle_guild_event(guild, 'integrations', extra_data={
            'integrations': integration_list
        })

    async def handle_channel_event(self, channel, event_type: str, before=None, after=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.log_channel:
            return

        title_map = {
            'create': 'üìù –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω',
            'delete': 'üóëÔ∏è –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω',
            'update': 'üìù –ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω',
            'pins': 'üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'voice_status': 'üé§ –°—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ
        if event_type != 'delete':
            description.extend([
                f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {channel.mention}",
                f"{EMOJIS['DOT']} **–¢–∏–ø:** `{str(channel.type)}`",
                f"{EMOJIS['DOT']} **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{channel.category.name if channel.category else '–ù–µ—Ç'}`"
            ])
        else:
            description.extend([
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{channel.name}`",
                f"{EMOJIS['DOT']} **–¢–∏–ø:** `{str(channel.type)}`",
                f"{EMOJIS['DOT']} **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{channel.category.name if channel.category else '–ù–µ—Ç'}`"
            ])

        if event_type == 'update' and before and after:
            changes = []
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if before.name != after.name:
                changes.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{before.name}` ‚Üí `{after.name}`")
            if before.position != after.position:
                changes.append(f"–ü–æ–∑–∏—Ü–∏—è: `{before.position}` ‚Üí `{after.position}`")
            if before.category != after.category:
                changes.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{before.category.name if before.category else '–ù–µ—Ç'}` ‚Üí `{after.category.name if after.category else '–ù–µ—Ç'}`")
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            if isinstance(before, discord.TextChannel) and isinstance(after, discord.TextChannel):
                if before.topic != after.topic:
                    changes.append(f"–¢–µ–º–∞: `{before.topic or '–ù–µ—Ç'}` ‚Üí `{after.topic or '–ù–µ—Ç'}`")
                if before.slowmode_delay != after.slowmode_delay:
                    changes.append(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: `{before.slowmode_delay}—Å` ‚Üí `{after.slowmode_delay}—Å`")
                if before.nsfw != after.nsfw:
                    changes.append(f"NSFW: `{'–î–∞' if after.nsfw else '–ù–µ—Ç'}`")
                if hasattr(before, 'default_auto_archive_duration') and before.default_auto_archive_duration != after.default_auto_archive_duration:
                    changes.append(f"–í—Ä–µ–º—è –∞–≤—Ç–æ–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: `{before.default_auto_archive_duration} –º–∏–Ω—É—Ç` ‚Üí `{after.default_auto_archive_duration} –º–∏–Ω—É—Ç`")
                if hasattr(before, 'default_thread_slowmode_delay') and before.default_thread_slowmode_delay != after.default_thread_slowmode_delay:
                    changes.append(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ç—Ä–µ–¥–æ–≤: `{before.default_thread_slowmode_delay}—Å` ‚Üí `{after.default_thread_slowmode_delay}—Å`")
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            if isinstance(before, discord.VoiceChannel) and isinstance(after, discord.VoiceChannel):
                if before.bitrate != after.bitrate:
                    changes.append(f"–ë–∏—Ç—Ä–µ–π—Ç: `{before.bitrate//1000}kbps` ‚Üí `{after.bitrate//1000}kbps`")
                if before.user_limit != after.user_limit:
                    changes.append(f"–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{before.user_limit or '–ù–µ—Ç'}` ‚Üí `{after.user_limit or '–ù–µ—Ç'}`")
                if before.rtc_region != after.rtc_region:
                    changes.append(f"–†–µ–≥–∏–æ–Ω: `{before.rtc_region or '–ê–≤—Ç–æ'}` ‚Üí `{after.rtc_region or '–ê–≤—Ç–æ'}`")
                if hasattr(before, 'video_quality_mode') and before.video_quality_mode != after.video_quality_mode:
                    changes.append(f"–ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: `{before.video_quality_mode}` ‚Üí `{after.video_quality_mode}`")

            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä—É–º–æ–≤
            if isinstance(before, discord.ForumChannel) and isinstance(after, discord.ForumChannel):
                if hasattr(before, 'available_tags') and before.available_tags != after.available_tags:
                    added_tags = [tag for tag in after.available_tags if tag not in before.available_tags]
                    removed_tags = [tag for tag in before.available_tags if tag not in after.available_tags]
                    if added_tags:
                        changes.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–µ–≥–∏: `{', '.join(tag.name for tag in added_tags)}`")
                    if removed_tags:
                        changes.append(f"–£–¥–∞–ª–µ–Ω—ã —Ç–µ–≥–∏: `{', '.join(tag.name for tag in removed_tags)}`")
                
                if hasattr(before, 'default_reaction_emoji') and before.default_reaction_emoji != after.default_reaction_emoji:
                    changes.append(f"–≠–º–æ–¥–∑–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: `{before.default_reaction_emoji or '–ù–µ—Ç'}` ‚Üí `{after.default_reaction_emoji or '–ù–µ—Ç'}`")
                
                if hasattr(before, 'default_sort_order') and before.default_sort_order != after.default_sort_order:
                    changes.append(f"–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: `{before.default_sort_order}` ‚Üí `{after.default_sort_order}`")
                
                if hasattr(before, 'default_layout') and before.default_layout != after.default_layout:
                    changes.append(f"–ú–∞–∫–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: `{before.default_layout}` ‚Üí `{after.default_layout}`")

            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if before.overwrites != after.overwrites:
                permission_changes = []
                for target, after_overwrite in after.overwrites.items():
                    before_overwrite = before.overwrites.get(target)
                    if before_overwrite != after_overwrite:
                        allow_changes = []
                        deny_changes = []
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞
                        for perm, value in after_overwrite.pair():
                            before_allow, before_deny = before_overwrite.pair() if before_overwrite else (None, None)
                            if value != (before_allow.value if before_allow else 0):
                                if value:
                                    allow_changes.append(f"`{perm}`")
                                else:
                                    deny_changes.append(f"`{perm}`")
                        
                        if allow_changes or deny_changes:
                            permission_changes.append(f"\n**–ò–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {target.mention if hasattr(target, 'mention') else target.name}:**")
                            if allow_changes:
                                permission_changes.append(f"{EMOJIS['DOT']} **–†–∞–∑—Ä–µ—à–µ–Ω–æ:** {', '.join(allow_changes)}")
                            if deny_changes:
                                permission_changes.append(f"{EMOJIS['DOT']} **–ó–∞–ø—Ä–µ—â–µ–Ω–æ:** {', '.join(deny_changes)}")
                
                if permission_changes:
                    changes.append("\n**üîí –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:**")
                    changes.extend(permission_changes)
            
            if changes:
                description.append("\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:**")
                description.extend(f"{EMOJIS['DOT']} {change}" for change in changes)

        elif event_type == 'pins':
            if extra_data:
                if 'count' in extra_data:
                    description.append(f"{EMOJIS['DOT']} **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö:** `{extra_data['count']}`")
                if 'last_pin' in extra_data:
                    description.append(f"{EMOJIS['DOT']} **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ:** <t:{int(extra_data['last_pin'].timestamp())}:F>")

        elif event_type == 'voice_status':
            if extra_data:
                if 'members' in extra_data:
                    description.append(f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ –∫–∞–Ω–∞–ª–µ:** {', '.join(member.mention for member in extra_data['members'])}")
                if 'status' in extra_data:
                    description.append(f"{EMOJIS['DOT']} **–°—Ç–∞—Ç—É—Å:** `{extra_data['status']}`")

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'create': discord.AuditLogAction.channel_create,
                'delete': discord.AuditLogAction.channel_delete,
                'update': discord.AuditLogAction.channel_update,
                'pins': discord.AuditLogAction.message_pin
            }.get(event_type)
            
            if action:
                async for entry in channel.guild.audit_logs(limit=1, action=action):
                    if entry.target.id == channel.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description)
        )

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        if not self.log_channel:
            return

        if before.channel != after.channel:
            if after.channel:
                status = f"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ {after.channel.mention}"
                channel = after.channel
            elif before.channel:
                status = f"–ø–æ–∫–∏–Ω—É–ª {before.channel.name}"
                channel = before.channel
            else:
                return

            await self.handle_channel_event(
                channel,
                'voice_status',
                extra_data={
                    'status': status,
                    'members': channel.members
                }
            )

    async def handle_role_event(self, role, event_type: str, before=None, after=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ä–æ–ª–µ–π"""
        if not self.log_channel:
            return

        title_map = {
            'create': 'üé≠ –†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞',
            'delete': 'üóëÔ∏è –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞',
            'update': 'üìù –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞',
            'position': 'üìä –ü–æ–∑–∏—Ü–∏—è —Ä–æ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∞',
            'permissions': 'üîí –ü—Ä–∞–≤–∞ —Ä–æ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã',
            'name': '‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'color': 'üé® –¶–≤–µ—Ç —Ä–æ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω',
            'hoist': 'üìå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'mentionable': 'üí¨ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–æ'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–ª–∏
        description.extend([
            f"{EMOJIS['DOT']} **–†–æ–ª—å:** {role.mention}",
            f"{EMOJIS['DOT']} **ID:** `{role.id}`"
        ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if event_type == 'create':
            description.extend([
                f"{EMOJIS['DOT']} **–¶–≤–µ—Ç:** `{str(role.color)}`",
                f"{EMOJIS['DOT']} **–ü–æ–∑–∏—Ü–∏—è:** `{role.position}`",
                f"{EMOJIS['DOT']} **–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ:** `{'–î–∞' if role.hoist else '–ù–µ—Ç'}`",
                f"{EMOJIS['DOT']} **–ú–æ–∂–Ω–æ —É–ø–æ–º–∏–Ω–∞—Ç—å:** `{'–î–∞' if role.mentionable else '–ù–µ—Ç'}`"
            ])
            
        elif event_type == 'delete':
            description.extend([
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{role.name}`",
                f"{EMOJIS['DOT']} **–¶–≤–µ—Ç:** `{str(role.color)}`",
                f"{EMOJIS['DOT']} **–ü–æ–∑–∏—Ü–∏—è:** `{role.position}`"
            ])
            
        elif event_type == 'update':
            if before.name != after.name:
                description.extend([
                    f"\n**üìù –ù–∞–∑–≤–∞–Ω–∏–µ:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before.name}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after.name}`"
                ])
                
            if before.color != after.color:
                description.extend([
                    f"\n**üé® –¶–≤–µ—Ç:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** `{str(before.color)}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** `{str(after.color)}`"
                ])
                
            if before.position != after.position:
                description.extend([
                    f"\n**üìä –ü–æ–∑–∏—Ü–∏—è:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–∞—è:** `{before.position}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤–∞—è:** `{after.position}`"
                ])
                
            if before.permissions != after.permissions:
                old_perms = set([perm[0] for perm in before.permissions if perm[1]])
                new_perms = set([perm[0] for perm in after.permissions if perm[1]])
                
                added_perms = new_perms - old_perms
                removed_perms = old_perms - new_perms
                
                if added_perms:
                    description.append(f"\n**‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞:**")
                    for perm in added_perms:
                        description.append(f"{EMOJIS['DOT']} `{perm}`")
                        
                if removed_perms:
                    description.append(f"\n**‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞:**")
                    for perm in removed_perms:
                        description.append(f"{EMOJIS['DOT']} `{perm}`")
                        
            if before.hoist != after.hoist:
                description.extend([
                    f"\n**üìå –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{'–î–∞' if before.hoist else '–ù–µ—Ç'}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{'–î–∞' if after.hoist else '–ù–µ—Ç'}`"
                ])
                
            if before.mentionable != after.mentionable:
                description.extend([
                    f"\n**üí¨ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{'–î–∞' if before.mentionable else '–ù–µ—Ç'}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{'–î–∞' if after.mentionable else '–ù–µ—Ç'}`"
                ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'create': discord.AuditLogAction.role_create,
                'delete': discord.AuditLogAction.role_delete,
                'update': discord.AuditLogAction.role_update
            }.get(event_type)
            
            if action:
                async for entry in role.guild.audit_logs(limit=1, action=action):
                    if entry.target.id == role.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description)
        )

    @commands.Cog.listener()
    async def on_guild_role_create(self, role):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏"""
        await self.handle_role_event(role, 'create')

    @commands.Cog.listener()
    async def on_guild_role_delete(self, role):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
        await self.handle_role_event(role, 'delete')

    @commands.Cog.listener()
    async def on_guild_role_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–∞–∫–∏–µ-—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (before.name != after.name or 
            before.color != after.color or 
            before.hoist != after.hoist or 
            before.mentionable != after.mentionable or 
            before.permissions != after.permissions or 
            (hasattr(before, 'icon') and hasattr(after, 'icon') and before.icon != after.icon)):
            await self.handle_role_event(after, 'update', before=before, after=after)

    @commands.Cog.listener()
    async def on_guild_channel_create(self, channel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        await self.handle_channel_event(channel, 'create')

    @commands.Cog.listener()
    async def on_guild_channel_delete(self, channel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        await self.handle_channel_event(channel, 'delete')

    @commands.Cog.listener()
    async def on_guild_channel_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        await self.handle_channel_event(after, 'update', before, after)

    @commands.Cog.listener()
    async def on_guild_channel_pins_update(self, channel, last_pin):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            pins = await channel.pins()
            await self.handle_channel_event(channel, 'pins', extra_data={
                'count': len(pins),
                'last_pin': last_pin
            })
        except discord.Forbidden:
            pass

    @commands.Cog.listener()
    async def on_guild_role_create(self, role):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π"""
        await self.handle_role_event(role, 'create')

    @commands.Cog.listener()
    async def on_guild_role_delete(self, role):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
        await self.handle_role_event(role, 'delete')

    @commands.Cog.listener()
    async def on_guild_role_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
        await self.handle_role_event(after, 'update', before, after)

    async def handle_application_event(self, guild, event_type: str, app=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"""
        if not self.log_channel:
            return

        title_map = {
            'add': 'üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ',
            'remove': 'üóëÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
            'permission_update': 'üîí –ü—Ä–∞–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        if app:
            description.extend([
                f"{EMOJIS['DOT']} **–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:** `{app.name}`",
                f"{EMOJIS['DOT']} **ID:** `{app.id}`",
                f"{EMOJIS['DOT']} **–û–ø–∏—Å–∞–Ω–∏–µ:** `{app.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`",
                f"{EMOJIS['DOT']} **–ü—É–±–ª–∏—á–Ω–æ–µ:** `{'–î–∞' if app.bot_public else '–ù–µ—Ç'}`",
                f"{EMOJIS['DOT']} **–¢—Ä–µ–±—É–µ—Ç OAuth2:** `{'–î–∞' if app.require_code_grant else '–ù–µ—Ç'}`"
            ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
            if hasattr(app, 'owner'):
                description.append(f"{EMOJIS['DOT']} **–í–ª–∞–¥–µ–ª–µ—Ü:** {app.owner.mention if isinstance(app.owner, discord.User) else app.owner}")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–∞—Ö –∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö URL
            if hasattr(app, 'tags') and app.tags:
                description.append(f"{EMOJIS['DOT']} **–¢–µ–≥–∏:** `{', '.join(app.tags)}`")
            if hasattr(app, 'custom_install_url') and app.custom_install_url:
                description.append(f"{EMOJIS['DOT']} **URL —É—Å—Ç–∞–Ω–æ–≤–∫–∏:** `{app.custom_install_url}`")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∞—Ö (–µ—Å–ª–∏ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤)
        if event_type == 'permission_update' and extra_data:
            if 'permissions' in extra_data:
                description.append("\n**üîí –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞:**")
                for cmd, perms in extra_data['permissions'].items():
                    allowed = []
                    denied = []
                    for target, allowed_state in perms.items():
                        if allowed_state:
                            allowed.append(f"`{target}`")
                        else:
                            denied.append(f"`{target}`")
                    
                    description.append(f"\n{EMOJIS['DOT']} **–ö–æ–º–∞–Ω–¥–∞:** `{cmd}`")
                    if allowed:
                        description.append(f"{EMOJIS['DOT']} **–†–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è:** {', '.join(allowed)}")
                    if denied:
                        description.append(f"{EMOJIS['DOT']} **–ó–∞–ø—Ä–µ—â–µ–Ω–æ –¥–ª—è:** {', '.join(denied)}")

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'add': discord.AuditLogAction.integration_create,
                'remove': discord.AuditLogAction.integration_delete,
                'permission_update': discord.AuditLogAction.application_command_permission_update
            }.get(event_type)
            
            if action:
                async for entry in guild.audit_logs(limit=1, action=action):
                    if app and entry.target.id == app.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –¥–ª—è —ç–º–±–µ–¥–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
        author = None
        if moderator and moderator.avatar:
            author = {
                'name': moderator.name,
                'icon_url': moderator.avatar.url
            }

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description),
            thumbnail_url=app.icon.url if app and hasattr(app, 'icon') and app.icon else None,
            author=author
        )

    @commands.Cog.listener()
    async def on_application_command_permissions_update(self, app_command):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        permissions = {}
        for perm in app_command.permissions:
            cmd_name = app_command.command.name if hasattr(app_command, 'command') else 'unknown'
            if cmd_name not in permissions:
                permissions[cmd_name] = {}
            
            target_name = perm.target.name if hasattr(perm.target, 'name') else str(perm.target.id)
            permissions[cmd_name][target_name] = perm.permission
        
        await self.handle_application_event(
            app_command.guild,
            'permission_update',
            extra_data={'permissions': permissions}
        )

    @commands.Cog.listener()
    async def on_integration_create(self, integration):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if isinstance(integration, discord.ApplicationIntegration):
            await self.handle_application_event(
                integration.guild,
                'add',
                app=integration.application
            )

    @commands.Cog.listener()
    async def on_integration_delete(self, integration):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if isinstance(integration, discord.ApplicationIntegration):
            await self.handle_application_event(
                integration.guild,
                'remove',
                app=integration.application
            )

    async def handle_automod_event(self, guild, event_type: str, rule=None, before=None, after=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π AutoMod"""
        if not self.log_channel:
            return

        title_map = {
            'create': 'üõ°Ô∏è –ü—Ä–∞–≤–∏–ª–æ AutoMod —Å–æ–∑–¥–∞–Ω–æ',
            'delete': 'üóëÔ∏è –ü—Ä–∞–≤–∏–ª–æ AutoMod —É–¥–∞–ª–µ–Ω–æ',
            'toggle': 'üîÑ –ü—Ä–∞–≤–∏–ª–æ AutoMod –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ',
            'update_name': 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ AutoMod –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_actions': '‚ö° –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∞–≤–∏–ª–∞ AutoMod –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'update_content': 'üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ AutoMod –æ–±–Ω–æ–≤–ª–µ–Ω–æ',
            'update_roles': 'üë• –†–æ–ª–∏ –ø—Ä–∞–≤–∏–ª–∞ AutoMod –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'update_channels': 'üì∫ –ö–∞–Ω–∞–ª—ã –ø—Ä–∞–≤–∏–ª–∞ AutoMod –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'update_whitelist': '‚úÖ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª–∞ AutoMod –æ–±–Ω–æ–≤–ª–µ–Ω'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∏–ª–µ
        if rule:
            description.extend([
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{rule.name}`",
                f"{EMOJIS['DOT']} **ID:** `{rule.id}`",
                f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {rule.creator.mention if hasattr(rule, 'creator') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                f"{EMOJIS['DOT']} **–¢—Ä–∏–≥–≥–µ—Ä:** `{rule.trigger_type}`",
                f"{EMOJIS['DOT']} **–í–∫–ª—é—á–µ–Ω–æ:** `{'–î–∞' if rule.enabled else '–ù–µ—Ç'}`",
                f"{EMOJIS['DOT']} **–°–æ–±—ã—Ç–∏–µ:** `{rule.event_type if hasattr(rule, 'event_type') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`"
            ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if event_type == 'toggle':
            if extra_data and 'enabled' in extra_data:
                description.append(f"\n**üîÑ –°—Ç–∞—Ç—É—Å:**")
                description.append(f"{EMOJIS['DOT']} **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** `{'–í–∫–ª—é—á–µ–Ω–æ' if extra_data['enabled'] else '–í—ã–∫–ª—é—á–µ–Ω–æ'}`")

        elif event_type == 'update_name':
            if before and after:
                description.append(f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:**")
                description.extend([
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after}`"
                ])

        elif event_type == 'update_actions':
            if extra_data and 'actions' in extra_data:
                description.append(f"\n**‚ö° –î–µ–π—Å—Ç–≤–∏—è:**")
                for action in extra_data['actions']:
                    action_type = action.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    duration = action.get('duration', '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ')
                    channel_id = action.get('channel_id')
                    
                    action_desc = f"{EMOJIS['DOT']} **–¢–∏–ø:** `{action_type}`"
                    if duration != '–ü–æ—Å—Ç–æ—è–Ω–Ω–æ':
                        action_desc += f"\n{EMOJIS['DOT']} **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** `{duration}`"
                    if channel_id:
                        channel = guild.get_channel(int(channel_id))
                        action_desc += f"\n{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {channel.mention if channel else f'`{channel_id}`'}"
                    
                    description.append(action_desc)

        elif event_type == 'update_content':
            if extra_data and 'content' in extra_data:
                description.append(f"\n**üìÑ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**")
                if 'keywords' in extra_data['content']:
                    description.append(f"{EMOJIS['DOT']} **–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** `{', '.join(extra_data['content']['keywords'])}`")
                if 'patterns' in extra_data['content']:
                    description.append(f"{EMOJIS['DOT']} **–ü–∞—Ç—Ç–µ—Ä–Ω—ã:** `{', '.join(extra_data['content']['patterns'])}`")
                if 'presets' in extra_data['content']:
                    description.append(f"{EMOJIS['DOT']} **–ü—Ä–µ—Å–µ—Ç—ã:** `{', '.join(extra_data['content']['presets'])}`")

        elif event_type in ['update_roles', 'update_channels']:
            if before and after:
                added = [x for x in after if x not in before]
                removed = [x for x in before if x not in after]
                
                if added:
                    description.append(f"\n**‚ú® –î–æ–±–∞–≤–ª–µ–Ω–æ:**")
                    for item in added:
                        description.append(f"{EMOJIS['DOT']} {item.mention if hasattr(item, 'mention') else f'`{item}`'}")
                if removed:
                    description.append(f"\n**üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ:**")
                    for item in removed:
                        description.append(f"{EMOJIS['DOT']} {item.mention if hasattr(item, 'mention') else f'`{item}`'}")

        elif event_type == 'update_whitelist':
            if extra_data and 'whitelist' in extra_data:
                description.append(f"\n**‚úÖ –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:**")
                if 'keywords' in extra_data['whitelist']:
                    description.append(f"{EMOJIS['DOT']} **–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:** `{', '.join(extra_data['whitelist']['keywords'])}`")
                if 'regex' in extra_data['whitelist']:
                    description.append(f"{EMOJIS['DOT']} **–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:** `{', '.join(extra_data['whitelist']['regex'])}`")

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'create': discord.AuditLogAction.automod_rule_create,
                'delete': discord.AuditLogAction.automod_rule_delete,
                'update': discord.AuditLogAction.automod_rule_update
            }.get(event_type.split('_')[0], discord.AuditLogAction.automod_rule_update)
            
            async for entry in guild.audit_logs(limit=1, action=action):
                if rule and entry.target.id == rule.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description),
            thumbnail_url=rule.icon.url if rule and rule.icon else None
        )

    @commands.Cog.listener()
    async def on_automod_rule_create(self, rule):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ AutoMod"""
        await self.handle_automod_event(rule.guild, 'create', rule=rule)

    @commands.Cog.listener()
    async def on_automod_rule_delete(self, rule):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ AutoMod"""
        await self.handle_automod_event(rule.guild, 'delete', rule=rule)

    @commands.Cog.listener()
    async def on_automod_rule_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞ AutoMod"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if before.enabled != after.enabled:
            await self.handle_automod_event(after.guild, 'toggle', rule=after, extra_data={'enabled': after.enabled})
            
        if before.name != after.name:
            await self.handle_automod_event(after.guild, 'update_name', rule=after, before=before.name, after=after.name)
            
        if before.actions != after.actions:
            await self.handle_automod_event(after.guild, 'update_actions', rule=after, extra_data={'actions': after.actions})
            
        if before.trigger_metadata != after.trigger_metadata:
            await self.handle_automod_event(after.guild, 'update_content', rule=after, extra_data={'content': after.trigger_metadata})
            
        if before.exempt_roles != after.exempt_roles:
            await self.handle_automod_event(after.guild, 'update_roles', rule=after, before=before.exempt_roles, after=after.exempt_roles)
            
        if before.exempt_channels != after.exempt_channels:
            await self.handle_automod_event(after.guild, 'update_channels', rule=after, before=before.exempt_channels, after=after.exempt_channels)
            
        if hasattr(before, 'whitelist') and hasattr(after, 'whitelist') and before.whitelist != after.whitelist:
            await self.handle_automod_event(after.guild, 'update_whitelist', rule=after, extra_data={'whitelist': after.whitelist})

    async def handle_emoji_event(self, guild, event_type: str, emoji=None, before=None, after=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —ç–º–æ–¥–∑–∏"""
        if not self.log_channel:
            return

        title_map = {
            'create': 'üòÄ –≠–º–æ–¥–∑–∏ —Å–æ–∑–¥–∞–Ω',
            'delete': 'üóëÔ∏è –≠–º–æ–¥–∑–∏ —É–¥–∞–ª–µ–Ω',
            'update_name': 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_roles': 'üë• –†–æ–ª–∏ —ç–º–æ–¥–∑–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–º–æ–¥–∑–∏
        if emoji:
            description.extend([
                f"{EMOJIS['DOT']} **–≠–º–æ–¥–∑–∏:** {emoji if event_type != 'delete' else '`–£–¥–∞–ª–µ–Ω`'}",
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{emoji.name}`",
                f"{EMOJIS['DOT']} **ID:** `{emoji.id}`",
                f"{EMOJIS['DOT']} **–ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π:** `{'–î–∞' if emoji.animated else '–ù–µ—Ç'}`"
            ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if event_type == 'update_name' and before and after:
            description.append(f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:**")
            description.extend([
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before}`",
                f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after}`"
            ])

        elif event_type == 'update_roles':
            if extra_data and 'roles' in extra_data:
                added_roles = extra_data['roles'].get('added', [])
                removed_roles = extra_data['roles'].get('removed', [])
                
                if added_roles:
                    description.append(f"\n**‚ú® –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:**")
                    for role in added_roles:
                        description.append(f"{EMOJIS['DOT']} {role.mention}")
                
                if removed_roles:
                    description.append(f"\n**üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:**")
                    for role in removed_roles:
                        description.append(f"{EMOJIS['DOT']} {role.mention}")

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'create': discord.AuditLogAction.emoji_create,
                'delete': discord.AuditLogAction.emoji_delete,
                'update_name': discord.AuditLogAction.emoji_update,
                'update_roles': discord.AuditLogAction.emoji_update
            }.get(event_type)
            
            if action:
                async for entry in guild.audit_logs(limit=1, action=action):
                    if emoji and entry.target.id == emoji.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description),
            thumbnail_url=emoji.url if emoji and event_type != 'delete' else None
        )

    @commands.Cog.listener()
    async def on_guild_emoji_create(self, emoji):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ–¥–∑–∏"""
        await self.handle_emoji_event(emoji.guild, 'create', emoji=emoji)

    @commands.Cog.listener()
    async def on_guild_emoji_delete(self, emoji):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏"""
        await self.handle_emoji_event(emoji.guild, 'delete', emoji=emoji)

    @commands.Cog.listener()
    async def on_guild_emoji_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏"""
        if before.name != after.name:
            await self.handle_emoji_event(after.guild, 'update_name', emoji=after, before=before.name, after=after.name)
        
        if before.roles != after.roles:
            await self.handle_emoji_event(
                after.guild,
                'update_roles',
                emoji=after,
                extra_data={
                    'roles': {
                        'added': [role for role in after.roles if role not in before.roles],
                        'removed': [role for role in before.roles if role not in after.roles]
                    }
                }
            )

    @commands.Cog.listener()
    async def on_guild_scheduled_event_create(self, event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        await self.handle_scheduled_event(event.guild, 'create', event=event)

    @commands.Cog.listener()
    async def on_guild_scheduled_event_delete(self, event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        await self.handle_scheduled_event(event.guild, 'delete', event=event)

    @commands.Cog.listener()
    async def on_guild_scheduled_event_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
        if before.location != after.location:
            await self.handle_scheduled_event(after.guild, 'update_location', event=after, before=before, after=after)
        
        if before.description != after.description:
            await self.handle_scheduled_event(after.guild, 'update_description', event=after, before=before, after=after)
        
        if before.name != after.name:
            await self.handle_scheduled_event(after.guild, 'update_name', event=after, before=before, after=after)
        
        if before.privacy_level != after.privacy_level:
            await self.handle_scheduled_event(after.guild, 'update_privacy', event=after, before=before, after=after)
        
        if before.start_time != after.start_time:
            await self.handle_scheduled_event(after.guild, 'update_start', event=after, before=before, after=after)
        
        if before.end_time != after.end_time:
            await self.handle_scheduled_event(after.guild, 'update_end', event=after, before=before, after=after)
        
        if before.status != after.status:
            await self.handle_scheduled_event(after.guild, 'update_status', event=after, before=before, after=after)
        
        if before.image != after.image:
            await self.handle_scheduled_event(after.guild, 'update_image', event=after, before=before, after=after)

    @commands.Cog.listener()
    async def on_guild_scheduled_event_user_add(self, event, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–æ–±—ã—Ç–∏—é"""
        await self.handle_scheduled_event(event.guild, 'user_add', event=event, extra_data={'user': user})

    @commands.Cog.listener()
    async def on_guild_scheduled_event_user_remove(self, event, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è"""
        await self.handle_scheduled_event(event.guild, 'user_remove', event=event, extra_data={'user': user})

    async def handle_scheduled_event(self, guild, event_type: str, event=None, before=None, after=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if not self.log_channel:
            return

        title_map = {
            'create': 'üìÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ',
            'delete': 'üóëÔ∏è –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ',
            'update_location': 'üìç –õ–æ–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞',
            'update_description': 'üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_name': 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_privacy': 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∞',
            'update_start': '‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_end': '‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_status': 'üìä –°—Ç–∞—Ç—É—Å —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω',
            'update_image': 'üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ',
            'user_add': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–æ–±—ã—Ç–∏—é',
            'user_remove': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–æ–±—ã—Ç–∏–µ'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
        if event:
            description.extend([
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{event.name}`",
                f"{EMOJIS['DOT']} **ID:** `{event.id}`",
                f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {event.creator.mention if event.creator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                f"{EMOJIS['DOT']} **–¢–∏–ø:** `{event.entity_type}`",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ç—É—Å:** `{event.status}`",
                f"{EMOJIS['DOT']} **–ù–∞—á–∞–ª–æ:** <t:{int(event.start_time.timestamp())}:F>",
                f"{EMOJIS['DOT']} **–ö–æ–Ω–µ—Ü:** {f'<t:{int(event.end_time.timestamp())}:F>' if event.end_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
            ])

            if event.description:
                description.append(f"{EMOJIS['DOT']} **–û–ø–∏—Å–∞–Ω–∏–µ:** `{event.description}`")

            location = event.location if isinstance(event.location, str) else "–ù–µ—Ç"
            if event.channel:
                location = event.channel.mention
            description.append(f"{EMOJIS['DOT']} **–õ–æ–∫–∞—Ü–∏—è:** {location}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if event_type.startswith('update_'):
            if before and after:
                if event_type == 'update_location':
                    old_loc = before.location if isinstance(before.location, str) else (before.channel.mention if before.channel else "–ù–µ—Ç")
                    new_loc = after.location if isinstance(after.location, str) else (after.channel.mention if after.channel else "–ù–µ—Ç")
                    description.append(f"\n**üìç –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:**")
                    description.extend([
                        f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–∞—è:** {old_loc}",
                        f"{EMOJIS['DOT']} **–ù–æ–≤–∞—è:** {new_loc}"
                    ])
                
                elif event_type == 'update_description':
                    description.append(f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è:**")
                    description.extend([
                        f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before.description or '–ù–µ—Ç'}`",
                        f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after.description or '–ù–µ—Ç'}`"
                    ])
                
                elif event_type == 'update_name':
                    description.append(f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:**")
                    description.extend([
                        f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before.name}`",
                        f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after.name}`"
                    ])
                
                elif event_type == 'update_privacy':
                    description.append(f"\n**üîí –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:**")
                    description.extend([
                        f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–∞—è:** `{before.privacy_level}`",
                        f"{EMOJIS['DOT']} **–ù–æ–≤–∞—è:** `{after.privacy_level}`"
                    ])
                
                elif event_type == 'update_start':
                    description.append(f"\n**‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞:**")
                    description.extend([
                        f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** <t:{int(before.start_time.timestamp())}:F>",
                        f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** <t:{int(after.start_time.timestamp())}:F>"
                    ])
                
                elif event_type == 'update_end':
                    description.append(f"\n**‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è:**")
                    description.extend([
                        f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** {f'<t:{int(before.end_time.timestamp())}:F>' if before.end_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}",
                        f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** {f'<t:{int(after.end_time.timestamp())}:F>' if after.end_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}"
                    ])
                
                elif event_type == 'update_status':
                    description.append(f"\n**üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:**")
                    description.extend([
                        f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** `{before.status}`",
                        f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** `{after.status}`"
                    ])

        elif event_type in ['user_add', 'user_remove'] and extra_data and 'user' in extra_data:
            user = extra_data['user']
            description.extend([
                f"\n**üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**",
                f"{EMOJIS['DOT']} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.mention}",
                f"{EMOJIS['DOT']} **ID:** `{user.id}`"
            ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'create': discord.AuditLogAction.guild_scheduled_event_create,
                'delete': discord.AuditLogAction.guild_scheduled_event_delete,
                'update': discord.AuditLogAction.guild_scheduled_event_update
            }.get(event_type.split('_')[0], discord.AuditLogAction.guild_scheduled_event_update)
            
            if action:
                async for entry in guild.audit_logs(limit=1, action=action):
                    if event and entry.target.id == event.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description),
            thumbnail_url=event.image.url if event and event.image else None
        )

    async def handle_invite_event(self, guild, event_type: str, invite=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        if not self.log_channel:
            return

        title_map = {
            'create': 'üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ',
            'delete': 'üóëÔ∏è –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ',
            'post': 'üìù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
        if invite:
            description.extend([
                f"{EMOJIS['DOT']} **–ö–æ–¥:** `{invite.code}`",
                f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {invite.inviter.mention if invite.inviter else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {invite.channel.mention}",
                f"{EMOJIS['DOT']} **–ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:** `{invite.max_uses or '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'}`",
                f"{EMOJIS['DOT']} **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** `{invite.max_age or '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'} —Å–µ–∫—É–Ω–¥`",
                f"{EMOJIS['DOT']} **–í—Ä–µ–º–µ–Ω–Ω–æ–µ:** `{'–î–∞' if invite.temporary else '–ù–µ—Ç'}`"
            ])

            if hasattr(invite, 'uses'):
                description.append(f"{EMOJIS['DOT']} **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:** `{invite.uses}`")

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'create': discord.AuditLogAction.invite_create,
                'delete': discord.AuditLogAction.invite_delete
            }.get(event_type)
            
            if action:
                async for entry in guild.audit_logs(limit=1, action=action):
                    if invite and entry.target.code == invite.code:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description)
        )

    async def handle_poll_event(self, guild, event_type: str, poll=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ–ø—Ä–æ—Å–æ–≤"""
        if not self.log_channel:
            return

        title_map = {
            'create': 'üìä –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω',
            'delete': 'üóëÔ∏è –û–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω',
            'finalize': '‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω',
            'vote_add': 'üëç –ì–æ–ª–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω',
            'vote_remove': 'üëé –ì–æ–ª–æ—Å —É–¥–∞–ª–µ–Ω'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—Ä–æ—Å–µ
        if poll:
            description.extend([
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{poll.question}`",
                f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {poll.author.mention}",
                f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {poll.channel.mention}"
            ])

            if hasattr(poll, 'options'):
                description.append("\n**üìã –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:**")
                for i, option in enumerate(poll.options, 1):
                    description.append(f"{EMOJIS['DOT']} **{i}.** `{option}`")

            if hasattr(poll, 'votes') and poll.votes:
                description.append("\n**üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**")
                for option, votes in poll.votes.items():
                    description.append(f"{EMOJIS['DOT']} `{option}`: **{len(votes)}** –≥–æ–ª–æ—Å–æ–≤")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
        if event_type in ['vote_add', 'vote_remove'] and extra_data:
            if 'user' in extra_data:
                description.extend([
                    f"\n**üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ–ª–æ—Å–µ:**",
                    f"{EMOJIS['DOT']} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {extra_data['user'].mention}",
                    f"{EMOJIS['DOT']} **–í—ã–±–æ—Ä:** `{extra_data.get('choice', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`"
                ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'create': discord.AuditLogAction.message_pin,
                'delete': discord.AuditLogAction.message_unpin
            }.get(event_type)
            
            if action and poll:
                async for entry in guild.audit_logs(limit=1, action=action):
                    if entry.target.id == poll.message.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description)
        )

    async def handle_stage_event(self, guild, event_type: str, stage=None, before=None, after=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å—Ü–µ–Ω—ã"""
        if not self.log_channel:
            return

        title_map = {
            'start': 'üé≠ –°—Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞',
            'end': 'üé≠ –°—Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞',
            'topic_update': 'üìù –¢–µ–º–∞ —Å—Ü–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∞',
            'privacy_update': 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∞'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ü–µ–Ω–µ
        if stage:
            description.extend([
                f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {stage.channel.mention}",
                f"{EMOJIS['DOT']} **–¢–µ–º–∞:** `{stage.topic or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
                f"{EMOJIS['DOT']} **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:** `{stage.privacy_level}`"
            ])

            if hasattr(stage, 'speakers') and stage.speakers:
                description.append("\n**üé§ –°–ø–∏–∫–µ—Ä—ã:**")
                for speaker in stage.speakers:
                    description.append(f"{EMOJIS['DOT']} {speaker.mention}")

            if hasattr(stage, 'listeners') and stage.listeners:
                description.append(f"\n**üë• –°–ª—É—à–∞—Ç–µ–ª–µ–π:** `{len(stage.listeners)}`")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if event_type == 'topic_update' and before and after:
            description.extend([
                f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–∞—è:** `{before.topic or '–ù–µ—Ç'}`",
                f"{EMOJIS['DOT']} **–ù–æ–≤–∞—è:** `{after.topic or '–ù–µ—Ç'}`"
            ])
            
        elif event_type == 'privacy_update' and before and after:
            description.extend([
                f"\n**üîí –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–∞—è:** `{before.privacy_level}`",
                f"{EMOJIS['DOT']} **–ù–æ–≤–∞—è:** `{after.privacy_level}`"
            ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'start': discord.AuditLogAction.stage_instance_create,
                'end': discord.AuditLogAction.stage_instance_delete,
                'update': discord.AuditLogAction.stage_instance_update
            }.get(event_type.split('_')[0])
            
            if action:
                async for entry in guild.audit_logs(limit=1, action=action):
                    if stage and entry.target.id == stage.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description)
        )

    @commands.Cog.listener()
    async def on_invite_create(self, invite):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        await self.handle_invite_event(invite.guild, 'create', invite=invite)

    @commands.Cog.listener()
    async def on_invite_delete(self, invite):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        await self.handle_invite_event(invite.guild, 'delete', invite=invite)

    @commands.Cog.listener()
    async def on_stage_instance_create(self, stage):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω—ã"""
        await self.handle_stage_event(stage.guild, 'start', stage=stage)

    @commands.Cog.listener()
    async def on_stage_instance_delete(self, stage):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ü–µ–Ω—ã"""
        await self.handle_stage_event(stage.guild, 'end', stage=stage)

    @commands.Cog.listener()
    async def on_stage_instance_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ü–µ–Ω—ã"""
        if before.topic != after.topic:
            await self.handle_stage_event(after.guild, 'topic_update', stage=after, before=before, after=after)
            
        if before.privacy_level != after.privacy_level:
            await self.handle_stage_event(after.guild, 'privacy_update', stage=after, before=before, after=after)

    async def handle_sticker_event(self, guild, event_type: str, sticker=None, before=None, after=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å—Ç–∏–∫–µ—Ä–æ–≤"""
        if not self.log_channel:
            return

        title_map = {
            'create': 'üåü –°—Ç–∏–∫–µ—Ä —Å–æ–∑–¥–∞–Ω',
            'delete': 'üóëÔ∏è –°—Ç–∏–∫–µ—Ä —É–¥–∞–ª–µ–Ω',
            'update_name': 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_description': 'üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_emoji': 'üòÄ –°–≤—è–∑–∞–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏ —Å—Ç–∏–∫–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–∫–µ—Ä–µ
        if sticker:
            description.extend([
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{sticker.name}`",
                f"{EMOJIS['DOT']} **ID:** `{sticker.id}`",
                f"{EMOJIS['DOT']} **–û–ø–∏—Å–∞–Ω–∏–µ:** `{sticker.description or '–ù–µ—Ç'}`",
                f"{EMOJIS['DOT']} **–§–æ—Ä–º–∞—Ç:** `{sticker.format}`",
                f"{EMOJIS['DOT']} **–°–≤—è–∑–∞–Ω–Ω—ã–π —ç–º–æ–¥–∑–∏:** {sticker.emoji if hasattr(sticker, 'emoji') else '–ù–µ—Ç'}"
            ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if event_type == 'update_name' and before and after:
            description.extend([
                f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before.name}`",
                f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after.name}`"
            ])
            
        elif event_type == 'update_description' and before and after:
            description.extend([
                f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before.description or '–ù–µ—Ç'}`",
                f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after.description or '–ù–µ—Ç'}`"
            ])
            
        elif event_type == 'update_emoji' and before and after:
            description.extend([
                f"\n**üòÄ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** {before.emoji if hasattr(before, 'emoji') else '–ù–µ—Ç'}",
                f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** {after.emoji if hasattr(after, 'emoji') else '–ù–µ—Ç'}"
            ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'create': discord.AuditLogAction.sticker_create,
                'delete': discord.AuditLogAction.sticker_delete,
                'update': discord.AuditLogAction.sticker_update
            }.get(event_type.split('_')[0])
            
            if action:
                async for entry in guild.audit_logs(limit=1, action=action):
                    if sticker and entry.target.id == sticker.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description),
            thumbnail_url=sticker.url if sticker else None
        )

    @commands.Cog.listener()
    async def on_guild_sticker_create(self, sticker):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
        await self.handle_sticker_event(sticker.guild, 'create', sticker=sticker)

    @commands.Cog.listener()
    async def on_guild_sticker_delete(self, sticker):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
        await self.handle_sticker_event(sticker.guild, 'delete', sticker=sticker)

    @commands.Cog.listener()
    async def on_guild_sticker_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
        if before.name != after.name:
            await self.handle_sticker_event(after.guild, 'update_name', sticker=after, before=before, after=after)
            
        if before.description != after.description:
            await self.handle_sticker_event(after.guild, 'update_description', sticker=after, before=before, after=after)
            
        if hasattr(before, 'emoji') and hasattr(after, 'emoji') and before.emoji != after.emoji:
            await self.handle_sticker_event(after.guild, 'update_emoji', sticker=after, before=before, after=after)

    async def handle_server_event(self, guild, event_type: str, before=None, after=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.log_channel:
            return

        title_map = {
            'ban_add': 'üî® –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–∞–Ω–µ–Ω',
            'ban_remove': 'üîì –£—á–∞—Å—Ç–Ω–∏–∫ —Ä–∞–∑–±–∞–Ω–µ–Ω',
            'member_join': 'üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è',
            'member_leave': 'üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä',
            'member_kick': 'üë¢ –£—á–∞—Å—Ç–Ω–∏–∫ –∫–∏–∫–Ω—É—Ç',
            'member_prune': 'üßπ –û—á–∏—Å—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
            'afk_channel_update': 'üí§ –ö–∞–Ω–∞–ª AFK –∏–∑–º–µ–Ω–µ–Ω',
            'afk_timeout_update': '‚è∞ –¢–∞–π–º-–∞—É—Ç AFK –∏–∑–º–µ–Ω–µ–Ω',
            'banner_update': 'üñºÔ∏è –ë–∞–Ω–Ω–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω',
            'notification_update': 'üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω—ã',
            'discovery_splash_update': 'üåü –°–ø–ª–µ—à –¥–∏—Å–∫–∞–≤–µ—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω',
            'content_filter_update': 'üîû –£—Ä–æ–≤–µ–Ω—å —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω',
            'features_update': '‚ú® –§—É–Ω–∫—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'icon_update': 'üñºÔ∏è –ò–∫–æ–Ω–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞',
            'mfa_update': 'üîí –£—Ä–æ–≤–µ–Ω—å MFA –∏–∑–º–µ–Ω–µ–Ω',
            'name_update': 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'description_update': 'üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'owner_update': 'üëë –í–ª–∞–¥–µ–ª–µ—Ü —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω',
            'partner_update': 'ü§ù –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –∏–∑–º–µ–Ω–µ–Ω',
            'boost_level_update': '‚≠ê –£—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω',
            'boost_bar_update': 'üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±—É—Å—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'public_updates_channel_update': 'üì¢ –ö–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω',
            'rules_channel_update': 'üìú –ö–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª –∏–∑–º–µ–Ω–µ–Ω',
            'splash_update': 'üñºÔ∏è –°–ø–ª–µ—à —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω',
            'system_channel_update': '‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω',
            'vanity_update': 'üîó –í–∞–Ω–∏—Ç–∏ URL –∏–∑–º–µ–Ω–µ–Ω',
            'verification_update': '‚úÖ –£—Ä–æ–≤–µ–Ω—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω',
            'verified_update': '‚úì –°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω',
            'widget_update': 'üîß –í–∏–¥–∂–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω',
            'locale_update': 'üåê –û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω',
            'onboarding_toggle': 'üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω',
            'onboarding_channels_update': 'üì∫ –ö–∞–Ω–∞–ª—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã',
            'onboarding_question_add': '‚ùì –í–æ–ø—Ä–æ—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω',
            'onboarding_question_remove': '‚ùå –í–æ–ø—Ä–æ—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ —É–¥–∞–ª–µ–Ω',
            'onboarding_question_update': 'üìù –í–æ–ø—Ä–æ—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        description.extend([
            f"{EMOJIS['DOT']} **–°–µ—Ä–≤–µ—Ä:** `{guild.name}`",
            f"{EMOJIS['DOT']} **ID:** `{guild.id}`"
        ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if event_type.endswith('_update') and before and after:
            if event_type == 'name_update':
                description.extend([
                    f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before.name}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after.name}`"
                ])
                
            elif event_type == 'description_update':
                description.extend([
                    f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before.description or '–ù–µ—Ç'}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after.description or '–ù–µ—Ç'}`"
                ])
                
            elif event_type == 'owner_update':
                description.extend([
                    f"\n**üëë –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** {before.owner.mention}",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** {after.owner.mention}"
                ])
                
            elif event_type == 'verification_update':
                description.extend([
                    f"\n**‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** `{before.verification_level}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** `{after.verification_level}`"
                ])
                
            elif event_type == 'content_filter_update':
                description.extend([
                    f"\n**üîû –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** `{before.explicit_content_filter}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** `{after.explicit_content_filter}`"
                ])
                
            elif event_type == 'system_channel_update':
                description.extend([
                    f"\n**‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** {before.system_channel.mention if before.system_channel else '–ù–µ—Ç'}",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** {after.system_channel.mention if after.system_channel else '–ù–µ—Ç'}"
                ])
                
            elif event_type == 'rules_channel_update':
                description.extend([
                    f"\n**üìú –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∞–≤–∏–ª:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** {before.rules_channel.mention if before.rules_channel else '–ù–µ—Ç'}",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** {after.rules_channel.mention if after.rules_channel else '–ù–µ—Ç'}"
                ])
                
            elif event_type == 'afk_channel_update':
                description.extend([
                    f"\n**üí§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ AFK –∫–∞–Ω–∞–ª–∞:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** {before.afk_channel.mention if before.afk_channel else '–ù–µ—Ç'}",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** {after.afk_channel.mention if after.afk_channel else '–ù–µ—Ç'}"
                ])
                
            elif event_type == 'afk_timeout_update':
                description.extend([
                    f"\n**‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º-–∞—É—Ç–∞ AFK:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** `{before.afk_timeout} —Å–µ–∫—É–Ω–¥`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** `{after.afk_timeout} —Å–µ–∫—É–Ω–¥`"
                ])
                
            elif event_type == 'mfa_update':
                description.extend([
                    f"\n**üîí –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è MFA:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** `{before.mfa_level}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** `{after.mfa_level}`"
                ])
                
            elif event_type == 'notification_update':
                description.extend([
                    f"\n**üîî –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–µ:** `{before.default_notifications}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–µ:** `{after.default_notifications}`"
                ])
                
            elif event_type == 'vanity_update':
                description.extend([
                    f"\n**üîó –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–∞–Ω–∏—Ç–∏ URL:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** `{before.vanity_url_code or '–ù–µ—Ç'}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** `{after.vanity_url_code or '–ù–µ—Ç'}`"
                ])
                
            elif event_type == 'features_update':
                added_features = [f for f in after.features if f not in before.features]
                removed_features = [f for f in before.features if f not in after.features]
                
                if added_features:
                    description.append(f"\n**‚ú® –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
                    description.extend(f"{EMOJIS['DOT']} `{feature}`" for feature in added_features)
                if removed_features:
                    description.append(f"\n**üóëÔ∏è –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**")
                    description.extend(f"{EMOJIS['DOT']} `{feature}`" for feature in removed_features)
                    
            elif event_type == 'boost_level_update':
                description.extend([
                    f"\n**‚≠ê –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±—É—Å—Ç–∞:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** `{before.premium_tier}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** `{after.premium_tier}`"
                ])
                
            elif event_type == 'locale_update':
                description.extend([
                    f"\n**üåê –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —è–∑—ã–∫–∞:**",
                    f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** `{before.preferred_locale}`",
                    f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** `{after.preferred_locale}`"
                ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä—É–Ω–µ
        elif event_type == 'member_prune' and extra_data:
            if 'pruned' in extra_data:
                description.extend([
                    f"\n**üßπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–∏—Å—Ç–∫–µ:**",
                    f"{EMOJIS['DOT']} **–£–¥–∞–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** `{extra_data['pruned']}`",
                    f"{EMOJIS['DOT']} **–î–Ω–µ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:** `{extra_data.get('days', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`"
                ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–µ
        elif event_type.startswith('onboarding_'):
            if extra_data:
                if 'enabled' in extra_data:
                    description.append(f"{EMOJIS['DOT']} **–°—Ç–∞—Ç—É—Å:** `{'–í–∫–ª—é—á–µ–Ω' if extra_data['enabled'] else '–í—ã–∫–ª—é—á–µ–Ω'}`")
                if 'channels' in extra_data:
                    description.append(f"\n**üì∫ –ö–∞–Ω–∞–ª—ã:**")
                    for channel in extra_data['channels']:
                        description.append(f"{EMOJIS['DOT']} {channel.mention}")
                if 'question' in extra_data:
                    description.extend([
                        f"\n**‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–µ:**",
                        f"{EMOJIS['DOT']} **–¢–µ–∫—Å—Ç:** `{extra_data['question']}`"
                    ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'ban_add': discord.AuditLogAction.ban,
                'ban_remove': discord.AuditLogAction.unban,
                'member_kick': discord.AuditLogAction.kick,
                'member_prune': discord.AuditLogAction.member_prune,
                'update': discord.AuditLogAction.guild_update
            }.get(event_type.split('_')[0])
            
            if action:
                async for entry in guild.audit_logs(limit=1, action=action):
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description),
            thumbnail_url=guild.icon.url if guild.icon else None
        )

    @commands.Cog.listener()
    async def on_member_ban(self, guild, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        await self.handle_server_event(guild, 'ban_add', extra_data={'user': user})

    @commands.Cog.listener()
    async def on_member_unban(self, guild, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        await self.handle_server_event(guild, 'ban_remove', extra_data={'user': user})

    @commands.Cog.listener()
    async def on_member_join(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        await self.handle_server_event(member.guild, 'member_join', extra_data={'member': member})

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        await self.handle_server_event(member.guild, 'member_leave', extra_data={'member': member})

    @commands.Cog.listener()
    async def on_member_prune(self, guild, members):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        await self.handle_server_event(guild, 'member_prune', extra_data={'pruned': len(members)})

    @commands.Cog.listener()
    async def on_guild_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        if before.name != after.name:
            await self.handle_server_event(after, 'name_update', before=before, after=after)
            
        if before.description != after.description:
            await self.handle_server_event(after, 'description_update', before=before, after=after)
            
        if before.owner_id != after.owner_id:
            await self.handle_server_event(after, 'owner_update', before=before, after=after)
            
        if before.verification_level != after.verification_level:
            await self.handle_server_event(after, 'verification_update', before=before, after=after)
            
        if before.explicit_content_filter != after.explicit_content_filter:
            await self.handle_server_event(after, 'content_filter_update', before=before, after=after)
            
        if before.system_channel != after.system_channel:
            await self.handle_server_event(after, 'system_channel_update', before=before, after=after)
            
        if before.rules_channel != after.rules_channel:
            await self.handle_server_event(after, 'rules_channel_update', before=before, after=after)
            
        if before.afk_channel != after.afk_channel:
            await self.handle_server_event(after, 'afk_channel_update', before=before, after=after)
            
        if before.afk_timeout != after.afk_timeout:
            await self.handle_server_event(after, 'afk_timeout_update', before=before, after=after)
            
        if before.mfa_level != after.mfa_level:
            await self.handle_server_event(after, 'mfa_update', before=before, after=after)
            
        if before.default_notifications != after.default_notifications:
            await self.handle_server_event(after, 'notification_update', before=before, after=after)
            
        if before.vanity_url_code != after.vanity_url_code:
            await self.handle_server_event(after, 'vanity_update', before=before, after=after)
            
        if before.features != after.features:
            await self.handle_server_event(after, 'features_update', before=before, after=after)
            
        if before.premium_tier != after.premium_tier:
            await self.handle_server_event(after, 'boost_level_update', before=before, after=after)
            
        if before.preferred_locale != after.preferred_locale:
            await self.handle_server_event(after, 'locale_update', before=before, after=after)
            
        if before.icon != after.icon:
            await self.handle_server_event(after, 'icon_update')
            
        if before.banner != after.banner:
            await self.handle_server_event(after, 'banner_update')
            
        if before.splash != after.splash:
            await self.handle_server_event(after, 'splash_update')
            
        if before.discovery_splash != after.discovery_splash:
            await self.handle_server_event(after, 'discovery_splash_update')

    async def handle_soundboard_event(self, guild, event_type: str, sound=None, before=None, after=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –∑–≤—É–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        if not self.log_channel:
            return

        title_map = {
            'upload': 'üéµ –ó–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω',
            'delete': 'üóëÔ∏è –ó–≤—É–∫ —É–¥–∞–ª–µ–Ω',
            'update_name': 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ –∑–≤—É–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_volume': 'üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –∑–≤—É–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞',
            'update_emoji': 'üòÄ –≠–º–æ–¥–∑–∏ –∑–≤—É–∫–∞ –∏–∑–º–µ–Ω–µ–Ω'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤—É–∫–µ
        if sound:
            description.extend([
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{sound.name}`",
                f"{EMOJIS['DOT']} **ID:** `{sound.id}`",
                f"{EMOJIS['DOT']} **–ì—Ä–æ–º–∫–æ—Å—Ç—å:** `{sound.volume}%`",
                f"{EMOJIS['DOT']} **–≠–º–æ–¥–∑–∏:** {sound.emoji if hasattr(sound, 'emoji') else '–ù–µ—Ç'}"
            ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if event_type == 'update_name' and before and after:
            description.extend([
                f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before.name}`",
                f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after.name}`"
            ])
            
        elif event_type == 'update_volume' and before and after:
            description.extend([
                f"\n**üîä –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–∞—è:** `{before.volume}%`",
                f"{EMOJIS['DOT']} **–ù–æ–≤–∞—è:** `{after.volume}%`"
            ])
            
        elif event_type == 'update_emoji' and before and after:
            description.extend([
                f"\n**üòÄ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** {before.emoji if hasattr(before, 'emoji') else '–ù–µ—Ç'}",
                f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** {after.emoji if hasattr(after, 'emoji') else '–ù–µ—Ç'}"
            ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = discord.AuditLogAction.soundboard_sound_update
            async for entry in guild.audit_logs(limit=1, action=action):
                if sound and entry.target.id == sound.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description)
        )

    async def handle_thread_event(self, thread, event_type: str, before=None, after=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ç—Ä–µ–¥–æ–≤"""
        if not self.log_channel:
            return

        title_map = {
            'create': 'üßµ –¢—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω',
            'delete': 'üóëÔ∏è –¢—Ä–µ–¥ —É–¥–∞–ª–µ–Ω',
            'update_name': 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_slowmode': '‚è∞ –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ç—Ä–µ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω',
            'update_archive_duration': 'üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∞',
            'archive': 'üì¶ –¢—Ä–µ–¥ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω',
            'unarchive': 'üìÇ –¢—Ä–µ–¥ —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω',
            'lock': 'üîí –¢—Ä–µ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
            'unlock': 'üîì –¢—Ä–µ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–¥–µ
        if thread:
            description.extend([
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{thread.name}`",
                f"{EMOJIS['DOT']} **ID:** `{thread.id}`",
                f"{EMOJIS['DOT']} **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞–Ω–∞–ª:** {thread.parent.mention if thread.parent else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {thread.owner.mention if thread.owner else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
                f"{EMOJIS['DOT']} **–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º:** `{thread.slowmode_delay}—Å`",
                f"{EMOJIS['DOT']} **–ê—Ä—Ö–∏–≤–∞—Ü–∏—è —á–µ—Ä–µ–∑:** `{thread.auto_archive_duration} –º–∏–Ω—É—Ç`",
                f"{EMOJIS['DOT']} **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω:** `{'–î–∞' if thread.locked else '–ù–µ—Ç'}`",
                f"{EMOJIS['DOT']} **–ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω:** `{'–î–∞' if thread.archived else '–ù–µ—Ç'}`"
            ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if event_type == 'update_name' and before and after:
            description.extend([
                f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before.name}`",
                f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after.name}`"
            ])
            
        elif event_type == 'update_slowmode' and before and after:
            description.extend([
                f"\n**‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** `{before.slowmode_delay}—Å`",
                f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** `{after.slowmode_delay}—Å`"
            ])
            
        elif event_type == 'update_archive_duration' and before and after:
            description.extend([
                f"\n**üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–∞—è:** `{before.auto_archive_duration} –º–∏–Ω—É—Ç`",
                f"{EMOJIS['DOT']} **–ù–æ–≤–∞—è:** `{after.auto_archive_duration} –º–∏–Ω—É—Ç`"
            ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'create': discord.AuditLogAction.thread_create,
                'delete': discord.AuditLogAction.thread_delete,
                'update': discord.AuditLogAction.thread_update,
                'archive': discord.AuditLogAction.thread_update,
                'unarchive': discord.AuditLogAction.thread_update,
                'lock': discord.AuditLogAction.thread_update,
                'unlock': discord.AuditLogAction.thread_update
            }.get(event_type.split('_')[0])
            
            if action:
                async for entry in thread.guild.audit_logs(limit=1, action=action):
                    if entry.target.id == thread.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description)
        )

    @commands.Cog.listener()
    async def on_soundboard_sound_create(self, sound):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        await self.handle_soundboard_event(sound.guild, 'upload', sound=sound)

    @commands.Cog.listener()
    async def on_soundboard_sound_delete(self, sound):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        await self.handle_soundboard_event(sound.guild, 'delete', sound=sound)

    @commands.Cog.listener()
    async def on_soundboard_sound_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤—É–∫–∞"""
        if before.name != after.name:
            await self.handle_soundboard_event(after.guild, 'update_name', sound=after, before=before, after=after)
            
        if before.volume != after.volume:
            await self.handle_soundboard_event(after.guild, 'update_volume', sound=after, before=before, after=after)
            
        if hasattr(before, 'emoji') and hasattr(after, 'emoji') and before.emoji != after.emoji:
            await self.handle_soundboard_event(after.guild, 'update_emoji', sound=after, before=before, after=after)

    @commands.Cog.listener()
    async def on_thread_create(self, thread):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–∞"""
        await self.handle_thread_event(thread, 'create')

    @commands.Cog.listener()
    async def on_thread_delete(self, thread):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–¥–∞"""
        await self.handle_thread_event(thread, 'delete')

    @commands.Cog.listener()
    async def on_thread_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–¥–∞"""
        if before.name != after.name:
            await self.handle_thread_event(after, 'update_name', before=before, after=after)
            
        if before.slowmode_delay != after.slowmode_delay:
            await self.handle_thread_event(after, 'update_slowmode', before=before, after=after)
            
        if before.auto_archive_duration != after.auto_archive_duration:
            await self.handle_thread_event(after, 'update_archive_duration', before=before, after=after)
            
        if not before.archived and after.archived:
            await self.handle_thread_event(after, 'archive')
            
        if before.archived and not after.archived:
            await self.handle_thread_event(after, 'unarchive')
            
        if not before.locked and after.locked:
            await self.handle_thread_event(after, 'lock')
            
        if before.locked and not after.locked:
            await self.handle_thread_event(after, 'unlock')

    async def handle_voice_event(self, guild, event_type: str, member=None, before=None, after=None, extra_data=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if not self.log_channel:
            return

        title_map = {
            'join': 'üéôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É',
            'leave': 'üéôÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª',
            'switch': 'üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª',
            'move': '‚û°Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª',
            'kick': 'üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞',
            'full': '‚ö†Ô∏è –ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –∑–∞–ø–æ–ª–Ω–µ–Ω'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if member:
            description.extend([
                f"{EMOJIS['DOT']} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {member.mention}",
                f"{EMOJIS['DOT']} **ID:** `{member.id}`"
            ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö
        if event_type == 'join':
            description.append(f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {after.channel.mention}")
            
        elif event_type == 'leave':
            description.append(f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {before.channel.mention}")
            
        elif event_type in ['switch', 'move']:
            description.extend([
                f"{EMOJIS['DOT']} **–ò–∑ –∫–∞–Ω–∞–ª–∞:** {before.channel.mention}",
                f"{EMOJIS['DOT']} **–í –∫–∞–Ω–∞–ª:** {after.channel.mention}"
            ])
            
        elif event_type == 'kick':
            description.append(f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {before.channel.mention}")
            
        elif event_type == 'full':
            if extra_data and 'channel' in extra_data:
                channel = extra_data['channel']
                description.extend([
                    f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {channel.mention}",
                    f"{EMOJIS['DOT']} **–õ–∏–º–∏—Ç:** `{channel.user_limit}`",
                    f"{EMOJIS['DOT']} **–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** `{len(channel.members)}`"
                ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –∏ –∫–∏–∫–æ–≤
        moderator = None
        reason = None
        if event_type in ['move', 'kick']:
            try:
                action = discord.AuditLogAction.member_move if event_type == 'move' else discord.AuditLogAction.member_disconnect
                async for entry in guild.audit_logs(limit=1, action=action):
                    if entry.target.id == member.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
            except discord.Forbidden:
                pass

            if moderator:
                description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
                description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
                if reason:
                    description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description)
        )

    async def handle_webhook_event(self, guild, event_type: str, webhook=None, before=None, after=None):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –≤–µ–±—Ö—É–∫–æ–≤"""
        if not self.log_channel:
            return

        title_map = {
            'create': 'üîó –í–µ–±—Ö—É–∫ —Å–æ–∑–¥–∞–Ω',
            'delete': 'üóëÔ∏è –í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω',
            'update_name': 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–æ',
            'update_avatar': 'üñºÔ∏è –ê–≤–∞—Ç–∞—Ä –≤–µ–±—Ö—É–∫–∞ –∏–∑–º–µ–Ω–µ–Ω',
            'update_channel': 'üì∫ –ö–∞–Ω–∞–ª –≤–µ–±—Ö—É–∫–∞ –∏–∑–º–µ–Ω–µ–Ω'
        }

        description = []
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ
        if webhook:
            description.extend([
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{webhook.name}`",
                f"{EMOJIS['DOT']} **ID:** `{webhook.id}`",
                f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {webhook.channel.mention}",
                f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {webhook.user.mention if webhook.user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"
            ])

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if event_type == 'update_name' and before and after:
            description.extend([
                f"\n**üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä–æ–µ:** `{before.name}`",
                f"{EMOJIS['DOT']} **–ù–æ–≤–æ–µ:** `{after.name}`"
            ])
            
        elif event_type == 'update_avatar':
            description.append(f"\n**üñºÔ∏è –ê–≤–∞—Ç–∞—Ä –≤–µ–±—Ö—É–∫–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω**")
            
        elif event_type == 'update_channel' and before and after:
            description.extend([
                f"\n**üì∫ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:**",
                f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π:** {before.channel.mention}",
                f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π:** {after.channel.mention}"
            ])

        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ audit logs
        moderator = None
        reason = None
        try:
            action = {
                'create': discord.AuditLogAction.webhook_create,
                'delete': discord.AuditLogAction.webhook_delete,
                'update': discord.AuditLogAction.webhook_update
            }.get(event_type.split('_')[0])
            
            if action:
                async for entry in guild.audit_logs(limit=1, action=action):
                    if webhook and entry.target.id == webhook.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
        except discord.Forbidden:
            pass

        if moderator:
            description.append(f"\n**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**")
            description.append(f"{EMOJIS['DOT']} **–ò–º—è:** {moderator.mention}")
            if reason:
                description.append(f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason}`")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        description.append(f"\n{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>")

        await self.log_event(
            title=title_map[event_type],
            description="\n".join(description),
            thumbnail_url=webhook.avatar.url if webhook and webhook.avatar else None
        )

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if not before.channel and after.channel:
            await self.handle_voice_event(member.guild, 'join', member=member, after=after)
            
        elif before.channel and not after.channel:
            await self.handle_voice_event(member.guild, 'leave', member=member, before=before)
            
        elif before.channel and after.channel and before.channel != after.channel:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
            try:
                async for entry in member.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_move):
                    if entry.target.id == member.id:
                        await self.handle_voice_event(member.guild, 'move', member=member, before=before, after=after)
                        return
            except discord.Forbidden:
                pass
            
            await self.handle_voice_event(member.guild, 'switch', member=member, before=before, after=after)
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∏–∫ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if before.channel and not after.channel:
            try:
                async for entry in member.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_disconnect):
                    if entry.target.id == member.id:
                        await self.handle_voice_event(member.guild, 'kick', member=member, before=before)
                        break
            except discord.Forbidden:
                pass
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        if after.channel and len(after.channel.members) >= after.channel.user_limit > 0:
            await self.handle_voice_event(
                member.guild,
                'full',
                extra_data={'channel': after.channel}
            )

    @commands.Cog.listener()
    async def on_webhook_create(self, webhook):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±—Ö—É–∫–∞"""
        await self.handle_webhook_event(webhook.guild, 'create', webhook=webhook)

    @commands.Cog.listener()
    async def on_webhook_delete(self, webhook):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞"""
        await self.handle_webhook_event(webhook.guild, 'delete', webhook=webhook)

    @commands.Cog.listener()
    async def on_webhook_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞"""
        if before.name != after.name:
            await self.handle_webhook_event(after.guild, 'update_name', webhook=after, before=before, after=after)
            
        if before.avatar != after.avatar:
            await self.handle_webhook_event(after.guild, 'update_avatar', webhook=after)
            
        if before.channel != after.channel:
            await self.handle_webhook_event(after.guild, 'update_channel', webhook=after, before=before, after=after)

async def setup(bot):
    await bot.add_cog(Logs(bot)) 