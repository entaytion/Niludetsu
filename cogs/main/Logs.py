import discord
from discord.ext import commands
from discord import app_commands
from utils import create_embed, EMOJIS
import traceback
import yaml
import datetime
import asyncio
import os
import io

class Logs(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.owner_id = "636570363605680139"
        self.log_channel = None
        self.invite_uses = {}
        bot.loop.create_task(self.initialize_logs())
        bot.loop.create_task(self.track_invite_uses())

    async def initialize_logs(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        await self.bot.wait_until_ready()  # –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤
        try:
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                if 'logging' in config and 'main_channel' in config['logging']:
                    channel_id = int(config['logging']['main_channel'])
                    self.log_channel = self.bot.get_channel(channel_id)
                    if not self.log_channel:
                        print(f"‚ùå –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω! ID: {channel_id}")
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ fetch_channel
                        try:
                            self.log_channel = await self.bot.fetch_channel(channel_id)
                            print(f"‚úÖ –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ fetch: {self.log_channel.name}")
                        except Exception as e:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ fetch: {e}")
                    else:
                        print(f"‚úÖ –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.log_channel.name}")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            embed = create_embed(
                                title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                                description="–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.",
                                footer={"text": f"ID –∫–∞–Ω–∞–ª–∞: {self.log_channel.id}"}
                            )
                            await self.log_event(embed)
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {e}")
            print(traceback.format_exc())

    def save_config(self, channel_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            config['logging']['main_channel'] = str(channel_id)
            
            with open('config/config.yaml', 'w', encoding='utf-8') as f:
                yaml.dump(config, f, indent=4)
        except Exception as e:
            print(f"Error saving config: {e}")

    async def get_webhook(self, channel: discord.TextChannel) -> discord.Webhook:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –≤–µ–±—Ö—É–∫ –¥–ª—è –∫–∞–Ω–∞–ª–∞"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫
            webhooks = await channel.webhooks()
            webhook = discord.utils.get(webhooks, name='NiluBot Logs')
            
            # –ï—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            if webhook is None:
                webhook = await channel.create_webhook(name='NiluBot Logs')
            
            return webhook
        except discord.Forbidden:
            print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞–º–∏ –≤ –∫–∞–Ω–∞–ª–µ {channel.name}")
            return None

    async def log_event(self, embed, file: discord.File = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫"""
        if not self.log_channel:
            await self.initialize_logs()
            return
            
        if not embed:
            print("‚ùå –≠–º–±–µ–¥ –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω")
            return
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–º–±–µ–¥ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω—Å—Ç–∞–Ω—Å–æ–º discord.Embed
            if not isinstance(embed, discord.Embed):
                print("‚ùå –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è discord.Embed")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —ç–º–±–µ–¥–∞
            if not hasattr(embed, 'title') and not hasattr(embed, 'description'):
                print("‚ùå –£ —ç–º–±–µ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (title –∏–ª–∏ description)")
                return
                
            webhook = await self.get_webhook(self.log_channel)
            
            try:
                if webhook:
                    if file:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        new_file = discord.File(
                            io.BytesIO(file.fp.read()),
                            filename=file.filename,
                            description=file.description,
                            spoiler=file.spoiler
                        )
                        file.fp.seek(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —á—Ç–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                        await webhook.send(embed=embed, file=new_file)
                    else:
                        await webhook.send(embed=embed)
                else:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ–±—Ö—É–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    await self.log_channel.send(embed=embed, file=file)
            except discord.HTTPException as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫: {e}")
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∫–∞–Ω–∞–ª
                await self.log_channel.send(embed=embed, file=file)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞: {str(e)}")
            if hasattr(e, '__traceback__'):
                print(''.join(traceback.format_tb(e.__traceback__)))

    @app_commands.command(name="logs", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤")
    @commands.has_permissions(administrator=True)
    async def logs(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤"""
        try:
            if self.log_channel:
                embed = create_embed(
                    title="üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö",
                    description=f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {self.log_channel.mention}\n"
                              f"ID –∫–∞–Ω–∞–ª–∞: `{self.log_channel.id}`"
                )
            else:
                embed = create_embed(
                    title="‚ùå –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ config.json"
                )
            await interaction.response.send_message(embed=embed)

        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @commands.Cog.listener()
    async def on_command_error(self, ctx, error):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥"""
        if self.log_channel:
            error_trace = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
            await self.log_channel.send(f"<@{self.owner_id}>, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
            embed = create_embed(
                title="‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã",
                description=f"{EMOJIS['DOT']} **–ö–æ–º–∞–Ω–¥–∞:** `{ctx.message.content}`\n"
                          f"{EMOJIS['DOT']} **–ê–≤—Ç–æ—Ä:** {ctx.author.mention} (`{ctx.author.id}`)\n"
                          f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {ctx.channel.mention}\n"
                          f"{EMOJIS['DOT']} **–û—à–∏–±–∫–∞:**\n```py\n{error_trace[:1900]}```"
            )
            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_message_delete(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if message.author.bot:
            return

        embed = create_embed(
            title="üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
            description=f"{EMOJIS['DOT']} **–ê–≤—Ç–æ—Ä:** {message.author.mention} (`{message.author.id}`)\n"
                      f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {message.channel.mention}\n"
                      f"{EMOJIS['DOT']} **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n```\n{message.content[:1900]}```",
            footer={"text": f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {message.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if before.author.bot or before.content == after.content:
            return

        embed = create_embed(
            title="‚úèÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ",
            description=f"{EMOJIS['DOT']} **–ê–≤—Ç–æ—Ä:** {before.author.mention} (`{before.author.id}`)\n"
                      f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {before.channel.mention}\n"
                      f"{EMOJIS['DOT']} **–î–æ:**\n```\n{before.content[:900]}```\n"
                      f"{EMOJIS['DOT']} **–ü–æ—Å–ª–µ:**\n```\n{after.content[:900]}```",
            footer={"text": f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {before.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_member_join(self, member):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∏–Ω–≤–∞–π—Ç–æ–≤"""
        if not self.log_channel:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–∞–π—Ç–µ
        invite_info = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ"
        used_invite = None
        inviter = None

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            current_invites = {invite.code: invite.uses async for invite in member.guild.invites()}
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è–º–∏
            if member.guild.id in self.invite_uses:
                for code, old_data in self.invite_uses[member.guild.id].items():
                    if code in current_invites:
                        if current_invites[code] > old_data['uses']:
                            used_invite = code
                            inviter = old_data['inviter']
                            channel = old_data['channel']
                            created_at = old_data['created_at']
                            
                            invite_info = (
                                f"{EMOJIS['DOT']} **–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:** `{code}`\n"
                                f"{EMOJIS['DOT']} **–ü—Ä–∏–≥–ª–∞—Å–∏–ª:** {inviter.mention} (`{inviter.id}`)\n"
                                f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {channel.mention}\n"
                                f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞–Ω–æ:** <t:{int(created_at.timestamp())}:F>\n"
                                f"{EMOJIS['DOT']} **–í—Ä–µ–º–µ–Ω–Ω–æ–µ:** `{'–î–∞' if old_data['temporary'] else '–ù–µ—Ç'}`\n"
                                f"{EMOJIS['DOT']} **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:** `{current_invites[code]}/{old_data['max_uses'] if old_data['max_uses'] else '‚àû'}`\n"
                            )
                            break

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            await self.track_invite_uses()

        except discord.Forbidden:
            pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
        account_age = datetime.datetime.now(datetime.timezone.utc) - member.created_at
        is_suspicious = account_age.days < 7

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        account_info = (
            f"{EMOJIS['DOT']} **–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:** <t:{int(member.created_at.timestamp())}:F>\n"
            f"{EMOJIS['DOT']} **–í–æ–∑—Ä–∞—Å—Ç –∞–∫–∫–∞—É–Ω—Ç–∞:** `{account_age.days} –¥–Ω–µ–π`\n"
            f"{EMOJIS['DOT']} **–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π:** `{'–î–∞' if is_suspicious else '–ù–µ—Ç'}`\n"
            f"{EMOJIS['DOT']} **–ë–æ—Ç:** `{'–î–∞' if member.bot else '–ù–µ—Ç'}`\n"
            f"{EMOJIS['DOT']} **–°–∏—Å—Ç–µ–º–∞:** `{'–î–∞' if member.system else '–ù–µ—Ç'}`\n"
            f"{EMOJIS['DOT']} **–§–ª–∞–≥–∏:** `{', '.join(flag.name for flag in member.public_flags.all()) or '–ù–µ—Ç'}`"
        )

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
        server_info = (
            f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ:** `{member.guild.member_count}`\n"
            f"{EMOJIS['DOT']} **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:** <t:{int(member.joined_at.timestamp())}:F>"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω–µ–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        try:
            async for ban in member.guild.bans():
                if ban.user.id == member.id:
                    server_info += f"\n{EMOJIS['DOT']} **‚ö†Ô∏è –†–∞–Ω–µ–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω!**"
                    break
        except discord.Forbidden:
            pass

        embed = create_embed(
            title=f"{'ü§ñ' if member.bot else 'üëã'} –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                      f"{EMOJIS['DOT']} **–ò–º—è:** `{member.name}`\n\n"
                      f"**üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ:**\n{account_info}\n\n"
                      f"**üåü –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ:**\n{server_info}\n\n"
                      f"**üì® –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏:**\n{invite_info}",
            footer={"text": f"ID: {member.id}"}
        )

        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)

        if inviter and inviter.avatar:
            embed.set_author(name=f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {inviter.name}", icon_url=inviter.avatar.url)

        if is_suspicious:
            embed.color = discord.Color.red()
            embed.add_field(
                name="‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ",
                value="–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥!",
                inline=False
            )

        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if not self.log_channel:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–∏–∫–Ω—É—Ç
        try:
            async for entry in member.guild.audit_logs(limit=1, action=discord.AuditLogAction.kick):
                if entry.target.id == member.id:
                    moderator = entry.user
                    reason = entry.reason
                    embed = create_embed(
                        title="üë¢ –£—á–∞—Å—Ç–Ω–∏–∫ –∫–∏–∫–Ω—É—Ç",
                        description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                                  f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention}\n"
                                  f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`\n\n"
                                  f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                                  f"{EMOJIS['DOT']} **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:** <t:{int(member.joined_at.timestamp())}:F>\n"
                                  f"{EMOJIS['DOT']} **–ü—Ä–æ–±—ã–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** `{(datetime.datetime.now(datetime.timezone.utc) - member.joined_at).days} –¥–Ω–µ–π`\n"
                                  f"{EMOJIS['DOT']} **–†–æ–ª–∏:** {', '.join(role.mention for role in member.roles[1:]) or '–ù–µ—Ç'}",
                        footer={"text": f"ID: {member.id}"}
                    )
                    if member.avatar:
                        embed.set_thumbnail(url=member.avatar.url)
                    await self.log_event(embed)
                    return
        except discord.Forbidden:
            pass

        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª –∫–∏–∫–Ω—É—Ç, –∑–Ω–∞—á–∏—Ç –≤—ã—à–µ–ª —Å–∞–º
        embed = create_embed(
            title="üëã –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Å–µ—Ä–≤–µ—Ä",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                      f"{EMOJIS['DOT']} **–ò–º—è:** `{member.name}`\n\n"
                      f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:** <t:{int(member.joined_at.timestamp())}:F>\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–æ–±—ã–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:** `{(datetime.datetime.now(datetime.timezone.utc) - member.joined_at).days} –¥–Ω–µ–π`\n"
                      f"{EMOJIS['DOT']} **–†–æ–ª–∏:** {', '.join(role.mention for role in member.roles[1:]) or '–ù–µ—Ç'}\n"
                      f"{EMOJIS['DOT']} **–û—Å—Ç–∞–ª–æ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** `{member.guild.member_count}`",
            footer={"text": f"ID: {member.id}"}
        )
        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_member_ban(self, guild, user):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–æ–≤"""
        if not self.log_channel:
            return

        try:
            async for entry in guild.audit_logs(limit=1, action=discord.AuditLogAction.ban):
                if entry.target.id == user.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –±–∞–Ω–∞—Ö
        try:
            bans = [ban async for ban in guild.bans()]
            previous_bans = sum(1 for ban in bans if ban.user.id == user.id)
        except discord.Forbidden:
            previous_bans = 0

        embed = create_embed(
            title="üî® –£—á–∞—Å—Ç–Ω–∏–∫ –∑–∞–±–∞–Ω–µ–Ω",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {user.mention} (`{user.id}`)\n"
                      f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention if moderator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`\n\n"
                      f"**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –±–∞–Ω—ã:** `{previous_bans}`\n"
                      f"{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>",
            footer={"text": f"ID: {user.id}"}
        )
        if user.avatar:
            embed.set_thumbnail(url=user.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_member_unban(self, guild, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∞–Ω–æ–≤"""
        embed = create_embed(
            title="üîì –£—á–∞—Å—Ç–Ω–∏–∫ —Ä–∞–∑–±–∞–Ω–µ–Ω",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {user.mention} (`{user.id}`)",
            footer={"text": f"ID: {user.id}"}
        )
        if user.avatar:
            embed.set_thumbnail(url=user.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_channel_create(self, channel):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.log_channel:
            return

        try:
            async for entry in channel.guild.audit_logs(limit=1, action=discord.AuditLogAction.channel_create):
                if entry.target.id == channel.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        channel_info = f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** {channel.mention}\n" \
                      f"{EMOJIS['DOT']} **–¢–∏–ø:** `{str(channel.type)}`\n" \
                      f"{EMOJIS['DOT']} **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{channel.category.name if channel.category else '–ù–µ—Ç'}`\n" \
                      f"{EMOJIS['DOT']} **–ü–æ–∑–∏—Ü–∏—è:** `{channel.position}`\n"

        if isinstance(channel, discord.TextChannel):
            channel_info += f"{EMOJIS['DOT']} **–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º:** `{channel.slowmode_delay}—Å`\n" \
                          f"{EMOJIS['DOT']} **NSFW:** `{'–î–∞' if channel.nsfw else '–ù–µ—Ç'}`\n"
        elif isinstance(channel, discord.VoiceChannel):
            channel_info += f"{EMOJIS['DOT']} **–ë–∏—Ç—Ä–µ–π—Ç:** `{channel.bitrate//1000}kbps`\n" \
                          f"{EMOJIS['DOT']} **–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** `{channel.user_limit or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}`\n"

        embed = create_embed(
            title="üìù –ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω",
            description=f"{channel_info}\n"
                      f"**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**\n"
                      f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞–ª:** {moderator.mention if moderator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
            footer={"text": f"ID: {channel.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_channel_delete(self, channel):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.log_channel:
            return

        try:
            async for entry in channel.guild.audit_logs(limit=1, action=discord.AuditLogAction.channel_delete):
                if entry.target.id == channel.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        channel_info = f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{channel.name}`\n" \
                      f"{EMOJIS['DOT']} **–¢–∏–ø:** `{str(channel.type)}`\n" \
                      f"{EMOJIS['DOT']} **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{channel.category.name if channel.category else '–ù–µ—Ç'}`\n" \
                      f"{EMOJIS['DOT']} **–ü–æ–∑–∏—Ü–∏—è:** `{channel.position}`\n" \
                      f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞–Ω:** <t:{int(channel.created_at.timestamp())}:F>"

        if isinstance(channel, discord.TextChannel):
            channel_info += f"\n{EMOJIS['DOT']} **–¢–µ–º–∞:** `{channel.topic or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`"
            if channel.last_message:
                channel_info += f"\n{EMOJIS['DOT']} **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:** {channel.last_message.author.mention}"

        embed = create_embed(
            title="üóëÔ∏è –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω",
            description=f"{channel_info}\n\n"
                      f"**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**\n"
                      f"{EMOJIS['DOT']} **–£–¥–∞–ª–∏–ª:** {moderator.mention if moderator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
            footer={"text": f"ID: {channel.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_role_create(self, role):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–µ–π"""
        if not self.log_channel:
            return

        try:
            async for entry in role.guild.audit_logs(limit=1, action=discord.AuditLogAction.role_create):
                if entry.target.id == role.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        permissions = []
        for perm, value in role.permissions:
            if value:
                permissions.append(perm)

        embed = create_embed(
            title="üëë –†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞",
            description=f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** {role.mention}\n"
                      f"{EMOJIS['DOT']} **–¶–≤–µ—Ç:** `{role.color}`\n"
                      f"{EMOJIS['DOT']} **–ü–æ–∑–∏—Ü–∏—è:** `{role.position}`\n"
                      f"{EMOJIS['DOT']} **–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ:** `{'–î–∞' if role.hoist else '–ù–µ—Ç'}`\n"
                      f"{EMOJIS['DOT']} **–£–ø–æ–º–∏–Ω–∞–µ–º–∞—è:** `{'–î–∞' if role.mentionable else '–ù–µ—Ç'}`\n"
                      f"{EMOJIS['DOT']} **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:** `{'–î–∞' if role.managed else '–ù–µ—Ç'}`\n\n"
                      f"**üîë –ü—Ä–∞–≤–∞ —Ä–æ–ª–∏:**\n`{', '.join(permissions) or '–ù–µ—Ç –ø—Ä–∞–≤'}`\n\n"
                      f"**üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:**\n"
                      f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞–ª:** {moderator.mention if moderator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
            footer={"text": f"ID: {role.id}"}
        )

        if role.icon:
            embed.set_thumbnail(url=role.icon.url)

        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_role_delete(self, role):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π"""
        if not self.log_channel:
            return

        try:
            async for entry in role.guild.audit_logs(limit=1, action=discord.AuditLogAction.role_delete):
                if entry.target.id == role.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        embed = create_embed(
            title="üóëÔ∏è –†–æ–ª—å —É–¥–∞–ª–µ–Ω–∞",
            description=f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{role.name}`\n"
                      f"{EMOJIS['DOT']} **–¶–≤–µ—Ç:** `{role.color}`\n"
                      f"{EMOJIS['DOT']} **–ü–æ–∑–∏—Ü–∏—è:** `{role.position}`\n"
                      f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞–Ω–∞:** <t:{int(role.created_at.timestamp())}:F>",
            footer={"text": f"ID: {role.id}"}
        )

        if moderator:
            embed.add_field(
                name="üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                value=f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
                inline=False
            )

        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if not self.log_channel:
            return

        if before.channel != after.channel:
            if after.channel and not before.channel:
                action = f"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ {after.channel.mention}"
            elif before.channel and not after.channel:
                action = f"–ø–æ–∫–∏–Ω—É–ª {before.channel.name}"
            else:
                action = f"–ø–µ—Ä–µ—à–µ–ª –∏–∑ {before.channel.name} –≤ {after.channel.mention}"

            embed = create_embed(
                title="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª",
                description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                          f"{EMOJIS['DOT']} **–î–µ–π—Å—Ç–≤–∏–µ:** {action}",
                footer={"text": f"ID: {member.id}"}
            )
            await self.log_event(embed)

        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        changes = []
        if before.deaf != after.deaf:
            changes.append(f"–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º—É—Ç: `{'–í–∫–ª—é—á–µ–Ω' if after.deaf else '–í—ã–∫–ª—é—á–µ–Ω'}`")
        if before.mute != after.mute:
            changes.append(f"–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –∑–∞–≥–ª—É—à–µ–Ω–∏–µ: `{'–í–∫–ª—é—á–µ–Ω–æ' if after.mute else '–í—ã–∫–ª—é—á–µ–Ω–æ'}`")
        if before.self_deaf != after.self_deaf:
            changes.append(f"–õ–∏—á–Ω—ã–π –º—É—Ç: `{'–í–∫–ª—é—á–µ–Ω' if after.self_deaf else '–í—ã–∫–ª—é—á–µ–Ω'}`")
        if before.self_mute != after.self_mute:
            changes.append(f"–õ–∏—á–Ω–æ–µ –∑–∞–≥–ª—É—à–µ–Ω–∏–µ: `{'–í–∫–ª—é—á–µ–Ω–æ' if after.self_mute else '–í—ã–∫–ª—é—á–µ–Ω–æ'}`")
        if before.self_stream != after.self_stream:
            changes.append(f"–°—Ç—Ä–∏–º: `{'–ù–∞—á–∞—Ç' if after.self_stream else '–ó–∞–∫–æ–Ω—á–µ–Ω'}`")
        if before.self_video != after.self_video:
            changes.append(f"–í–∏–¥–µ–æ: `{'–í–∫–ª—é—á–µ–Ω–æ' if after.self_video else '–í—ã–∫–ª—é—á–µ–Ω–æ'}`")
        if before.requested_to_speak_at != after.requested_to_speak_at:
            changes.append(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ: `{'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' if after.requested_to_speak_at else '–û—Ç–º–µ–Ω–µ–Ω'}`")

        if changes:
            embed = create_embed(
                title="üé§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è",
                description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                          f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {after.channel.mention if after.channel else '–ù–µ—Ç'}\n"
                          f"{EMOJIS['DOT']} **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + 
                          "\n".join(f"{EMOJIS['DOT']} {change}" for change in changes),
                footer={"text": f"ID: {member.id}"}
            )
            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_update(self, before, after):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.log_channel:
            return

        changes = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if before.name != after.name:
            changes.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{before.name}` ‚Üí `{after.name}`")
        if before.description != after.description:
            changes.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: `{before.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}` ‚Üí `{after.description or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`")
        if before.icon != after.icon:
            changes.append("–ò–∫–æ–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞")
        if before.banner != after.banner:
            changes.append("–ë–∞–Ω–Ω–µ—Ä –∏–∑–º–µ–Ω–µ–Ω")
        if before.splash != after.splash:
            changes.append("–°–ø–ª–µ—à –∏–∑–º–µ–Ω–µ–Ω")
        if before.discovery_splash != after.discovery_splash:
            changes.append("–°–ø–ª–µ—à –¥–∏—Å–∫–∞–≤–µ—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω")
        if before.owner_id != after.owner_id:
            changes.append(f"–í–ª–∞–¥–µ–ª–µ—Ü: <@{before.owner_id}> ‚Üí <@{after.owner_id}>")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if before.verification_level != after.verification_level:
            changes.append(f"–£—Ä–æ–≤–µ–Ω—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: `{before.verification_level}` ‚Üí `{after.verification_level}`")
        if before.explicit_content_filter != after.explicit_content_filter:
            changes.append(f"–§–∏–ª—å—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: `{before.explicit_content_filter}` ‚Üí `{after.explicit_content_filter}`")
        if before.mfa_level != after.mfa_level:
            changes.append(f"–£—Ä–æ–≤–µ–Ω—å 2FA: `{before.mfa_level}` ‚Üí `{after.mfa_level}`")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if before.default_notifications != after.default_notifications:
            changes.append(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: `{before.default_notifications}` ‚Üí `{after.default_notifications}`")
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        if before.system_channel != after.system_channel:
            changes.append(f"–°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª: {before.system_channel.mention if before.system_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} ‚Üí {after.system_channel.mention if after.system_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        if before.rules_channel != after.rules_channel:
            changes.append(f"–ö–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª: {before.rules_channel.mention if before.rules_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} ‚Üí {after.rules_channel.mention if after.rules_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        if before.public_updates_channel != after.public_updates_channel:
            changes.append(f"–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {before.public_updates_channel.mention if before.public_updates_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} ‚Üí {after.public_updates_channel.mention if after.public_updates_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AFK
        if before.afk_channel != after.afk_channel:
            changes.append(f"AFK –∫–∞–Ω–∞–ª: {before.afk_channel.mention if before.afk_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'} ‚Üí {after.afk_channel.mention if after.afk_channel else '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        if before.afk_timeout != after.afk_timeout:
            changes.append(f"–¢–∞–π–º-–∞—É—Ç AFK: `{before.afk_timeout}—Å` ‚Üí `{after.afk_timeout}—Å`")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É—Å—Ç–æ–≤
        if before.premium_tier != after.premium_tier:
            changes.append(f"–£—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞: `{before.premium_tier}` ‚Üí `{after.premium_tier}`")
        if before.premium_subscription_count != after.premium_subscription_count:
            changes.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Å—Ç–æ–≤: `{before.premium_subscription_count}` ‚Üí `{after.premium_subscription_count}`")
        
        # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è
        if before.preferred_locale != after.preferred_locale:
            changes.append(f"–û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: `{before.preferred_locale}` ‚Üí `{after.preferred_locale}`")
        
        # –§—É–Ω–∫—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
        if before.features != after.features:
            added_features = set(after.features) - set(before.features)
            removed_features = set(before.features) - set(after.features)
            if added_features:
                changes.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏: `{', '.join(added_features)}`")
            if removed_features:
                changes.append(f"–£–¥–∞–ª–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏: `{', '.join(removed_features)}`")

        if changes:
            try:
                async for entry in after.audit_logs(limit=1, action=discord.AuditLogAction.guild_update):
                    moderator = entry.user
                    reason = entry.reason
                    break
            except discord.Forbidden:
                moderator = None
                reason = None

            embed = create_embed(
                title="‚öôÔ∏è –°–µ—Ä–≤–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω",
                description=f"{EMOJIS['DOT']} **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + 
                          "\n".join(f"{EMOJIS['DOT']} {change}" for change in changes)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
            stats = (
                f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** `{after.member_count}`\n"
                f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª–æ–≤:** `{len(after.channels)}`\n"
                f"{EMOJIS['DOT']} **–†–æ–ª–µ–π:** `{len(after.roles)}`\n"
                f"{EMOJIS['DOT']} **–≠–º–æ–¥–∑–∏:** `{len(after.emojis)}`\n"
                f"{EMOJIS['DOT']} **–°—Ç–∏–∫–µ—Ä–æ–≤:** `{len(after.stickers)}`\n"
                f"{EMOJIS['DOT']} **–ë—É—Å—Ç–æ–≤:** `{after.premium_subscription_count}`\n"
                f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞–Ω:** <t:{int(after.created_at.timestamp())}:F>"
            )
            embed.add_field(name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", value=stats, inline=False)

            if moderator:
                embed.add_field(
                    name="üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                    value=f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention}\n"
                          f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
                    inline=False
                )

            if after.icon:
                embed.set_thumbnail(url=after.icon.url)
            if after.banner:
                embed.set_image(url=after.banner.url)

            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_emojis_update(self, guild, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–º–æ–¥–∑–∏"""
        if not self.log_channel:
            return

        # –ù–∞–π—Ç–∏ –Ω–æ–≤—ã–µ —ç–º–æ–¥–∑–∏
        new_emojis = [emoji for emoji in after if emoji not in before]
        # –ù–∞–π—Ç–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
        removed_emojis = [emoji for emoji in before if emoji not in after]

        if new_emojis:
            embed = create_embed(
                title="üòÄ –ù–æ–≤—ã–µ —ç–º–æ–¥–∑–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                description="\n".join(f"{EMOJIS['DOT']} {emoji} `{emoji.name}`" for emoji in new_emojis),
                footer={"text": f"–í—Å–µ–≥–æ —ç–º–æ–¥–∑–∏: {len(after)}"}
            )
            await self.log_event(embed)

        if removed_emojis:
            embed = create_embed(
                title="üóëÔ∏è –≠–º–æ–¥–∑–∏ —É–¥–∞–ª–µ–Ω—ã",
                description="\n".join(f"{EMOJIS['DOT']} `{emoji.name}`" for emoji in removed_emojis),
                footer={"text": f"–í—Å–µ–≥–æ —ç–º–æ–¥–∑–∏: {len(after)}"}
            )
            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_stickers_update(self, guild, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∏–∫–µ—Ä–æ–≤"""
        if not self.log_channel:
            return

        new_stickers = [sticker for sticker in after if sticker not in before]
        removed_stickers = [sticker for sticker in before if sticker not in after]

        if new_stickers:
            embed = create_embed(
                title="üåü –ù–æ–≤—ã–µ —Å—Ç–∏–∫–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã",
                description="\n".join(f"{EMOJIS['DOT']} `{sticker.name}`" for sticker in new_stickers),
                footer={"text": f"–í—Å–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {len(after)}"}
            )
            await self.log_event(embed)

        if removed_stickers:
            embed = create_embed(
                title="üóëÔ∏è –°—Ç–∏–∫–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã",
                description="\n".join(f"{EMOJIS['DOT']} `{sticker.name}`" for sticker in removed_stickers),
                footer={"text": f"–í—Å–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: {len(after)}"}
            )
            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if not self.log_channel:
            return

        changes = []
        moderator = None
        reason = None
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
        if before.nick != after.nick:
            changes.append(f"–ù–∏–∫–Ω–µ–π–º: `{before.nick or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}` ‚Üí `{after.nick or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`")

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–µ–π
        if before.roles != after.roles:
            added_roles = [role for role in after.roles if role not in before.roles]
            removed_roles = [role for role in before.roles if role not in after.roles]
            
            if added_roles or removed_roles:
                try:
                    async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_role_update):
                        if entry.target.id == after.id:
                            moderator = entry.user
                            reason = entry.reason
                            break
                except discord.Forbidden:
                    pass
            
            if added_roles:
                changes.append(f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ä–æ–ª–∏: {', '.join(role.mention for role in added_roles)}")
            if removed_roles:
                changes.append(f"–£–¥–∞–ª–µ–Ω—ã —Ä–æ–ª–∏: {', '.join(role.mention for role in removed_roles)}")

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—É—Å—Ç–∞
        if before.premium_since != after.premium_since:
            if after.premium_since:
                changes.append(f"–ù–∞—á–∞–ª –±—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: <t:{int(after.premium_since.timestamp())}:F>")
            else:
                changes.append("–ü—Ä–µ–∫—Ä–∞—Ç–∏–ª –±—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞
        if before.timed_out_until != after.timed_out_until:
            if after.timed_out_until:
                changes.append(f"–í—ã–¥–∞–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ: <t:{int(after.timed_out_until.timestamp())}:F>")
            else:
                changes.append("–¢–∞–π–º–∞—É—Ç —Å–Ω—è—Ç")

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–ª–∞–≥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if before.flags != after.flags:
            changes.append("–ò–∑–º–µ–Ω–µ–Ω—ã —Ñ–ª–∞–≥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞")

        if changes:
            embed = create_embed(
                title="üë§ –£—á–∞—Å—Ç–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω",
                description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {after.mention} (`{after.id}`)\n"
                          f"{EMOJIS['DOT']} **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + 
                          "\n".join(f"{EMOJIS['DOT']} {change}" for change in changes)
            )

            if moderator:
                embed.add_field(
                    name="üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                    value=f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention}\n"
                          f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
                    inline=False
                )

            if after.avatar:
                embed.set_thumbnail(url=after.avatar.url)

            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_channel_update(self, before: discord.abc.GuildChannel, after: discord.abc.GuildChannel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞–Ω–∞–ª–æ–≤"""
        if not self.log_channel:
            return

        moderator = None
        try:
            async for entry in before.guild.audit_logs(limit=1, action=discord.AuditLogAction.channel_update):
                if entry.target.id == before.id:
                    moderator = entry.user
                    break
        except discord.Forbidden:
            pass

        embed = create_embed(
            title="üìù –ö–∞–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω",
            description=f"–ö–∞–Ω–∞–ª: {after.mention}"
        )

        changes = []

        if before.name != after.name:
            changes.append(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {before.name} ‚ûú {after.name}")

        if isinstance(before, discord.TextChannel) and isinstance(after, discord.TextChannel):
            if before.topic != after.topic:
                changes.append(f"**–¢–µ–º–∞:** {before.topic or '–ù–µ—Ç'} ‚ûú {after.topic or '–ù–µ—Ç'}")
            if before.slowmode_delay != after.slowmode_delay:
                changes.append(f"**–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º:** {before.slowmode_delay}—Å ‚ûú {after.slowmode_delay}—Å")
            if before.nsfw != after.nsfw:
                changes.append(f"**NSFW:** {before.nsfw} ‚ûú {after.nsfw}")

        if isinstance(before, discord.VoiceChannel) and isinstance(after, discord.VoiceChannel):
            if before.bitrate != after.bitrate:
                changes.append(f"**–ë–∏—Ç—Ä–µ–π—Ç:** {before.bitrate//1000}kbps ‚ûú {after.bitrate//1000}kbps")
            if before.user_limit != after.user_limit:
                changes.append(f"**–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {before.user_limit or '–ù–µ—Ç'} ‚ûú {after.user_limit or '–ù–µ—Ç'}")

        if before.category != after.category:
            changes.append(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {before.category or '–ù–µ—Ç'} ‚ûú {after.category or '–ù–µ—Ç'}")

        if before.position != after.position:
            changes.append(f"**–ü–æ–∑–∏—Ü–∏—è:** {before.position} ‚ûú {after.position}")

        if changes:
            embed.add_field(name="–ò–∑–º–µ–Ω–µ–Ω–∏—è", value="\n".join(changes), inline=False)
            
            if moderator:
                embed.add_field(name="–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", value=f"{moderator.mention} ({moderator.id})", inline=False)
            
            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_message_delete(self, message: discord.Message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.log_channel or not message.guild:
            return

        if message.author.bot and message.author != self.bot.user:
            return

        moderator = None
        try:
            async for entry in message.guild.audit_logs(limit=1, action=discord.AuditLogAction.message_delete):
                if entry.target.id == message.author.id and (datetime.datetime.now(datetime.timezone.utc) - entry.created_at).total_seconds() < 5:
                    moderator = entry.user
                    break
        except discord.Forbidden:
            pass

        embed = create_embed(
            title="üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
            description=f"**–ê–≤—Ç–æ—Ä:** {message.author.mention} ({message.author.id})\n"
                       f"**–ö–∞–Ω–∞–ª:** {message.channel.mention}\n"
                       f"**–°–æ–∑–¥–∞–Ω–æ:** <t:{int(message.created_at.timestamp())}:R>"
        )

        if message.content:
            if len(message.content) > 1024:
                embed.add_field(name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", value=f"{message.content[:1021]}...", inline=False)
            else:
                embed.add_field(name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", value=message.content, inline=False)

        if message.attachments:
            attachments = "\n".join([f"[{a.filename}]({a.proxy_url})" for a in message.attachments])
            if len(attachments) > 1024:
                attachments = attachments[:1021] + "..."
            embed.add_field(name="–í–ª–æ–∂–µ–Ω–∏—è", value=attachments, inline=False)

        if moderator and moderator != message.author:
            embed.add_field(name="–£–¥–∞–ª–∏–ª", value=f"{moderator.mention} ({moderator.id})", inline=False)

        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_role_update(self, before: discord.Role, after: discord.Role):
        if not self.bot.is_ready():
            return

        moderator = None
        reason = None

        if before.name != after.name or before.color != after.color or before.permissions != after.permissions:
            try:
                async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.role_update):
                    moderator = entry.user
                    reason = entry.reason
                    break
            except discord.Forbidden:
                pass

            embed = create_embed(title=f"{EMOJIS['DOT']} –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞", color=after.color)
            
            if moderator:
                embed.set_author(name=f"{moderator.name}", icon_url=moderator.display_avatar.url)
            
            if before.name != after.name:
                embed.add_field(name="–ù–∞–∑–≤–∞–Ω–∏–µ", value=f"**–î–æ:** {before.name}\n**–ü–æ—Å–ª–µ:** {after.name}", inline=False)
            
            if before.color != after.color:
                embed.add_field(name="–¶–≤–µ—Ç", value=f"**–î–æ:** {before.color}\n**–ü–æ—Å–ª–µ:** {after.color}", inline=False)
            
            if before.permissions != after.permissions:
                added_perms = [perm[0] for perm in after.permissions if perm not in before.permissions and perm[1]]
                removed_perms = [perm[0] for perm in before.permissions if perm not in after.permissions and perm[1]]
                
                if added_perms:
                    embed.add_field(name="–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞", value="\n".join(f"‚úÖ {perm}" for perm in added_perms), inline=False)
                if removed_perms:
                    embed.add_field(name="–£–¥–∞–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞", value="\n".join(f"‚ùå {perm}" for perm in removed_perms), inline=False)
            
            if reason:
                embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason, inline=False)
            
            embed.set_footer(text=f"ID: {after.id}")
            embed.timestamp = discord.utils.utcnow()
            
            await self.send_log(after.guild, embed, "role_logs")

    @commands.Cog.listener()
    async def on_thread_create(self, thread):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–¥–æ–≤"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üßµ –¢—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω",
            description=f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** {thread.mention}\n"
                      f"{EMOJIS['DOT']} **–í–ª–∞–¥–µ–ª–µ—Ü:** {thread.owner.mention if thread.owner else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞–Ω–∞–ª:** {thread.parent.mention}\n"
                      f"{EMOJIS['DOT']} **–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º:** `{thread.slowmode_delay}—Å`\n"
                      f"{EMOJIS['DOT']} **–ê–≤—Ç–æ–∞—Ä—Ö–∏–≤–∞—Ü–∏—è:** `{thread.auto_archive_duration} –º–∏–Ω—É—Ç`",
            footer={"text": f"ID: {thread.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_thread_delete(self, thread):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–¥–æ–≤"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üóëÔ∏è –¢—Ä–µ–¥ —É–¥–∞–ª–µ–Ω",
            description=f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{thread.name}`\n"
                      f"{EMOJIS['DOT']} **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞–Ω–∞–ª:** {thread.parent.mention if thread.parent else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
            footer={"text": f"ID: {thread.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_thread_update(self, before, after):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç—Ä–µ–¥–æ–≤"""
        if not self.log_channel:
            return

        changes = []
        
        if before.name != after.name:
            changes.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{before.name}` ‚Üí `{after.name}`")
        if before.archived != after.archived:
            changes.append(f"–°—Ç–∞—Ç—É—Å –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: `{'–î–∞' if after.archived else '–ù–µ—Ç'}`")
        if before.locked != after.locked:
            changes.append(f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: `{'–î–∞' if after.locked else '–ù–µ—Ç'}`")
        if before.slowmode_delay != after.slowmode_delay:
            changes.append(f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: `{before.slowmode_delay}—Å` ‚Üí `{after.slowmode_delay}—Å`")
        if before.auto_archive_duration != after.auto_archive_duration:
            changes.append(f"–í—Ä–µ–º—è –∞–≤—Ç–æ–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: `{before.auto_archive_duration}` ‚Üí `{after.auto_archive_duration}`")
        if before.pinned != after.pinned:
            changes.append(f"–ó–∞–∫—Ä–µ–ø–ª–µ–Ω: `{'–î–∞' if after.pinned else '–ù–µ—Ç'}`")

        if changes:
            try:
                async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.thread_update):
                    if entry.target.id == after.id:
                        moderator = entry.user
                        reason = entry.reason
                        break
            except discord.Forbidden:
                moderator = None
                reason = None

            embed = create_embed(
                title="üßµ –¢—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω",
                description=f"{EMOJIS['DOT']} **–¢—Ä–µ–¥:** {after.mention}\n"
                          f"{EMOJIS['DOT']} **–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–∞–Ω–∞–ª:** {after.parent.mention}\n"
                          f"{EMOJIS['DOT']} **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + 
                          "\n".join(f"{EMOJIS['DOT']} {change}" for change in changes)
            )

            thread_info = (
                f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:** `{len(after.members)}`\n"
                f"{EMOJIS['DOT']} **–°–æ–æ–±—â–µ–Ω–∏–π:** `{after.message_count}`\n"
                f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞–Ω:** <t:{int(after.created_at.timestamp())}:F>"
            )
            embed.add_field(name="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", value=thread_info, inline=False)

            if moderator:
                embed.add_field(
                    name="üëÆ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
                    value=f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention}\n"
                          f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
                    inline=False
                )

            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_invite_create(self, invite):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        if not self.log_channel:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
        inviter_info = ""
        if invite.inviter:
            roles = [role.mention for role in invite.inviter.roles if not role.is_default()]
            roles_str = ", ".join(roles) if roles else "–ù–µ—Ç"
            inviter_info = (
                f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {invite.inviter.mention} (`{invite.inviter.id}`)\n"
                f"{EMOJIS['DOT']} **–ù–∏–∫–Ω–µ–π–º —Å–æ–∑–¥–∞—Ç–µ–ª—è:** `{invite.inviter.display_name}`\n"
                f"{EMOJIS['DOT']} **–†–æ–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è:** {roles_str}\n"
                f"{EMOJIS['DOT']} **–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω:** <t:{int(invite.inviter.created_at.timestamp())}:F>\n"
                f"{EMOJIS['DOT']} **–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É:** <t:{int(invite.inviter.joined_at.timestamp())}:F>\n"
            )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
        channel_info = (
            f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {invite.channel.mention} (`{invite.channel.id}`)\n"
            f"{EMOJIS['DOT']} **–¢–∏–ø –∫–∞–Ω–∞–ª–∞:** `{str(invite.channel.type)}`\n"
            f"{EMOJIS['DOT']} **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{invite.channel.category.name if invite.channel.category else '–ù–µ—Ç'}`\n"
        )
        
        if isinstance(invite.channel, discord.TextChannel):
            channel_info += (
                f"{EMOJIS['DOT']} **–¢–µ–º–∞ –∫–∞–Ω–∞–ª–∞:** `{invite.channel.topic or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}`\n"
                f"{EMOJIS['DOT']} **–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º:** `{invite.channel.slowmode_delay}—Å`\n"
                f"{EMOJIS['DOT']} **NSFW:** `{'–î–∞' if invite.channel.nsfw else '–ù–µ—Ç'}`\n"
            )
        elif isinstance(invite.channel, discord.VoiceChannel):
            channel_info += (
                f"{EMOJIS['DOT']} **–ë–∏—Ç—Ä–µ–π—Ç:** `{invite.channel.bitrate//1000}kbps`\n"
                f"{EMOJIS['DOT']} **–õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** `{invite.channel.user_limit or '–ë–µ–∑ –ª–∏–º–∏—Ç–∞'}`\n"
                f"{EMOJIS['DOT']} **–†–µ–≥–∏–æ–Ω:** `{invite.channel.rtc_region or '–ê–≤—Ç–æ'}`\n"
            )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
        invite_info = (
            f"{EMOJIS['DOT']} **–ö–æ–¥:** `{invite.code}`\n"
            f"{EMOJIS['DOT']} **–°—Å—ã–ª–∫–∞:** `https://discord.gg/{invite.code}`\n"
            f"{EMOJIS['DOT']} **–í—Ä–µ–º–µ–Ω–Ω–æ–µ:** `{'–î–∞' if invite.temporary else '–ù–µ—Ç'}`\n"
            f"{EMOJIS['DOT']} **–ú–∞–∫—Å–∏–º—É–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:** `{invite.max_uses if invite.max_uses else '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'}`\n"
            f"{EMOJIS['DOT']} **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** `{invite.max_age if invite.max_age else '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ'} —Å–µ–∫—É–Ω–¥`\n"
            f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞–Ω–æ:** <t:{int(datetime.datetime.now().timestamp())}:F>\n"
        )

        embed = create_embed(
            title="üì® –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
            description=f"**üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ:**\n{inviter_info}\n"
                      f"**üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:**\n{channel_info}\n"
                      f"**üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏:**\n{invite_info}",
            footer={"text": f"ID –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite.id if hasattr(invite, 'id') else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}"}
        )

        if invite.inviter and invite.inviter.avatar:
            embed.set_thumbnail(url=invite.inviter.avatar.url)

        await self.log_event(embed)

    async def track_invite_uses(self):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        self.invite_uses = {}
        try:
            for guild in self.bot.guilds:
                self.invite_uses[guild.id] = {
                    invite.code: {
                        'uses': invite.uses,
                        'inviter': invite.inviter,
                        'channel': invite.channel,
                        'created_at': invite.created_at,
                        'max_uses': invite.max_uses,
                        'temporary': invite.temporary
                    } async for invite in guild.invites()
                }
        except discord.Forbidden:
            pass

    @commands.Cog.listener()
    async def on_invite_delete(self, invite):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üóëÔ∏è –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
            description=f"{EMOJIS['DOT']} **–ö–æ–¥:** `{invite.code}`\n"
                      f"{EMOJIS['DOT']} **–°—Å—ã–ª–∫–∞:** `https://discord.gg/{invite.code}`\n"
                      f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {invite.channel.mention} (`{invite.channel.id}`)\n"
                      f"{EMOJIS['DOT']} **–£–¥–∞–ª–µ–Ω–æ:** <t:{int(datetime.datetime.now().timestamp())}:F>",
            footer={"text": f"–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite.code}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_stage_instance_create(self, stage_instance):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–±—É–Ω"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üé≠ –¢—Ä–∏–±—É–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞",
            description=f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{stage_instance.topic}`\n"
                      f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {stage_instance.channel.mention}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:** `{'–ü—É–±–ª–∏—á–Ω–∞—è' if stage_instance.discoverable_disabled else '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è'}`",
            footer={"text": f"ID: {stage_instance.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_stage_instance_delete(self, stage_instance):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∏–±—É–Ω"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üóëÔ∏è –¢—Ä–∏–±—É–Ω–∞ —É–¥–∞–ª–µ–Ω–∞",
            description=f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{stage_instance.topic}`\n"
                      f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {stage_instance.channel.mention}",
            footer={"text": f"ID: {stage_instance.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_stage_instance_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç—Ä–∏–±—É–Ω"""
        if not self.log_channel:
            return

        changes = []
        if before.topic != after.topic:
            changes.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{before.topic}` ‚Üí `{after.topic}`")
        if before.discoverable_disabled != after.discoverable_disabled:
            changes.append(f"–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å: `{'–ü—É–±–ª–∏—á–Ω–∞—è' if not after.discoverable_disabled else '–ü—Ä–∏–≤–∞—Ç–Ω–∞—è'}`")

        if changes:
            embed = create_embed(
                title="üé≠ –¢—Ä–∏–±—É–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                description=f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {after.channel.mention}\n"
                          f"{EMOJIS['DOT']} **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + 
                          "\n".join(f"{EMOJIS['DOT']} {change}" for change in changes),
                footer={"text": f"ID: {after.id}"}
            )
            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_scheduled_event_create(self, event):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        if not self.log_channel:
            return

        location = event.location if isinstance(event.location, str) else "–ù–µ—Ç"
        if event.channel:
            location = event.channel.mention

        embed = create_embed(
            title="üìÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ",
            description=f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{event.name}`\n"
                      f"{EMOJIS['DOT']} **–û–ø–∏—Å–∞–Ω–∏–µ:** `{event.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}`\n"
                      f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {event.creator.mention if event.creator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–õ–æ–∫–∞—Ü–∏—è:** {location}\n"
                      f"{EMOJIS['DOT']} **–ù–∞—á–∞–ª–æ:** <t:{int(event.start_time.timestamp())}:F>\n"
                      f"{EMOJIS['DOT']} **–ö–æ–Ω–µ—Ü:** {f'<t:{int(event.end_time.timestamp())}:F>' if event.end_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–¢–∏–ø:** `{event.entity_type}`\n"
                      f"{EMOJIS['DOT']} **–°—Ç–∞—Ç—É—Å:** `{event.status}`\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å:** `{'–ü—É–±–ª–∏—á–Ω–æ–µ' if event.privacy_level == discord.GuildScheduledEventPrivacyLevel.guild_only else '–ü—Ä–∏–≤–∞—Ç–Ω–æ–µ'}`",
            footer={"text": f"ID: {event.id}"}
        )

        if event.image:
            embed.set_thumbnail(url=event.image.url)

        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_scheduled_event_delete(self, event):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üóëÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ",
            description=f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{event.name}`\n"
                      f"{EMOJIS['DOT']} **–°–æ–∑–¥–∞—Ç–µ–ª—å:** {event.creator.mention if event.creator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
            footer={"text": f"ID: {event.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_scheduled_event_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if not self.log_channel:
            return

        changes = []
        if before.name != after.name:
            changes.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: `{before.name}` ‚Üí `{after.name}`")
        if before.description != after.description:
            changes.append(f"–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")
        if before.start_time != after.start_time:
            changes.append(f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <t:{int(before.start_time.timestamp())}:F> ‚Üí <t:{int(after.start_time.timestamp())}:F>")
        if before.end_time != after.end_time:
            changes.append(f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ")
        if before.location != after.location:
            changes.append(f"–õ–æ–∫–∞—Ü–∏—è: `{before.location}` ‚Üí `{after.location}`")
        if before.status != after.status:
            changes.append(f"–°—Ç–∞—Ç—É—Å: `{before.status}` ‚Üí `{after.status}`")
        if before.channel != after.channel:
            changes.append(f"–ö–∞–Ω–∞–ª: {before.channel.mention if before.channel else '–ù–µ —É–∫–∞–∑–∞–Ω'} ‚Üí {after.channel.mention if after.channel else '–ù–µ —É–∫–∞–∑–∞–Ω'}")

        if changes:
            embed = create_embed(
                title="üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                description=f"{EMOJIS['DOT']} **–°–æ–±—ã—Ç–∏–µ:** `{after.name}`\n"
                          f"{EMOJIS['DOT']} **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + 
                          "\n".join(f"{EMOJIS['DOT']} {change}" for change in changes),
                footer={"text": f"ID: {after.id}"}
            )
            if after.image:
                embed.set_thumbnail(url=after.image.url)
            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_scheduled_event_user_add(self, event, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–±—ã—Ç–∏—è–º"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–æ–±—ã—Ç–∏—é",
            description=f"{EMOJIS['DOT']} **–°–æ–±—ã—Ç–∏–µ:** `{event.name}`\n"
                      f"{EMOJIS['DOT']} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.mention} (`{user.id}`)\n"
                      f"{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>",
            footer={"text": f"ID —Å–æ–±—ã—Ç–∏—è: {event.id}"}
        )
        if user.avatar:
            embed.set_thumbnail(url=user.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_scheduled_event_user_remove(self, event, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª —Å–æ–±—ã—Ç–∏–µ",
            description=f"{EMOJIS['DOT']} **–°–æ–±—ã—Ç–∏–µ:** `{event.name}`\n"
                      f"{EMOJIS['DOT']} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user.mention} (`{user.id}`)\n"
                      f"{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>",
            footer={"text": f"ID —Å–æ–±—ã—Ç–∏—è: {event.id}"}
        )
        if user.avatar:
            embed.set_thumbnail(url=user.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_integration_create(self, integration):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üîó –ù–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞",
            description=f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{integration.name}`\n"
                      f"{EMOJIS['DOT']} **–¢–∏–ø:** `{integration.type}`\n"
                      f"{EMOJIS['DOT']} **–í–∫–ª—é—á–µ–Ω–∞:** `{'–î–∞' if integration.enabled else '–ù–µ—Ç'}`\n"
                      f"{EMOJIS['DOT']} **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è:** `{'–î–∞' if integration.syncing else '–ù–µ—Ç'}`\n"
                      f"{EMOJIS['DOT']} **–†–æ–ª—å:** {integration.role.mention if integration.role else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}",
            footer={"text": f"ID: {integration.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_integration_update(self, integration):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        if not self.log_channel:
            return

        try:
            description = [
                f"{EMOJIS['DOT']} **–ù–∞–∑–≤–∞–Ω–∏–µ:** `{integration.name}`",
                f"{EMOJIS['DOT']} **–¢–∏–ø:** `{integration.type}`",
                f"{EMOJIS['DOT']} **–í–∫–ª—é—á–µ–Ω–∞:** `{'–î–∞' if getattr(integration, 'enabled', False) else '–ù–µ—Ç'}`"
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if hasattr(integration, 'syncing'):
                description.append(f"{EMOJIS['DOT']} **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è:** `{'–î–∞' if integration.syncing else '–ù–µ—Ç'}`")
            
            if hasattr(integration, 'role') and integration.role:
                description.append(f"{EMOJIS['DOT']} **–†–æ–ª—å:** {integration.role.mention}")
            
            if hasattr(integration, 'synced_at') and integration.synced_at:
                description.append(f"{EMOJIS['DOT']} **–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:** <t:{int(integration.synced_at.timestamp())}:F>")
            
            if hasattr(integration, 'expire_behavior'):
                description.append(f"{EMOJIS['DOT']} **–ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏:** `{integration.expire_behavior}`")
            
            if hasattr(integration, 'expire_grace_period'):
                description.append(f"{EMOJIS['DOT']} **–õ—å–≥–æ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥:** `{integration.expire_grace_period} –¥–Ω–µ–π`")
            
            if hasattr(integration, 'user') and integration.user:
                description.append(f"{EMOJIS['DOT']} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {integration.user.mention}")
            
            if hasattr(integration, 'account') and integration.account:
                description.append(f"{EMOJIS['DOT']} **–ê–∫–∫–∞—É–Ω—Ç:** `{integration.account.name}`")

            embed = create_embed(
                title="üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                description="\n".join(description),
                footer={"text": f"ID: {integration.id}"}
            )
            
            await self.log_event(embed)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            if hasattr(e, '__traceback__'):
                print(''.join(traceback.format_tb(e.__traceback__)))

    @commands.Cog.listener()
    async def on_webhooks_update(self, channel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ–±—Ö—É–∫–æ–≤"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üîß –í–µ–±—Ö—É–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {channel.mention}\n"
                      f"{EMOJIS['DOT']} **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** `{channel.category}`\n"
                      f"{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>",
            footer={"text": f"ID –∫–∞–Ω–∞–ª–∞: {channel.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_member_timeout(self, member, until):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–π–º-–∞—É—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if not self.log_channel:
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∞—É–¥–∏—Ç –ª–æ–≥–æ–≤
        try:
            async for entry in member.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_update):
                if entry.target.id == member.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        duration = until - datetime.datetime.now(datetime.timezone.utc)
        duration_str = f"{duration.days} –¥–Ω–µ–π, {duration.seconds // 3600} —á–∞—Å–æ–≤, {(duration.seconds % 3600) // 60} –º–∏–Ω—É—Ç"

        embed = create_embed(
            title="‚è∞ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–ª—É—á–∏–ª —Ç–∞–π–º-–∞—É—Ç",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                      f"{EMOJIS['DOT']} **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** `{duration_str}`\n"
                      f"{EMOJIS['DOT']} **–î–æ:** <t:{int(until.timestamp())}:F>\n"
                      f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention if moderator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
            footer={"text": f"ID: {member.id}"}
        )
        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_member_timeout_remove(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–Ω—è—Ç–∏—è —Ç–∞–π–º-–∞—É—Ç–æ–≤"""
        if not self.log_channel:
            return

        try:
            async for entry in member.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_update):
                if entry.target.id == member.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        embed = create_embed(
            title="‚è∞ –¢–∞–π–º-–∞—É—Ç —Å–Ω—è—Ç",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                      f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention if moderator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
            footer={"text": f"ID: {member.id}"}
        )
        if member.avatar:
            embed.set_thumbnail(url=member.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_member_nick_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∏–∫–Ω–µ–π–º–∞"""
        if not self.log_channel:
            return

        try:
            async for entry in after.guild.audit_logs(limit=1, action=discord.AuditLogAction.member_update):
                if entry.target.id == after.id:
                    moderator = entry.user
                    reason = entry.reason
                    break
        except discord.Forbidden:
            moderator = None
            reason = None

        embed = create_embed(
            title="üìù –ù–∏–∫–Ω–µ–π–º –∏–∑–º–µ–Ω–µ–Ω",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {after.mention} (`{after.id}`)\n"
                      f"{EMOJIS['DOT']} **–°—Ç–∞—Ä—ã–π –Ω–∏–∫–Ω–µ–π–º:** `{before.display_name}`\n"
                      f"{EMOJIS['DOT']} **–ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:** `{after.display_name}`\n"
                      f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention if moderator else '–°–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`",
            footer={"text": f"ID: {after.id}"}
        )
        if after.avatar:
            embed.set_thumbnail(url=after.avatar.url)
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_user_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.log_channel:
            return

        changes = []
        if before.name != after.name:
            changes.append(f"–ò–º—è: `{before.name}` ‚Üí `{after.name}`")
        if before.discriminator != after.discriminator:
            changes.append(f"–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä: `{before.discriminator}` ‚Üí `{after.discriminator}`")
        if before.avatar != after.avatar:
            changes.append("–ê–≤–∞—Ç–∞—Ä –∏–∑–º–µ–Ω–µ–Ω")
        if before.banner != after.banner:
            changes.append("–ë–∞–Ω–Ω–µ—Ä –∏–∑–º–µ–Ω–µ–Ω")

        if changes:
            embed = create_embed(
                title="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
                description=f"{EMOJIS['DOT']} **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {after.mention} (`{after.id}`)\n"
                          f"{EMOJIS['DOT']} **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + 
                          "\n".join(f"{EMOJIS['DOT']} {change}" for change in changes),
                footer={"text": f"ID: {after.id}"}
            )
            if after.avatar:
                embed.set_thumbnail(url=after.avatar.url)
            if after.banner:
                embed.set_image(url=after.banner.url)
            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_channel_pins_update(self, channel, last_pin):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.log_channel:
            return

        try:
            pins = await channel.pins()
            pin_count = len(pins)
            latest_pin = pins[0] if pins else None
        except discord.Forbidden:
            pin_count = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
            latest_pin = None

        embed = create_embed(
            title="üìå –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {channel.mention}\n"
                      f"{EMOJIS['DOT']} **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö:** `{pin_count}`\n"
                      f"{EMOJIS['DOT']} **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** <t:{int(datetime.datetime.now().timestamp())}:F>",
            footer={"text": f"ID –∫–∞–Ω–∞–ª–∞: {channel.id}"}
        )

        if latest_pin:
            embed.add_field(
                name="üìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                value=f"{EMOJIS['DOT']} **–ê–≤—Ç–æ—Ä:** {latest_pin.author.mention}\n"
                      f"{EMOJIS['DOT']} **–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:** ```\n{latest_pin.content[:1000]}```",
                inline=False
            )

        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_guild_integrations_update(self, guild):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.log_channel:
            return

        try:
            integrations = await guild.integrations()
            integration_list = "\n".join(f"{EMOJIS['DOT']} `{i.name}` ({i.type})" for i in integrations)
        except discord.Forbidden:
            integration_list = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–ø–∏—Å–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"

        embed = create_embed(
            title="üîÑ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            description=f"{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>\n"
                      f"{EMOJIS['DOT']} **–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:**\n{integration_list}",
            footer={"text": f"ID —Å–µ—Ä–≤–µ—Ä–∞: {guild.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_thread_member_join(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ —Ç—Ä–µ–¥–∞–º"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üßµ –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Ç—Ä–µ–¥—É",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                      f"{EMOJIS['DOT']} **–¢—Ä–µ–¥:** {member.thread.mention}\n"
                      f"{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>",
            footer={"text": f"ID —Ç—Ä–µ–¥–∞: {member.thread.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_thread_member_remove(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ç—Ä–µ–¥–æ–≤"""
        if not self.log_channel:
            return

        embed = create_embed(
            title="üßµ –£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —Ç—Ä–µ–¥",
            description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {member.mention} (`{member.id}`)\n"
                      f"{EMOJIS['DOT']} **–¢—Ä–µ–¥:** {member.thread.mention}\n"
                      f"{EMOJIS['DOT']} **–í—Ä–µ–º—è:** <t:{int(datetime.datetime.now().timestamp())}:F>",
            footer={"text": f"ID —Ç—Ä–µ–¥–∞: {member.thread.id}"}
        )
        await self.log_event(embed)

    @commands.Cog.listener()
    async def on_thread_member_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—Ä–µ–¥–∞—Ö"""
        if not self.log_channel:
            return

        changes = []
        if before.join_timestamp != after.join_timestamp:
            changes.append(f"–í—Ä–µ–º—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: <t:{int(before.join_timestamp.timestamp())}:F> ‚Üí <t:{int(after.join_timestamp.timestamp())}:F>")

        if changes:
            embed = create_embed(
                title="üßµ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç—Ä–µ–¥–µ",
                description=f"{EMOJIS['DOT']} **–£—á–∞—Å—Ç–Ω–∏–∫:** {after.mention} (`{after.id}`)\n"
                          f"{EMOJIS['DOT']} **–¢—Ä–µ–¥:** {after.thread.mention}\n"
                          f"{EMOJIS['DOT']} **–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + 
                          "\n".join(f"{EMOJIS['DOT']} {change}" for change in changes),
                footer={"text": f"ID —Ç—Ä–µ–¥–∞: {after.thread.id}"}
            )
            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_app_command_error(self, interaction: discord.Interaction, error):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ slash-–∫–æ–º–∞–Ω–¥"""
        if self.log_channel:
            error_trace = ''.join(traceback.format_exception(type(error), error, error.__traceback__))
            await self.log_channel.send(f"<@{self.owner_id}>, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
            embed = create_embed(
                title="‚ö†Ô∏è –û—à–∏–±–∫–∞ slash-–∫–æ–º–∞–Ω–¥—ã", 
                description=f"{EMOJIS['DOT']} **–ö–æ–º–∞–Ω–¥–∞:** `/{interaction.command.parent.name if interaction.command.parent else ''}{' ' if interaction.command.parent else ''}{interaction.command.name}`\n"
                          f"{EMOJIS['DOT']} **–ê–≤—Ç–æ—Ä:** {interaction.user.mention} (`{interaction.user.id}`)\n"
                          f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {interaction.channel.mention}\n"
                          f"{EMOJIS['DOT']} **–û—à–∏–±–∫–∞:**\n```py\n{error_trace[:1900]}```"
            )
            await self.log_event(embed)

    @commands.Cog.listener()
    async def on_bulk_message_delete(self, messages):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.log_channel or len(messages) < 2:
            return

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–∫–ª—é—á–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤
        filtered_messages = [msg for msg in messages if not msg.author.bot or msg.author == self.bot.user]
        
        if not filtered_messages:
            return

        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content = []
        content.append(f"–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞: #{filtered_messages[0].channel.name}")
        content.append(f"–í—Ä–µ–º—è: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        content.append("-" * 50 + "\n")
        
        for message in sorted(filtered_messages, key=lambda m: m.created_at):
            content.append(f"[{message.created_at.strftime('%d/%m/%Y - %H:%M:%S')}] {message.author} ({message.author.id}): {message.content}")
            if message.attachments:
                content.append(f"–í–ª–æ–∂–µ–Ω–∏—è: {', '.join([a.url for a in message.attachments])}")
            if message.embeds:
                content.append(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–±–µ–¥–æ–≤: {len(message.embeds)}")
            content.append("")

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        file_content = "\n".join(content)
        file = discord.File(
            io.BytesIO(file_content.encode('utf-8')),
            filename=f"DeletedMessages_{datetime.datetime.now().strftime('%Y-%m-%dT%H-%M-%S')}.txt"
        )

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ
        try:
            async for entry in filtered_messages[0].guild.audit_logs(limit=1, action=discord.AuditLogAction.message_bulk_delete):
                moderator = entry.user
                reason = entry.reason
                break
        except discord.Forbidden:
            moderator = None
            reason = None

        embed = create_embed(
            title="üóëÔ∏è –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π",
            description=f"{EMOJIS['DOT']} **–ö–∞–Ω–∞–ª:** {filtered_messages[0].channel.mention}\n"
                      f"{EMOJIS['DOT']} **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:** `{len(filtered_messages)}`\n"
                      f"{EMOJIS['DOT']} **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator.mention if moderator else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                      f"{EMOJIS['DOT']} **–ü—Ä–∏—á–∏–Ω–∞:** `{reason or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`\n\n"
                      f"üìé –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ.",
            footer={"text": f"ID –∫–∞–Ω–∞–ª–∞: {filtered_messages[0].channel.id}"}
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤
        await self.log_event(embed, file=file)

async def setup(bot):
    await bot.add_cog(Logs(bot)) 