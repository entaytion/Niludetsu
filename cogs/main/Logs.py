"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""
import discord
from discord.ext import commands
from discord import app_commands
from typing import Optional
import asyncio
import inspect

from Niludetsu import (
    Embed,
    Emojis,
    admin_only,
    Database,
    Tables,
    ChannelLogger,
    EmojiLogger,
    ErrorLogger,
    EventLogger,
    InviteLogger,
    MessageLogger,
    PollLogger,
    RoleLogger,
    ServerLogger,
    SoundboardLogger,
    StageLogger,
    StickerLogger,
    ThreadLogger,
    UserLogger,
    VoiceLogger,
    WebhookLogger,
    AutoModLogger,
    ApplicationLogger,
    EntitlementLogger,
    LoggingState
)

class Logs(commands.Cog):
    LOGGER_CLASSES = {
        'channels': ChannelLogger,
        'emojis': EmojiLogger,
        'errors': ErrorLogger,
        'events': EventLogger,
        'invites': InviteLogger,
        'messages': MessageLogger,
        'polls': PollLogger,
        'roles': RoleLogger,
        'server': ServerLogger,
        'soundboards': SoundboardLogger,
        'stage': StageLogger,
        'stickers': StickerLogger,
        'threads': ThreadLogger,
        'users': UserLogger,
        'voice': VoiceLogger,
        'webhooks': WebhookLogger,
        'automod': AutoModLogger,
        'applications': ApplicationLogger,
        'entitlements': EntitlementLogger
    }

    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.loggers = {}
        self._event_handlers = {}
        asyncio.create_task(self._initialize())

    def _create_event_handler(self, event_name: str):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤"""
        async def handler(*args, **kwargs):
            if not LoggingState.initialized or not self.loggers:
                print(f"‚ùå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {event_name}")
                return

            try:
                print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è {event_name}")
                print(f"üìù –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Å–æ–±—ã—Ç–∏—è: {args}")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
                if event_name.startswith('on_message') and hasattr(args[0], 'author'):
                    if args[0].author.bot:
                        print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ {event_name}")
                        return
                elif event_name.startswith('on_message_edit') and hasattr(args[0], 'author'):
                    if args[0].author.bot:
                        print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ {event_name}")
                        return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
                guild_id = None
                if len(args) > 0:
                    if hasattr(args[0], 'guild') and args[0].guild:
                        guild_id = args[0].guild.id
                    elif hasattr(args[0], 'guild_id'):
                        guild_id = args[0].guild_id
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏–π —Ç–∏–ø–∞ voice_state_update
                    elif len(args) > 1 and hasattr(args[1], 'guild'):
                        guild_id = args[1].guild.id
                
                if not guild_id:
                    print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω guild_id –¥–ª—è {event_name}")
                    return

                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –º–µ—Ç–æ–¥–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∏–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è
                log_method_name = f"log_{event_name[3:]}"
                print(f"üîç –ò—â–µ–º –º–µ—Ç–æ–¥ {log_method_name}")

                # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ª–æ–≥–≥–µ—Ä–∞–º
                for logger_name, logger in self.loggers.items():
                    try:
                        if hasattr(logger, log_method_name):
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Ç–æ–¥ {log_method_name} –≤ –ª–æ–≥–≥–µ—Ä–µ {logger_name}")
                            log_method = getattr(logger, log_method_name)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ—Ç–æ–¥–∞
                            params = inspect.signature(log_method).parameters
                            print(f"üìä –ú–µ—Ç–æ–¥ {log_method_name} –æ–∂–∏–¥–∞–µ—Ç {len(params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(args)}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                            if len(params) == len(args):
                                print(f"üöÄ –í—ã–∑—ã–≤–∞–µ–º {log_method.__name__} —Å {len(args)} –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏")
                                await log_method(*args)
                            else:
                                print(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è {log_method_name}: –æ–∂–∏–¥–∞–µ—Ç—Å—è {len(params)}, –ø–æ–ª—É—á–µ–Ω–æ {len(args)}")
                                print(f"üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ—Ç–æ–¥–∞: {list(params.keys())}")
                                print(f"üìù –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–≥–µ—Ä–µ {logger_name} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {event_name}: {e}")
                        import traceback
                        print(f"Traceback: {traceback.format_exc()}")

            except Exception as e:
                print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {event_name}: {e}")
                import traceback
                print(f"Traceback: {traceback.format_exc()}")

        return handler

    async def _initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        try:
            await self.bot.wait_until_ready()
            await self.db.init()
            
            print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            result = await self.db.fetch_one(
                "SELECT value FROM settings WHERE category = 'logging' AND key = 'main_channel'"
            )
            
            if not result:
                print("‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            channel_id = int(result['value'])
            channel = self.bot.get_channel(channel_id) or await self.bot.fetch_channel(channel_id)
            
            if not isinstance(channel, discord.TextChannel):
                print(f"‚ùå –ö–∞–Ω–∞–ª {channel_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            permissions = channel.permissions_for(channel.guild.me)
            if not permissions.send_messages or not permissions.manage_webhooks:
                print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤ {channel_id}")
                return
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            LoggingState.initialize(channel)
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –≤–µ–±—Ö—É–∫
            webhooks = await channel.webhooks()
            bot_webhook = discord.utils.get(webhooks, user=self.bot.user)
            
            if not bot_webhook:
                try:
                    LoggingState.webhook = await channel.create_webhook(name=f"{self.bot.user.name} Logger")
                    print("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫ –¥–ª—è –ª–æ–≥–æ–≤")
                except discord.Forbidden:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è –ª–æ–≥–æ–≤")
                    return
            else:
                LoggingState.webhook = bot_webhook
                print("‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ –¥–ª—è –ª–æ–≥–æ–≤")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä—ã
            print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–æ–≤...")
            for name, logger_class in self.LOGGER_CLASSES.items():
                self.loggers[name] = logger_class(self.bot)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ª–æ–≥–≥–µ—Ä: {name}")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            print("\nüîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...")
            registered_events = []
            for logger in self.loggers.values():
                for method_name in dir(logger):
                    if method_name.startswith('log_'):
                        event_name = f"on_{method_name[4:]}"
                        if event_name not in self._event_handlers:
                            handler = self._create_event_handler(event_name)
                            self._event_handlers[event_name] = handler
                            self.bot.add_listener(handler, event_name)
                            registered_events.append(event_name)
            
            if registered_events:
                print(f"\n‚úÖ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(registered_events)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.")
            else:
                print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!")
            
            print(f"\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel.name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                test_embed = Embed(
                    title=f"{Emojis.SUCCESS} –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞",
                    description="–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π.",
                    color="GREEN"
                )
                if LoggingState.webhook:
                    await LoggingState.webhook.send(embed=test_embed)
                else:
                    await channel.send(embed=test_embed)
                print("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {e}")

    @app_commands.command(name="logs", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    @app_commands.describe(
        channel="–ö–∞–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤",
        category="–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–≥–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    )
    @admin_only()
    async def logs(
        self,
        interaction: discord.Interaction,
        channel: discord.TextChannel,
        category: Optional[str] = None
    ):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            permissions = channel.permissions_for(interaction.guild.me)
            if not permissions.send_messages or not permissions.embed_links or not permissions.manage_webhooks:
                return await interaction.response.send_message(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                        description="–£ –º–µ–Ω—è –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ!\n–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π, –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫, –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞–º–∏",
                        color="RED"
                    ),
                    ephemeral=True
                )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await self.db.insert(
                'settings',
                {
                    'guild_id': str(interaction.guild_id),
                    'category': 'logging',
                    'key': 'main_channel',
                    'value': str(channel.id)
                }
            )
            
            if category:
                if category not in self.loggers:
                    return await interaction.response.send_message(
                        embed=Embed(
                            title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                            description=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–≥–æ–≤: `{category}`\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(f'`{c}`' for c in self.loggers.keys())}",
                            color="RED"
                        ),
                        ephemeral=True
                    )
                    
                await self.db.insert(
                    'settings',
                    {
                        'guild_id': str(interaction.guild_id),
                        'category': 'logging',
                        'key': f'channel_{category}',
                        'value': str(channel.id)
                    }
                )

            # –°–æ–∑–¥–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            webhooks = await channel.webhooks()
            bot_webhook = discord.utils.get(webhooks, user=self.bot.user)
            
            if not bot_webhook:
                try:
                    await channel.create_webhook(name=f"{self.bot.user.name} Logger")
                except discord.Forbidden:
                    return await interaction.response.send_message(
                        embed=Embed(
                            title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                            description="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è –ª–æ–≥–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.",
                            color="RED"
                        ),
                        ephemeral=True
                    )

            success_embed = Embed(
                title=f"{Emojis.SETTINGS} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤",
                color="GREEN"
            )
            
            if category:
                success_embed.description = f"–ö–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `{category}` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel.mention}"
            else:
                success_embed.description = f"–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel.mention}"
                
            await interaction.response.send_message(embed=success_embed)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤
            test_embed = Embed(
                title=f"{Emojis.SUCCESS} –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                description="–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                color="GREEN"
            )
            await channel.send(embed=test_embed)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–æ–≤: {e}")
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ª–æ–≥–æ–≤: {e}",
                    color="RED"
                ),
                ephemeral=True
            )

async def setup(bot: commands.Bot):
    await bot.add_cog(Logs(bot)) 