import discord
from discord.ext import commands
from discord import app_commands
import yaml
import traceback
from typing import Optional
from datetime import datetime
from Niludetsu.utils.config_loader import bot_state
import asyncio

from Niludetsu.logging.users import UserLogger
from Niludetsu.logging.errors import ErrorLogger
from Niludetsu.logging.messages import MessageLogger
from Niludetsu.logging.channels import ChannelLogger
from Niludetsu.logging.server import ServerLogger
from Niludetsu.logging.applications import ApplicationLogger
from Niludetsu.logging.emojis import EmojiLogger
from Niludetsu.logging.events import EventLogger
from Niludetsu.logging.invites import InviteLogger
from Niludetsu.logging.roles import RoleLogger
from Niludetsu.logging.webhooks import WebhookLogger
from Niludetsu.logging.stickers import StickerLogger
from Niludetsu.logging.soundboards import SoundboardLogger
from Niludetsu.logging.threads import ThreadLogger
from Niludetsu.logging.voice import VoiceLogger

class Logs(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.log_channel = None
        self.owner_id = "636570363605680139"
        self.logging_enabled = True
        self._initialized = False
        self._webhook_cache = {}
        self._rate_limit_delay = 1.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        self._last_log_time = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–æ–≤
        self.loggers = {
            'user': UserLogger(bot),
            'error': ErrorLogger(bot),
            'message': MessageLogger(bot),
            'channel': ChannelLogger(bot),
            'server': ServerLogger(bot),
            'application': ApplicationLogger(bot),
            'emoji': EmojiLogger(bot),
            'event': EventLogger(bot),
            'invite': InviteLogger(bot),
            'role': RoleLogger(bot),
            'webhook': WebhookLogger(bot),
            'sticker': StickerLogger(bot),
            'soundboard': SoundboardLogger(bot),
            'thread': ThreadLogger(bot),
            'voice': VoiceLogger(bot)
        }
        
        bot.loop.create_task(self.initialize_logs())

    async def initialize_logs(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤"""
        await self.bot.wait_until_ready()
        if self._initialized:
            return
            
        try:
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                if 'logging' in config and 'main_channel' in config['logging']:
                    channel_id = int(config['logging']['main_channel'])
                    self.log_channel = self.bot.get_channel(channel_id)
                    
                    if not self.log_channel:
                        try:
                            self.log_channel = await self.bot.fetch_channel(channel_id)
                        except Exception as e:
                            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {e}")
                            return
                    
                    if not bot_state.is_initialized('logging_system'):
                        test_embed = discord.Embed(
                            title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                            description="–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.",
                            color=discord.Color.green()
                        )
                        await self.log_channel.send(embed=test_embed)
                        bot_state.mark_initialized('logging_system')
                    
                    self._initialized = True
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {e}")

    async def _check_rate_limit(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self._last_log_time:
            current_time = datetime.utcnow()
            time_diff = (current_time - self._last_log_time).total_seconds()
            if time_diff < self._rate_limit_delay:
                await asyncio.sleep(self._rate_limit_delay - time_diff)
        self._last_log_time = datetime.utcnow()

    def save_config(self, channel_id):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            config['logging']['main_channel'] = str(channel_id)
            with open('config/config.yaml', 'w', encoding='utf-8') as f:
                yaml.dump(config, f, indent=4)
        except Exception as e:
            print(f"Error saving config: {e}")

    logs_group = app_commands.Group(name="logs", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

    @logs_group.command(name="show", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤")
    @commands.has_permissions(administrator=True)
    async def logs_show(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤"""
        try:
            if self.log_channel:
                embed = discord.Embed(
                    title="üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö",
                    description=f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {self.log_channel.mention}\n"
                              f"ID –∫–∞–Ω–∞–ª–∞: `{self.log_channel.id}`",
                    color=discord.Color.blue()
                )
            else:
                embed = discord.Embed(
                    title="‚ùå –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ config.yaml",
                    color=discord.Color.red()
                )
            await interaction.response.send_message(embed=embed)
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @logs_group.command(name="set", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ª–æ–≥–æ–≤")
    @commands.has_permissions(administrator=True)
    async def logs_set(self, interaction: discord.Interaction, channel: discord.TextChannel):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤"""
        try:
            self.log_channel = channel
            self.save_config(channel.id)
            
            embed = discord.Embed(
                title="‚úÖ –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                description=f"–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {channel.mention}\n"
                          f"ID –∫–∞–Ω–∞–ª–∞: `{channel.id}`",
                color=discord.Color.green()
            )
            await interaction.response.send_message(embed=embed)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –∫–∞–Ω–∞–ª–∞
            test_embed = discord.Embed(
                title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                description="–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.",
                color=discord.Color.green()
            )
            await channel.send(embed=test_embed)
            
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @logs_group.command(name="test", description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥")
    @commands.has_permissions(administrator=True)
    async def logs_test(self, interaction: discord.Interaction):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        try:
            if not self.log_channel:
                raise Exception("–ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

            test_embed = discord.Embed(
                title="üìù –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                color=discord.Color.blue()
            )
            test_embed.add_field(name="–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä", value=interaction.user.mention, inline=True)
            test_embed.add_field(name="–ö–∞–Ω–∞–ª", value=self.log_channel.mention, inline=True)
            
            await self.log_channel.send(embed=test_embed)
            
            await interaction.response.send_message(
                embed=discord.Embed(
                    title="‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                    description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤",
                    color=discord.Color.green()
                )
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @logs_group.command(name="disable", description="–û—Ç–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    @commands.has_permissions(administrator=True)
    async def logs_disable(self, interaction: discord.Interaction):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.logging_enabled = False
            
            if self.log_channel:
                await self.log_channel.send(
                    embed=discord.Embed(
                        title="‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                        description=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {interaction.user.mention} –æ—Ç–∫–ª—é—á–∏–ª —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                        color=discord.Color.yellow()
                    )
                )
            
            await interaction.response.send_message(
                embed=discord.Embed(
                    title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞",
                    description="–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                    color=discord.Color.yellow()
                )
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @logs_group.command(name="enable", description="–í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    @commands.has_permissions(administrator=True)
    async def logs_enable(self, interaction: discord.Interaction):
        """–í–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
            if self.logging_enabled:
                await interaction.response.send_message(
                    embed=discord.Embed(
                        title="‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞",
                        description="–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞",
                        color=discord.Color.yellow()
                    )
                )
                return

            self.logging_enabled = True
            
            if self.log_channel:
                await self.log_channel.send(
                    embed=discord.Embed(
                        title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∞",
                        description=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {interaction.user.mention} –≤–∫–ª—é—á–∏–ª —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                        color=discord.Color.green()
                    )
                )
            
            await interaction.response.send_message(
                embed=discord.Embed(
                    title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω–∞",
                    description="–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ",
                    color=discord.Color.green()
                )
            )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @logs_group.command(name="status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    @commands.has_permissions(administrator=True)
    async def logs_status(self, interaction: discord.Interaction):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            status = "–í–∫–ª—é—á–µ–Ω–æ" if self.logging_enabled else "–û—Ç–∫–ª—é—á–µ–Ω–æ"
            color = discord.Color.green() if self.logging_enabled else discord.Color.red()
            emoji = "‚úÖ" if self.logging_enabled else "‚ùå"
            
            embed = discord.Embed(
                title=f"{emoji} –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                color=color
            )
            
            embed.add_field(name="–°—Ç–∞—Ç—É—Å", value=status, inline=True)
            embed.add_field(name="–ö–∞–Ω–∞–ª", value=self.log_channel.mention if self.log_channel else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", inline=True)
            
            await interaction.response.send_message(embed=embed)
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    @commands.Cog.listener()
    async def on_command(self, ctx):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        if self.logging_enabled and self._initialized:
            await self.loggers['message'].log_command(ctx, ctx.command.name)

    @commands.Cog.listener()
    async def on_guild_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['server'].log_guild_update(before, after)

    @commands.Cog.listener()
    async def on_guild_role_create(self, role):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏"""
        if self.logging_enabled and self._initialized:
            await self.loggers['role'].log_role_create(role)

    @commands.Cog.listener()
    async def on_guild_role_delete(self, role):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
        if self.logging_enabled and self._initialized:
            await self.loggers['role'].log_role_delete(role)

    @commands.Cog.listener()
    async def on_guild_role_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏"""
        if self.logging_enabled and self._initialized:
            await self.loggers['role'].log_role_update(before, after)

    @commands.Cog.listener()
    async def on_guild_emojis_update(self, guild, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–º–æ–¥–∑–∏"""
        if self.logging_enabled and self._initialized:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
            added = [emoji for emoji in after if emoji not in before]
            removed = [emoji for emoji in before if emoji not in after]
            updated = [emoji for emoji in after if emoji in before and emoji != before[before.index(emoji)]]
            
            for emoji in added:
                await self.loggers['emoji'].log_emoji_create(emoji)
            for emoji in removed:
                await self.loggers['emoji'].log_emoji_delete(emoji)
            for emoji in updated:
                old_emoji = before[before.index(emoji)]
                await self.loggers['emoji'].log_emoji_update(old_emoji, emoji)

    @commands.Cog.listener()
    async def on_guild_channel_create(self, channel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['channel'].log_channel_create(channel)

    @commands.Cog.listener()
    async def on_guild_channel_delete(self, channel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['channel'].log_channel_delete(channel)

    @commands.Cog.listener()
    async def on_guild_channel_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['channel'].log_channel_update(before, after)

    @commands.Cog.listener()
    async def on_guild_channel_pins_update(self, channel, last_pin):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self.logging_enabled and self._initialized:
            await self.loggers['channel'].log_channel_pins_update(channel, last_pin)

    @commands.Cog.listener()
    async def on_member_join(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['server'].log_user_join(member)

    @commands.Cog.listener()
    async def on_member_remove(self, member):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['server'].log_user_leave(member)

    @commands.Cog.listener()
    async def on_member_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if self.logging_enabled and self._initialized:
            if before.display_name != after.display_name:
                await self.loggers['user'].log_user_name_update(before, after)
            if before.roles != after.roles:
                await self.loggers['user'].log_user_roles_update(before, after)

    @commands.Cog.listener()
    async def on_user_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.logging_enabled and self._initialized:
            if before.avatar != after.avatar:
                await self.loggers['user'].log_user_avatar_update(before, after)

    @commands.Cog.listener()
    async def on_member_ban(self, guild, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['server'].log_ban_add(guild, user)

    @commands.Cog.listener()
    async def on_member_unban(self, guild, user):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–±–∞–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['server'].log_ban_remove(guild, user)

    @commands.Cog.listener()
    async def on_message_delete(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.logging_enabled and not message.author.bot:
            await self.loggers['message'].log_message_delete(message)

    @commands.Cog.listener()
    async def on_message_edit(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if self.logging_enabled and not before.author.bot:
            if before.content != after.content:
                await self.loggers['message'].log_message_edit(before, after)

    @commands.Cog.listener()
    async def on_bulk_message_delete(self, messages):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self.logging_enabled:
            await self.loggers['message'].log_bulk_message_delete(messages)

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        if self.logging_enabled and self._initialized:
            await self.loggers['voice'].log_voice_status_update(member, before.channel if before else None, after.channel if after else None)

    @commands.Cog.listener()
    async def on_thread_create(self, thread):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ—Ç–∫–∏"""
        if self.logging_enabled and self._initialized:
            await self.loggers['thread'].log_thread_create(thread)

    @commands.Cog.listener()
    async def on_thread_delete(self, thread):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ—Ç–∫–∏"""
        if self.logging_enabled and self._initialized:
            await self.loggers['thread'].log_thread_delete(thread)

    @commands.Cog.listener()
    async def on_thread_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ç–∫–∏"""
        if self.logging_enabled and self._initialized:
            await self.loggers['thread'].log_thread_update(before, after)

    @commands.Cog.listener()
    async def on_guild_sticker_create(self, sticker):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['sticker'].log_sticker_create(sticker)

    @commands.Cog.listener()
    async def on_guild_sticker_delete(self, sticker):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['sticker'].log_sticker_delete(sticker)

    @commands.Cog.listener()
    async def on_guild_sticker_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞"""
        if self.logging_enabled and self._initialized:
            await self.loggers['sticker'].log_sticker_update(before, after)

    @commands.Cog.listener()
    async def on_invite_create(self, invite):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        if self.logging_enabled and self._initialized:
            await self.loggers['invite'].log_invite_create(invite)

    @commands.Cog.listener()
    async def on_invite_delete(self, invite):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        if self.logging_enabled and self._initialized:
            await self.loggers['invite'].log_invite_delete(invite)

    @commands.Cog.listener()
    async def on_guild_emojis_update(self, guild, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —ç–º–æ–¥–∑–∏"""
        if self.logging_enabled:
            await self.loggers['emoji'].log_emoji_update(guild, before, after)

    @commands.Cog.listener()
    async def on_guild_stickers_update(self, guild, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∏–∫–µ—Ä–æ–≤"""
        if self.logging_enabled:
            await self.loggers['sticker'].log_sticker_update(guild, before, after)

    @commands.Cog.listener()
    async def on_guild_update(self, before, after):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Ä–≤–µ—Ä–∞"""
        if self.logging_enabled:
            await self.loggers['server'].log_guild_update(before, after)

    @commands.Cog.listener()
    async def on_webhooks_update(self, channel):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ–±—Ö—É–∫–æ–≤"""
        if self.logging_enabled:
            await self.loggers['webhook'].log_webhook_update(channel)

    async def cog_load(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –≤–µ–±—Ö—É–∫–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞"""
        self._webhook_cache = {}
        for guild in self.bot.guilds:
            for channel in guild.text_channels:
                try:
                    webhooks = await channel.webhooks()
                    self._webhook_cache[channel.id] = {webhook.id: webhook for webhook in webhooks}
                except discord.Forbidden:
                    continue

async def setup(bot):
    await bot.add_cog(Logs(bot)) 