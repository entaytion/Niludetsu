import discord
from discord.ext import commands
from discord import app_commands
from typing import Optional, List, Dict, Any
from easy_pil import Canvas, Editor, Font, load_image_async
from Niludetsu.database import Database
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.emojis import EMOJIS
import aiohttp
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import os
import io
import json
import asyncio

def calculate_next_level_xp(level: int) -> int:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    Args:
        level (int): –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    Returns:
        int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø—ã—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    """
    return 5 * (level ** 2) + 50 * level + 100

def format_voice_time(seconds: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    Args:
        seconds (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    return f"{hours}—á {minutes}–º"

class SellRoleButton(discord.ui.Button):
    def __init__(self, role_id: int, role_name: str, price: int):
        super().__init__(
            style=discord.ButtonStyle.red,
            label=f"–ü—Ä–æ–¥–∞—Ç—å {role_name}",
            custom_id=f"sell_role_{role_id}"
        )
        self.role_id = role_id
        self.price = price
        self.role_name = role_name

    async def callback(self, interaction: discord.Interaction):
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
        role_data = await self.view.cog.db.get_row("shop_roles", role_id=self.role_id)

        if not role_data:
            await interaction.response.send_message(
                embed=Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        role = interaction.guild.get_role(int(role_data['role_id']))
        if not role:
            await interaction.response.send_message(
                embed=Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if role not in interaction.user.roles:
            await interaction.response.send_message(
                embed=Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π —Ä–æ–ª–∏.",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        sell_price = int(self.price * 0.7)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 70% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        bot_profit = self.price - sell_price  # 30% –≤ –∫–∞–∑–Ω—É —Å–µ—Ä–≤–µ—Ä–∞

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(interaction.user.id)
        user_data = await self.view.cog.db.get_row("users", user_id=user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–≤–∞–µ–º—É—é —Ä–æ–ª—å
        try:
            user_roles = eval(user_data['roles'])
            user_roles.remove(self.role_id)
        except:
            user_roles = []

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.view.cog.db.update(
            "users",
            where={"user_id": user_id},
            values={
                "balance": user_data.get('balance', 0) + sell_price,
                "roles": str(user_roles)
            }
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ (–∫–∞–∑–Ω—É —Å–µ—Ä–≤–µ—Ä–∞)
        bot_id = '1264591814208262154'  # ID –±–æ—Ç–∞
        bot_data = await self.view.cog.db.get_row("users", user_id=bot_id)
        await self.view.cog.db.update(
            "users",
            where={"user_id": bot_id},
            values={"balance": bot_data.get('balance', 0) + bot_profit}
        )

        # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await interaction.user.remove_roles(role)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π view –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        new_view = InventoryView(str(interaction.user.id), interaction.user.global_name or interaction.user.name, True)
        new_view.cog = self.view.cog
        
        # –°–æ–∑–¥–∞–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥–∞–∂–µ
        sell_embed=Embed(
            title="‚úÖ –†–æ–ª—å –ø—Ä–æ–¥–∞–Ω–∞",
            description=(
                f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Ä–æ–ª—å **{role.name}** –∑–∞ {sell_price:,} {EMOJIS['MONEY']}\n"
                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance'] + sell_price:,} {EMOJIS['MONEY']}\n"
                f"–° –ø—Ä–æ–¥–∞–∂–∏ —Ä–æ–ª–∏, 30% –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ **–∫–∞–∑–Ω—É —Å–µ—Ä–≤–µ—Ä–∞**"
            ),
            color="GREEN"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
        await interaction.response.edit_message(embed=sell_embed, view=new_view)

class InventoryView(discord.ui.View):
    def __init__(self, user_id: str, user_name: str, is_self: bool):
        super().__init__()  # –£–±–∏—Ä–∞–µ–º timeout=None
        self.user_id = user_id
        self.user_name = user_name
        self.is_self = is_self
        self.cog = None

    async def refresh_inventory(self, interaction: discord.Interaction):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await self.cog.db.get_row("users", user_id=self.user_id)
        if not user_data or not user_data['roles']:
            await interaction.response.send_message(
                embed=Embed(
                    title="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                    description=f"–£ {self.user_name} –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.",
                    color="BLUE"
                ),
                ephemeral=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–æ–ª–µ–π
        try:
            user_roles = eval(user_data['roles'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        except:
            user_roles = []

        if not user_roles:
            await interaction.response.send_message(
                embed=Embed(
                    title="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                    description=f"–£ {self.user_name} –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.",
                    color="BLUE"
                ),
                ephemeral=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª—è—Ö
        roles_data = []
        for role_id in user_roles:
            role_data = await self.cog.db.get_row("shop_roles", role_id=role_id)
            if role_data:
                roles_data.append(role_data)

        if not roles_data:
            await interaction.response.send_message(
                embed=Embed(
                    title="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                    description=f"–£ {self.user_name} –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.",
                    color="BLUE"
                ),
                ephemeral=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π —Å –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        roles_list = []
        total_value = 0
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
        self.clear_items()
        
        for role_data in roles_data:
            role = interaction.guild.get_role(int(role_data['role_id']))
            if role:
                sell_price = int(role_data['price'] * 0.7)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 70% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                roles_list.append(f"‚Ä¢ {role.name} ‚Äî {role_data['price']:,} üí∞ (–ø—Ä–æ–¥–∞–∂–∞: {sell_price:,} üí∞)")
                total_value += role_data['price']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if self.is_self:
                    self.add_item(SellRoleButton(role_data['role_id'], role.name, role_data['price']))

        # –°–æ–∑–¥–∞–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        embed=Embed(
            title=f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {self.user_name}",
            description="\n".join([
                "**–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:**",
                "\n".join(roles_list),
                f"\n**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_value:,} üí∞"
            ]),
            color="BLUE"
        )

        await interaction.response.send_message(
            embed=embed,
            view=self if self.is_self else None,
            ephemeral=True
        )

class InventoryButton(discord.ui.Button):
    def __init__(self, user_id: str, user_name: str):
        super().__init__(style=discord.ButtonStyle.gray, label="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", emoji="üéí", custom_id=f"inventory_{user_id}")
        self.user_id = user_id
        self.user_name = user_name

    async def callback(self, interaction: discord.Interaction):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–π –ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_self = str(interaction.user.id) == self.user_id
        
        view = InventoryView(self.user_id, self.user_name, is_self)
        view.cog = self.view.cog
        await view.refresh_inventory(interaction)

class ProfileView(discord.ui.View):
    def __init__(self, user_id: str, user_name: str):
        super().__init__(timeout=None)
        self.add_item(InventoryButton(user_id, user_name))

class Profile(commands.Cog):
    def __init__(self, client):
        self.client = client
        self.db = Database()
        self.font_path_regular = os.path.join('config', 'fonts', 'TTNormsPro-Regular.ttf')
        self.font_path_bold = os.path.join('config', 'fonts', 'TTNormsPro-Bold.ttf')
        self.money_icon_path = os.path.join('config', 'images', 'profile', 'money.png')

    async def load_image_async(self, url: str) -> Image:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    raise Exception(f"Failed to fetch image: {response.status}")
                data = await response.read()
                return Image.open(BytesIO(data))

    def format_time(self, seconds):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú:–°–°"""
        if seconds is None:
            return "00:00:00"
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        seconds = seconds % 60
        return f"{hours:02d}:{minutes:02d}:{seconds:02d}"

    def rounded_rectangle(self, draw, x1, y1, x2, y2, radius, fill=None, outline=None):
        """Draws a rounded rectangle"""
        diameter = radius * 2
        x1, x2 = min(x1, x2), max(x1, x2)
        y1, y2 = min(y1, y2), max(y1, y2)

        if diameter <= (x2 - x1) and diameter <= (y2 - y1): 
            draw.ellipse((x1, y1, x1 + diameter, y1 + diameter), fill=fill, outline=outline)
            draw.ellipse((x2 - diameter, y1, x2, y1 + diameter), fill=fill, outline=outline)
            draw.ellipse((x1, y2 - diameter, x1 + diameter, y2), fill=fill, outline=outline)
            draw.ellipse((x2 - diameter, y2 - diameter, x2, y2), fill=fill, outline=outline)
            draw.rectangle((x1 + radius, y1, x2 - radius, y2), fill=fill, outline=outline)
            draw.rectangle((x1, y1 + radius, x2, y2 - radius), fill=fill, outline=outline)
        else:
            draw.rectangle((x1, y1, x2, y2), fill=fill, outline=outline)

    @discord.app_commands.command(name="profile", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @discord.app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑–∞—Ç—å")
    async def profile(self, interaction: discord.Interaction, user: discord.User = None):
        user = user or interaction.user
        
        if user.bot:
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{EMOJIS['ERROR']} –û—à–∏–±–∫–∞",
                    description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞.",
                    color="RED"
                )
            )
            return

        user_id = str(user.id)
        user_data = await self.db.get_row("users", user_id=user_id)

        if not user_data:
            user_data = await self.db.insert("users", {
                'user_id': user_id,
                'balance': 0,
                'deposit': 0,
                'xp': 0,
                'level': 1,
                'roles': '[]'
            })

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Canvas
        background = Editor(Image.new('RGBA', (800, 600), color=(20, 20, 30, 255)))
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        gradient = Image.new('RGBA', (800, 600))
        draw = ImageDraw.Draw(gradient)
        for y in range(600):
            r = int(30 * (1 - y/600))
            g = int(30 * (1 - y/600))
            b = int(40 * (1 - y/600))
            draw.line([(0, y), (800, y)], fill=(r, g, b, 255))
        
        background.image = Image.alpha_composite(background.image, gradient)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.rounded_rectangle(ImageDraw.Draw(background.image), 20, 20, 780, 200, 20, fill=(40, 40, 55, 255))
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.rounded_rectangle(ImageDraw.Draw(background.image), 20, 220, 780, 580, 20, fill=(40, 40, 55, 255))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä —Å –æ–±–≤–æ–¥–∫–æ–π
        profile_image = await self.load_image_async(str(user.display_avatar.url))
        profile_image = Editor(profile_image).resize((140, 140)).circle_image()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–≤–æ–¥–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        circle_border = Image.new('RGBA', (150, 150), (0, 0, 0, 0))
        draw = ImageDraw.Draw(circle_border)
        draw.ellipse((0, 0, 149, 149), outline=(255, 255, 255, 255), width=3)
        circle_border = Editor(circle_border)
        
        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏ –æ–±–≤–æ–¥–∫—É
        background.paste(profile_image, (40, 40))
        background.paste(circle_border, (35, 35))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
        font_regular = Font(self.font_path_regular, size=30)
        font_small = Font(self.font_path_regular, size=25)
        font_smaller = Font(self.font_path_regular, size=20)
        font_bold = Font(self.font_path_bold, size=40)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        background.text((210, 50), user.name, font=font_bold, color="white")

        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
        level = user_data.get('level', 1)
        xp = user_data.get('xp', 0)
        next_level_xp = calculate_next_level_xp(level)
        xp_percentage = min(xp / next_level_xp * 100, 100)

        # –†–∏—Å—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        bar_width = 300
        bar_height = 20
        bar_x = 210
        bar_y = 100
        
        # –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        self.rounded_rectangle(
            ImageDraw.Draw(background.image),
            bar_x, bar_y,
            bar_x + bar_width, bar_y + bar_height,
            10, fill=(30, 30, 40, 255)
        )
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        filled_width = int(bar_width * (xp_percentage / 100))
        if filled_width > 0:
            self.rounded_rectangle(
                ImageDraw.Draw(background.image),
                bar_x, bar_y,
                bar_x + filled_width, bar_y + bar_height,
                10, fill=(70, 130, 180, 255)
            )

        # –¢–µ–∫—Å—Ç —É—Ä–æ–≤–Ω—è –∏ –æ–ø—ã—Ç–∞
        background.text((210, 130), f"–£—Ä–æ–≤–µ–Ω—å {level}", font=font_regular, color="white")
        background.text((400, 130), f"XP: {xp:,}/{next_level_xp:,}", font=font_small, color="#cccccc")

        # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å –∏–∫–æ–Ω–∫–∞–º–∏
        balance = user_data.get('balance', 0)
        deposit = user_data.get('deposit', 0)
        total = balance + deposit

        # –†–∏—Å—É–µ–º —Å–µ–∫—Ü–∏–∏ –¥–ª—è –¥–µ–Ω–µ–≥
        money_section_y = 250
        self.rounded_rectangle(ImageDraw.Draw(background.image), 40, money_section_y, 380, money_section_y + 100, 15, fill=(50, 50, 65, 255))
        
        # –ò–∫–æ–Ω–∫–∞ –¥–µ–Ω–µ–≥ –∏ –±–∞–ª–∞–Ω—Å
        money_icon = Editor(self.money_icon_path).resize((25, 25))
        background.paste(money_icon, (60, money_section_y + 20))
        background.text((95, money_section_y + 15), f"–ë–∞–ª–∞–Ω—Å: {balance:,}", font=font_regular, color="white")
        background.text((95, money_section_y + 55), f"–í –±–∞–Ω–∫–µ: {deposit:,}", font=font_small, color="#cccccc")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—Ä–∞–≤–∞
        stats_x = 420
        stats_y = 250
        self.rounded_rectangle(ImageDraw.Draw(background.image), stats_x, stats_y, 760, stats_y + 300, 15, fill=(50, 50, 65, 255))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        background.text((stats_x + 20, stats_y + 20), "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", font=font_regular, color="white")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∏–∫–æ–Ω–∫–∞–º–∏
        stats_start_y = stats_y + 70
        line_height = 45
        
        # –í—Ä–µ–º—è –≤ –≤–æ–π—Å–µ
        voice_time = user_data.get('voice_time', 0)
        formatted_voice_time = format_voice_time(voice_time)
        background.text((stats_x + 20, stats_start_y), f"üé§ –í—Ä–µ–º—è –≤ –≤–æ–π—Å–µ: {formatted_voice_time}", font=font_small, color="#cccccc")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        voice_joins = user_data.get('voice_joins', 0)
        background.text((stats_x + 20, stats_start_y + line_height), f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {voice_joins:,}", font=font_small, color="#cccccc")
        
        # –°–æ–æ–±—â–µ–Ω–∏—è
        messages_count = user_data.get('messages_count', 0)
        background.text((stats_x + 20, stats_start_y + line_height * 2), f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {messages_count:,}", font=font_small, color="#cccccc")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        file = discord.File(fp=background.image_bytes, filename="profile.png")

        # –°–æ–∑–¥–∞–µ–º view —Å –∫–Ω–æ–ø–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        view = ProfileView(user_id, user.global_name or user.name)
        view.cog = self

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
        await interaction.response.send_message(file=file, view=view)

async def setup(client):
    await client.add_cog(Profile(client)) 