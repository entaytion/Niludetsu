import discord
from discord.ext import commands
from discord import app_commands
from typing import Optional, List, Dict, Any
from easy_pil import Canvas, Editor, Font, load_image_async
from Niludetsu.database import Database
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.constants import Emojis
from Niludetsu.profile import ProfileManager, ProfileImage
import aiohttp
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
import os
from discord.ext import tasks

class SellRoleButton(discord.ui.Button):
    def __init__(self, role_id: int, role_name: str, price: int):
        super().__init__(
            style=discord.ButtonStyle.red,
            label=f"–ü—Ä–æ–¥–∞—Ç—å {role_name}",
            custom_id=f"sell_role_{role_id}"
        )
        self.role_id = role_id
        self.price = price
        self.role_name = role_name

    async def callback(self, interaction: discord.Interaction):
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å
        role_data = await self.view.cog.db.get_row("shop_roles", role_id=self.role_id)

        if not role_data:
            await interaction.response.send_message(
                embed=Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        role = interaction.guild.get_role(int(role_data['role_id']))
        if not role:
            await interaction.response.send_message(
                embed=Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if role not in interaction.user.roles:
            await interaction.response.send_message(
                embed=Embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π —Ä–æ–ª–∏.",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        sell_price = int(self.price * 0.7)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 70% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        bot_profit = self.price - sell_price  # 30% –≤ –∫–∞–∑–Ω—É —Å–µ—Ä–≤–µ—Ä–∞

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(interaction.user.id)
        user_data = await self.view.cog.db.get_row("users", user_id=user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–¥–∞–≤–∞–µ–º—É—é —Ä–æ–ª—å
        try:
            user_roles = eval(user_data['roles'])
            user_roles.remove(self.role_id)
        except:
            user_roles = []

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.view.cog.db.update(
            "users",
            where={"user_id": user_id},
            values={
                "balance": user_data.get('balance', 0) + sell_price,
                "roles": str(user_roles)
            }
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞ (–∫–∞–∑–Ω—É —Å–µ—Ä–≤–µ—Ä–∞)
        bot_id = '1264591814208262154'  # ID –±–æ—Ç–∞
        bot_data = await self.view.cog.db.get_row("users", user_id=bot_id)
        await self.view.cog.db.update(
            "users",
            where={"user_id": bot_id},
            values={"balance": bot_data.get('balance', 0) + bot_profit}
        )

        # –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await interaction.user.remove_roles(role)

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π view –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        new_view = InventoryView(str(interaction.user.id), interaction.user.global_name or interaction.user.name, True)
        new_view.cog = self.view.cog
        
        # –°–æ–∑–¥–∞–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥–∞–∂–µ
        sell_embed=Embed(
            title="‚úÖ –†–æ–ª—å –ø—Ä–æ–¥–∞–Ω–∞",
            description=(
                f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Ä–æ–ª—å **{role.name}** –∑–∞ {sell_price:,} {Emojis.MONEY}\n"
                f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_data['balance'] + sell_price:,} {Emojis.MONEY}\n"
                f"–° –ø—Ä–æ–¥–∞–∂–∏ —Ä–æ–ª–∏, 30% –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ **–∫–∞–∑–Ω—É —Å–µ—Ä–≤–µ—Ä–∞**"
            ),
            color="GREEN"
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–º
        await interaction.response.edit_message(embed=sell_embed, view=new_view)

class InventoryView(discord.ui.View):
    def __init__(self, user_id: str, user_name: str, is_self: bool):
        super().__init__()  # –£–±–∏—Ä–∞–µ–º timeout=None
        self.user_id = user_id
        self.user_name = user_name
        self.is_self = is_self
        self.cog = None

    async def refresh_inventory(self, interaction: discord.Interaction):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = await self.cog.db.get_row("users", user_id=self.user_id)
        if not user_data or not user_data['roles']:
            await interaction.response.send_message(
                embed=Embed(
                    title="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                    description=f"–£ {self.user_name} –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.",
                    color="BLUE"
                ),
                ephemeral=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ä–æ–ª–µ–π
        try:
            user_roles = eval(user_data['roles'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫
        except:
            user_roles = []

        if not user_roles:
            await interaction.response.send_message(
                embed=Embed(
                    title="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                    description=f"–£ {self.user_name} –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.",
                    color="BLUE"
                ),
                ephemeral=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª—è—Ö
        roles_data = []
        for role_id in user_roles:
            role_data = await self.cog.db.get_row("shop_roles", role_id=role_id)
            if role_data:
                roles_data.append(role_data)

        if not roles_data:
            await interaction.response.send_message(
                embed=Embed(
                    title="üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å",
                    description=f"–£ {self.user_name} –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π.",
                    color="BLUE"
                ),
                ephemeral=True
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π —Å –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
        roles_list = []
        total_value = 0
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
        self.clear_items()
        
        for role_data in roles_data:
            role = interaction.guild.get_role(int(role_data['role_id']))
            if role:
                sell_price = int(role_data['price'] * 0.7)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 70% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
                roles_list.append(f"‚Ä¢ {role.name} ‚Äî {role_data['price']:,} üí∞ (–ø—Ä–æ–¥–∞–∂–∞: {sell_price:,} üí∞)")
                total_value += role_data['price']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if self.is_self:
                    self.add_item(SellRoleButton(role_data['role_id'], role.name, role_data['price']))

        # –°–æ–∑–¥–∞–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        embed=Embed(
            title=f"üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å {self.user_name}",
            description="\n".join([
                "**–ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:**",
                "\n".join(roles_list),
                f"\n**–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:** {total_value:,} üí∞"
            ]),
            color="BLUE"
        )

        await interaction.response.send_message(
            embed=embed,
            view=self if self.is_self else None,
            ephemeral=True
        )

class InventoryButton(discord.ui.Button):
    def __init__(self, user_id: str, user_name: str):
        super().__init__(style=discord.ButtonStyle.gray, label="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", emoji="üéí", custom_id=f"inventory_{user_id}")
        self.user_id = user_id
        self.user_name = user_name

    async def callback(self, interaction: discord.Interaction):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤–æ–π –ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_self = str(interaction.user.id) == self.user_id
        
        view = InventoryView(self.user_id, self.user_name, is_self)
        view.cog = self.view.cog
        await view.refresh_inventory(interaction)

class ProfileView(discord.ui.View):
    def __init__(self, user_id: str, user_name: str):
        super().__init__(timeout=None)
        self.add_item(InventoryButton(user_id, user_name))

class Profile(commands.GroupCog, group_name="profile"):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.profile_manager = ProfileManager(self.db)
        self.profile_image = ProfileImage()
        self.font_path_regular = os.path.join('config', 'fonts', 'TTNormsPro-Regular.ttf')
        self.font_path_bold = os.path.join('config', 'fonts', 'TTNormsPro-Bold.ttf')

    async def check_birthdays(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É –∫–æ–≥–æ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
        try:
            birthday_users = await self.profile_manager.check_birthdays()
            
            if not birthday_users:
                return
                
            for profile in birthday_users:
                user = await self.bot.fetch_user(int(profile.user_id))
                if user:
                    age = profile.age
                    age_text = f", –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å {age} –ª–µ—Ç" if age else ""
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    try:
                        await user.send(
                            embed=Embed(
                                title="üéÇ –° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è!",
                                description=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è{age_text}! –ñ–µ–ª–∞–µ–º —Å—á–∞—Å—Ç—å—è, –∑–¥–æ—Ä–æ–≤—å—è –∏ –≤—Å–µ–≥–æ —Å–∞–º–æ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!",
                                color="YELLOW"
                            )
                        )
                    except discord.Forbidden:
                        pass  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–µ—Ç–∏–ª –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è: {e}")

    @tasks.loop(hours=24)
    async def birthday_check(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
        await self.check_birthdays()

    async def cog_load(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞"""
        await self.db.connect()
        self.birthday_check.start()

    async def cog_unload(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞"""
        self.birthday_check.cancel()
        await self.db.close()

    @app_commands.command(name="view", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∫–∞–∑–∞—Ç—å")
    async def profile_view(self, interaction: discord.Interaction, user: discord.User = None):
        user = user or interaction.user
        
        if user.bot:
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞.",
                    color="RED"
                )
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —á–µ—Ä–µ–∑ ProfileManager
        profile_data = await self.profile_manager.get_profile(str(user.id))
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        image_bytes = await self.profile_image.create_profile_image(
            profile_data,
            user.global_name or user.name,
            str(user.display_avatar.url)
        )

        # –°–æ–∑–¥–∞–µ–º view —Å –∫–Ω–æ–ø–∫–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        view = ProfileView(str(user.id), user.global_name or user.name)
        view.cog = self

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π
        file = discord.File(fp=image_bytes, filename="profile.png")
        await interaction.response.send_message(file=file, view=view)

    @app_commands.command(name="set", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ")
    @app_commands.describe(
        name="–í–∞—à–µ –∏–º—è",
        country="–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è",
        bio="–û —Å–µ–±–µ",
        birthday="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2000)"
    )
    async def profile_set(
        self, 
        interaction: discord.Interaction, 
        name: str = None,
        country: str = None,
        bio: str = None,
        birthday: str = None
    ):
        if not any([name, country, bio, birthday]):
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description="–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –±–∏–æ–≥—Ä–∞—Ñ–∏–∏
        if bio and len(bio) > 1024:
            await interaction.response.send_message(
                embed=Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description="–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤!",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
        if birthday:
            try:
                day, month, year = map(int, birthday.split('.'))
                if not (1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2024):
                    raise ValueError
            except ValueError:
                await interaction.response.send_message(
                    embed=Embed(
                        title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                        description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 01.01.2000)",
                        color="RED"
                    ),
                    ephemeral=True
                )
                return

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ ProfileManager
        update_data = {}
        if name is not None:
            update_data["name"] = name
        if country is not None:
            update_data["country"] = country
        if bio is not None:
            update_data["bio"] = bio
        if birthday is not None:
            update_data["birthday"] = birthday

        await self.profile_manager.update_profile(str(interaction.user.id), **update_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        updated_fields = []
        if name is not None:
            updated_fields.append(f"–ò–º—è: {name}")
        if country is not None:
            updated_fields.append(f"–°—Ç—Ä–∞–Ω–∞: {country}")
        if bio is not None:
            updated_fields.append(f"–û —Å–µ–±–µ: {bio}")
        if birthday is not None:
            updated_fields.append(f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}")

        await interaction.response.send_message(
            embed=Embed(
                title=f"{Emojis.SUCCESS} –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
                description="\n".join(updated_fields),
                color="GREEN"
            ),
            ephemeral=True
        )

    @app_commands.command(name="clear", description="–û—á–∏—Å—Ç–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    async def profile_clear(self, interaction: discord.Interaction):
        # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ ProfileManager
        await self.profile_manager.clear_profile(str(interaction.user.id))
            
        await interaction.response.send_message(
            embed=Embed(
                title=f"{Emojis.SUCCESS} –ü—Ä–æ—Ñ–∏–ª—å –æ—á–∏—â–µ–Ω",
                description="–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!",
                color="GREEN"
            )
        )

async def setup(bot):
    await bot.add_cog(Profile(bot)) 