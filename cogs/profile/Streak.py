import discord
from discord import app_commands
from discord.ext import commands
import sqlite3
from datetime import datetime, timedelta, time
from Niludetsu.utils.embed import create_embed
from Niludetsu.core.base import EMOJIS
from Niludetsu.utils.database import DB_PATH, initialize_table, TABLES_SCHEMAS
from discord.ext import tasks

class Streak(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.setup_database()
        self.reset_time = time(22, 0)  # 22:00
        self._notified_users = set()
        self.check_streaks.start()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        
    def setup_database(self):
        initialize_table('user_streaks', TABLES_SCHEMAS['user_streaks'])

    def get_user_streak(self, user_id: int) -> dict:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT user_id, streak_count, last_message_date, total_messages, highest_streak, reference_time, is_active FROM user_streaks WHERE user_id = ?",
                (user_id,)
            )
            result = cursor.fetchone()
            
            if not result:
                cursor.execute(
                    "INSERT INTO user_streaks (user_id) VALUES (?)",
                    (user_id,)
                )
                conn.commit()
                return {
                    'user_id': user_id,
                    'streak_count': 0,
                    'last_message_date': None,
                    'total_messages': 0,
                    'highest_streak': 0,
                    'reference_time': None,
                    'is_active': 1
                }
            
            return {
                'user_id': result[0],
                'streak_count': result[1],
                'last_message_date': datetime.fromisoformat(result[2]) if result[2] else None,
                'total_messages': result[3],
                'highest_streak': result[4],
                'reference_time': datetime.fromisoformat(result[5]) if result[5] else None,
                'is_active': result[6]
            }

    def update_streak(self, user_id: int, streak_data: dict):
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                """
                UPDATE user_streaks 
                SET streak_count = ?,
                    last_message_date = ?,
                    total_messages = ?,
                    highest_streak = ?,
                    reference_time = ?,
                    is_active = ?
                WHERE user_id = ?
                """,
                (
                    streak_data['streak_count'],
                    streak_data['last_message_date'].isoformat() if streak_data['last_message_date'] else None,
                    streak_data['total_messages'],
                    streak_data['highest_streak'],
                    streak_data['reference_time'].isoformat() if streak_data['reference_time'] else None,
                    streak_data['is_active'],
                    user_id
                )
            )
            conn.commit()

    def get_flame_emoji(self, streak_count: int) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –æ–≥–æ–Ω—å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –û–≥–æ–Ω—å–∫–∞"""
        if streak_count < 3:
            return "üî•"
        elif streak_count < 7:
            return "üí´"
        elif streak_count < 14:
            return "‚ö°"
        elif streak_count < 30:
            return "üåü"
        else:
            return "üëë"

    async def update_nickname(self, member: discord.Member, streak_count: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è—è —ç–º–æ–¥–∑–∏ –û–≥–æ–Ω—å–∫–∞"""
        if member.guild.owner_id == member.id:
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞
            
        try:
            base_name = member.display_name
            # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ —ç–º–æ–¥–∑–∏ –û–≥–æ–Ω—å–∫–æ–≤
            for emoji in ["üî•", "üí´", "‚ö°", "üåü", "üëë"]:
                base_name = base_name.replace(emoji, "").strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–≥–æ–Ω–µ–∫
            if streak_count > 0:
                new_name = f"{self.get_flame_emoji(streak_count)} {base_name}"
            else:
                new_name = base_name

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
            if new_name != member.display_name:
                await member.edit(nick=new_name[:32])  # Discord –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É –Ω–∏–∫–Ω–µ–π–º–∞ 32 —Å–∏–º–≤–æ–ª–∞–º–∏
        except discord.Forbidden:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –¥–ª—è {member.name}. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞: {e}")

    def is_streak_expired(self, last_message: datetime, reference_time: datetime) -> tuple[bool, bool, datetime]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–≥–æ–Ω—å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–∏—Å—Ç–µ–∫ –ª–∏, –Ω—É–∂–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–∏—Ç—å, –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è)"""
        if not last_message or not reference_time:
            return True, False, datetime.now()
            
        now = datetime.now()
        
        # –†–∞—Å—á–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        next_expiry = datetime.combine(now.date(), reference_time.time())
        if now.time() < reference_time.time():
            next_expiry -= timedelta(days=1)
        next_expiry += timedelta(days=1)
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–æ –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
        time_since_last_message = now - last_message
        if time_since_last_message > timedelta(hours=24):
            return True, False, next_expiry
            
        # –ë–ª–∏–∑–æ—Å—Ç—å –∫ –¥–µ–¥–ª–∞–π–Ω—É (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
        time_until_expiry = (next_expiry - now).total_seconds()
        if time_until_expiry <= 3600:  # –∑–∞ 1 —á–∞—Å
            return False, True, next_expiry
            
        return False, False, next_expiry

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        if message.author.bot or not message.guild:
            return

        now = datetime.now()
        
        try:
            user_id = message.author.id
            streak_data = self.get_user_streak(user_id)
            last_message = streak_data['last_message_date']
            reference_time = streak_data['reference_time']
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            streak_data['total_messages'] += 1
            
            if not last_message or not reference_time:
                # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                streak_data['streak_count'] = 1
                streak_data['highest_streak'] = 1
                streak_data['last_message_date'] = now
                streak_data['reference_time'] = now
                streak_data['is_active'] = 1
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∏ –ª–∏ —Å—É—Ç–∫–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                time_since_last = now - last_message
                
                if time_since_last > timedelta(hours=24):
                    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤ - –æ–±–Ω—É–ª—è–µ–º
                    streak_data['streak_count'] = 1
                    streak_data['reference_time'] = now
                    streak_data['is_active'] = 1
                elif time_since_last > timedelta(hours=20):  # –î–∞–µ–º 4 —á–∞—Å–∞ —Ñ–æ—Ä—ã –¥–æ –æ–±–Ω—É–ª–µ–Ω–∏—è
                    # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    streak_data['last_message_date'] = now
                    streak_data['is_active'] = 1
                elif last_message.date() < now.date():
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–π –¥–µ–Ω—å –∏ –Ω–µ –ø—Ä–æ—à–ª–æ 24 —á–∞—Å–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–≥–æ–Ω–µ–∫
                    streak_data['streak_count'] += 1
                    streak_data['last_message_date'] = now
                    streak_data['is_active'] = 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ—Ä–¥
                if streak_data['streak_count'] > streak_data['highest_streak']:
                    streak_data['highest_streak'] = streak_data['streak_count']
                    try:
                        await message.author.send(
                            embed=create_embed(
                                title=f"{EMOJIS['TROPHY']} –ù–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥!",
                                description=f"{EMOJIS['FIRE']} –í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–æ–≤—ã–π —Ä–µ–∫–æ—Ä–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: **{streak_data['streak_count']} –¥–Ω–µ–π**!",
                                color="GOLD"
                            )
                        )
                    except discord.Forbidden:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∫–æ—Ä–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.author.name} - –õ–° –∑–∞–∫—Ä—ã—Ç—ã")

            self.update_streak(user_id, streak_data)
            await self.update_nickname(message.author, streak_data['streak_count'])

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–≥–æ–Ω—å–∫–∞: {e}")

    def check_streak_status(self, streak_data: dict) -> tuple[bool, int, datetime]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –æ–≥–æ–Ω—å–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_active, current_streak, next_reset)"""
        current_time = datetime.now()
        last_message = streak_data['last_message_date']
        reference_time = streak_data['reference_time']
        
        if not last_message or not reference_time:
            return False, 0, current_time

        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–¥–ª–∞–π–Ω
        next_deadline = datetime.combine(current_time.date(), reference_time.time())
        if current_time.time() < reference_time.time():
            next_deadline -= timedelta(days=1)
        next_deadline += timedelta(days=1)

        # –û–≥–æ–Ω–µ–∫ –∞–∫—Ç–∏–≤–µ–Ω –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω –¥–µ–¥–ª–∞–π–Ω
        is_active = current_time <= next_deadline and streak_data['is_active'] == 1
        return is_active, streak_data['streak_count'], next_deadline

    @app_commands.command(name="streak", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –æ–≥–æ–Ω—å–∫–µ –æ–±—â–µ–Ω–∏—è")
    @app_commands.describe(user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —á–µ–π –æ–≥–æ–Ω–µ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å")
    async def streak(self, interaction: discord.Interaction, user: discord.User = None):
        target_user = user or interaction.user
        
        try:
            streak_data = self.get_user_streak(target_user.id)
            last_message = streak_data['last_message_date']
            
            if not last_message:
                await interaction.response.send_message(
                    embed=create_embed(
                        title=f"{EMOJIS['ERROR']} –ù–µ—Ç –æ–≥–æ–Ω—å–∫–∞",
                        description=f"–£ {target_user.mention} –ø–æ–∫–∞ –Ω–µ—Ç –æ–≥–æ–Ω—å–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–≥–æ–Ω–µ–∫!",
                        color="RED"
                    )
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–≥–æ–Ω—å–∫–∞
            is_active, current_streak, next_reset = self.check_streak_status(streak_data)
            
            if not is_active:
                status = f"{EMOJIS['ERROR']} –û–≥–æ–Ω—ë–∫ –ø–æ—Ç—É—Ö! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π."
                color = "RED"
            else:
                time_left = int((next_reset - datetime.now()).total_seconds())
                hours_left, minutes_left = divmod(time_left // 60, 60)
                status = f"{EMOJIS['SUCCESS']} –û–≥–æ–Ω—ë–∫ –∞–∫—Ç–∏–≤–µ–Ω –µ—â—ë {hours_left}—á {minutes_left}–º."
                color = "GREEN"

            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–≥–æ–Ω—å–∫–µ
            embed = create_embed(
                title=f"{self.get_flame_emoji(streak_data['streak_count'])} –û–≥–æ–Ω—ë–∫ {target_user.name}",
                description=status,
                color=color
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            embed.add_field(
                name=f"{EMOJIS['STREAK']} –¢–µ–∫—É—â–∏–π –æ–≥–æ–Ω—ë–∫",
                value=f"**{streak_data['streak_count']}** –¥–Ω–µ–π",
                inline=True
            )
            embed.add_field(
                name=f"{EMOJIS['TROPHY']} –†–µ–∫–æ—Ä–¥",
                value=f"**{streak_data['highest_streak']}** –¥–Ω–µ–π",
                inline=True
            )
            embed.add_field(
                name=f"{EMOJIS['MESSAGES']} –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π",
                value=f"**{streak_data['total_messages']}**",
                inline=True
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            last_message_str = last_message.strftime("%d.%m.%Y %H:%M")
            embed.add_field(
                name=f"{EMOJIS['TIME']} –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                value=f"**{last_message_str}**",
                inline=False
            )

            embed.set_thumbnail(url=target_user.display_avatar.url)
            await interaction.response.send_message(embed=embed)

        except Exception as e:
            await interaction.response.send_message(
                embed=create_embed(
                    description=f"{EMOJIS['ERROR']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ–≥–æ–Ω—å–∫–µ: {str(e)}"
                )
            )

    def cog_unload(self):
        self.check_streaks.cancel()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ –∫–æ–≥–∞

    @tasks.loop(minutes=5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    async def check_streaks(self):
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–≥–æ–Ω—å–∫–∞–º–∏
                cursor.execute("SELECT user_id, last_message_date FROM user_streaks WHERE is_active = 1")
                active_users = cursor.fetchall()

                now = datetime.now()
                for user_id, last_message_str in active_users:
                    if last_message_str:
                        last_message = datetime.fromisoformat(last_message_str)
                        # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 24 —á–∞—Å–æ–≤
                        if (now - last_message) > timedelta(hours=24):
                            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–≥–æ–Ω–µ–∫
                            cursor.execute("""
                                UPDATE user_streaks 
                                SET streak_count = 0,
                                    is_active = 0
                                WHERE user_id = ?
                            """, (user_id,))
                            
                            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            try:
                                for guild in self.bot.guilds:
                                    member = guild.get_member(user_id)
                                    if member:
                                        await self.update_nickname(member, 0)
                                        break
                            except:
                                pass
                conn.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–≥–æ–Ω—å–∫–æ–≤: {e}")

    @check_streaks.before_loop
    async def before_check_streaks(self):
        await self.bot.wait_until_ready()  # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞

async def setup(bot):
    await bot.add_cog(Streak(bot)) 