import discord
from discord.ext import commands
from discord import app_commands
from typing import Dict, List, Optional
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.constants import Emojis
from Niludetsu.moderation.automod import AutoModManager

class ViolationsButton(discord.ui.Button):
    def __init__(self):
        super().__init__(
            style=discord.ButtonStyle.primary,
            label="–ù–∞—Ä—É—à–µ–Ω–∏—è",
            emoji="üìä",
            custom_id="violations"
        )
        
    async def callback(self, interaction: discord.Interaction):
        modal = UserSelect()
        await interaction.response.send_modal(modal)

class ClearViolationsButton(discord.ui.Button):
    def __init__(self):
        super().__init__(
            style=discord.ButtonStyle.danger,
            label="–û—á–∏—Å—Ç–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è",
            emoji="üóëÔ∏è",
            custom_id="clear_violations"
        )
        
    async def callback(self, interaction: discord.Interaction):
        modal = UserSelect(clear=True)
        await interaction.response.send_modal(modal)

class UserSelect(discord.ui.Modal, title="–í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"):
    user_id = discord.ui.TextInput(
        label="ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        placeholder="–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        required=True,
        min_length=17,
        max_length=20
    )
    
    def __init__(self, clear: bool = False):
        super().__init__()
        self.clear = clear
        
    async def on_submit(self, interaction: discord.Interaction):
        try:
            user_id = int(self.user_id.value)
            member = interaction.guild.get_member(user_id)
            
            if not member:
                embed = Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                    color="RED"
                )
                return await interaction.response.send_message(embed=embed, ephemeral=True)
                
            automod = interaction.client.get_cog("AutoMod")
            if not automod:
                embed = Embed(
                    title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                    description="–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω",
                    color="RED"
                )
                return await interaction.response.send_message(embed=embed, ephemeral=True)
                
            manager = AutoModManager(interaction.client)
            
            if self.clear:
                success = await manager.clear_violations(member.id, interaction.guild.id)
                if success:
                    embed = Embed(
                        title=f"{Emojis.SUCCESS} –ù–∞—Ä—É—à–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã",
                        description=f"–í—Å–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention} –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã",
                        color="GREEN"
                    )
                else:
                    embed = Embed(
                        title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                        description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è",
                        color="RED"
                    )
            else:
                violations = await manager.get_violations(member.id, interaction.guild.id)
                embed = manager.create_violations_embed(member, violations, automod.rules)
                
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        except ValueError:
            embed = Embed(
                title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                color="RED"
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)

class RuleButton(discord.ui.Button):
    def __init__(self, rule_name: str, rule_obj, is_enabled: bool = True):
        super().__init__(
            style=discord.ButtonStyle.green if is_enabled else discord.ButtonStyle.red,
            label=rule_obj.name,
            custom_id=f"rule_{rule_name}"
        )
        self.rule_name = rule_name
        self.rule_obj = rule_obj
        
    async def callback(self, interaction: discord.Interaction):
        view: ConfigView = self.view
        is_enabled = self.style == discord.ButtonStyle.green
        
        manager = AutoModManager(interaction.client)
        if is_enabled:
            success = await manager.add_exception(interaction.channel.id, self.rule_name)
            if success:
                self.style = discord.ButtonStyle.red
        else:
            success = await manager.remove_exception(interaction.channel.id, self.rule_name)
            if success:
                self.style = discord.ButtonStyle.green
                
        if not success:
            embed = Embed(
                title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–∏–ª–∞",
                color="RED"
            )
            return await interaction.response.send_message(embed=embed, ephemeral=True)
            
        await interaction.response.edit_message(view=self.view)

class ChannelSelect(discord.ui.ChannelSelect):
    def __init__(self):
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            channel_types=[discord.ChannelType.text]
        )
        
    async def callback(self, interaction: discord.Interaction):
        view: ConfigView = self.view
        channel = self.values[0]
        
        manager = AutoModManager(interaction.client)
        exceptions = await manager.get_channel_exceptions(channel.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        for child in view.children:
            if isinstance(child, RuleButton):
                is_enabled = child.rule_name not in exceptions
                child.style = discord.ButtonStyle.green if is_enabled else discord.ButtonStyle.red
        
        embed = Embed(
            title=f"{Emojis.SETTINGS} –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            description=f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.mention}\n\n"
                       f"üü¢ - –ü—Ä–∞–≤–∏–ª–æ –≤–∫–ª—é—á–µ–Ω–æ\n"
                       f"üî¥ - –ü—Ä–∞–≤–∏–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n\n"
                       f"**–¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:**\n",
            color="BLUE"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
        for child in view.children:
            if isinstance(child, RuleButton):
                status = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if child.style == discord.ButtonStyle.green else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
                embed.add_field(
                    name=f"{child.label}",
                    value=f"{child.rule_obj.description}\n{status}",
                    inline=False
                )
        
        await interaction.response.edit_message(embed=embed, view=view)

class ConfigView(discord.ui.View):
    def __init__(self, automod):
        super().__init__(timeout=300)
        self.automod = automod
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –∫–∞–Ω–∞–ª–æ–≤
        self.add_item(ChannelSelect())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
        for rule_name, rule_obj in automod.rules.items():
            self.add_item(RuleButton(rule_name, rule_obj))
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
        self.add_item(ViolationsButton())
        self.add_item(ClearViolationsButton())

class AutoModConfig(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        
    @commands.command(name="automod_settings", aliases=["amconfig"])
    @commands.has_permissions(administrator=True)
    async def automod_config(self, ctx):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        automod = self.bot.get_cog("AutoMod")
        if not automod:
            embed = Embed(
                title=f"{Emojis.ERROR} –û—à–∏–±–∫–∞",
                description="–ú–æ–¥—É–ª—å –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω",
                color="RED"
            )
            return await ctx.send(embed=embed)
            
        embed = Embed(
            title=f"{Emojis.SETTINGS} –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤–∏–ª –∞–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
                       "üü¢ - –ü—Ä–∞–≤–∏–ª–æ –≤–∫–ª—é—á–µ–Ω–æ\n"
                       "üî¥ - –ü—Ä–∞–≤–∏–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ\n\n"
                       "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**\n",
            color="BLUE"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞
        for rule_name, rule in automod.rules.items():
            embed.add_field(
                name=rule.name,
                value=rule.description,
                inline=False
            )
        
        view = ConfigView(automod)
        await ctx.send(embed=embed, view=view)

async def setup(bot):
    await bot.add_cog(AutoModConfig(bot)) 