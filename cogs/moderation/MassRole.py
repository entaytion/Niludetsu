import discord
from discord.ext import commands
from discord import app_commands
from utils import create_embed, has_admin_role, command_cooldown
import asyncio
from typing import List

class MassRole(commands.GroupCog, group_name="massrole"):
    def __init__(self, bot):
        self.bot = bot
        self.processing = False

    @app_commands.command(name="add")
    @app_commands.describe(role="–†–æ–ª—å –¥–ª—è –≤—ã–¥–∞—á–∏", filter_type="–§–∏–ª—å—Ç—Ä (all/members/bots)")
    @has_admin_role()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
    @command_cooldown()
    async def massrole_add(self, interaction: discord.Interaction, role: discord.Role, filter_type: str):
        """–ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º"""
        await self._process_mass_role(interaction, role, filter_type, "add")

    @app_commands.command(name="remove") 
    @app_commands.describe(role="–†–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", filter_type="–§–∏–ª—å—Ç—Ä (all/members/bots)")
    @has_admin_role()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∞
    @command_cooldown()
    async def massrole_remove(self, interaction: discord.Interaction, role: discord.Role, filter_type: str):
        """–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        await self._process_mass_role(interaction, role, filter_type, "remove")

    async def process_members_batch(self, members: List[discord.Member], role: discord.Role, action: str, moderator: discord.Member) -> tuple:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        success = 0
        failed = 0
        already = 0
        
        for member in members:
            try:
                if action == "add":
                    if role in member.roles:
                        already += 1
                        continue
                    await member.add_roles(role, reason=f"–ú–∞—Å—Å–æ–≤–∞—è –≤—ã–¥–∞—á–∞ —Ä–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator}")
                    success += 1
                else:
                    if role not in member.roles:
                        already += 1
                        continue
                    await member.remove_roles(role, reason=f"–ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {moderator}")
                    success += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
            except Exception as e:
                failed += 1
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª—å—é –¥–ª—è {member.id}: {e}")
                
        return success, failed, already

    async def _process_mass_role(self, interaction: discord.Interaction, role: discord.Role, filter_type: str, action: str):
        if self.processing:
            await interaction.response.send_message("‚ùå –£–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –º–∞—Å—Å–æ–≤–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Å —Ä–æ–ª—è–º–∏!")
            return

        try:
            self.processing = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–æ–ª–∏
            if role.position >= interaction.user.top_role.position and interaction.user != interaction.guild.owner:
                await interaction.response.send_message("‚ùå –≠—Ç–∞ —Ä–æ–ª—å –≤—ã—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–∞ –≤–∞—à–µ–π –≤—ã—Å—à–µ–π —Ä–æ–ª–∏!")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å –ø–æ —Ñ–∏–ª—å—Ç—Ä—É
            filter_type = filter_type.lower()
            if filter_type == "all":
                targets = interaction.guild.members
            elif filter_type == "members":
                targets = [m for m in interaction.guild.members if not m.bot]
            elif filter_type == "bots":
                targets = [m for m in interaction.guild.members if m.bot]
            else:
                await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: all, members –∏–ª–∏ bots")
                return

            total_members = len(targets)
            if total_members == 0:
                await interaction.response.send_message("‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —Ñ–∏–ª—å—Ç—Ä!")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await interaction.response.send_message(
                embed=create_embed(
                    title="‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...",
                    description=f"–ù–∞—á–∏–Ω–∞—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –¥–ª—è {total_members} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤..."
                )
            )
            status_message = await interaction.original_response()

            # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            total_success = 0
            total_fail = 0
            total_already = 0
            processed = 0

            # –†–∞–∑–±–∏–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10
            batch_size = 10
            for i in range(0, len(targets), batch_size):
                batch = targets[i:i + batch_size]
                success, failed, already = await self.process_members_batch(batch, role, action, interaction.user)
                
                total_success += success
                total_fail += failed
                total_already += already
                processed += len(batch)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                if i % (batch_size * 5) == 0 or processed == total_members:
                    progress = (processed / total_members) * 100
                    progress_bar = "‚ñà" * int(progress / 5) + "‚ñë" * (20 - int(progress / 5))
                    
                    action_text = "–≤—ã–¥–∞–Ω–∞" if action == "add" else "—É–¥–∞–ª–µ–Ω–∞"
                    filter_text = {
                        "-all": "–≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º",
                        "-members": "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                        "-bots": "–≤—Å–µ–º –±–æ—Ç–∞–º"
                    }[filter_type]
                    
                    embed = create_embed(
                        title=f"üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—å—é {role.name}",
                        description=(
                            f"**–ü—Ä–æ–≥—Ä–µ—Å—Å:** {progress_bar} {progress:.1f}%\n"
                            f"**–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {processed}/{total_members}\n\n"
                            f"**–†–æ–ª—å:** {role.mention}\n"
                            f"**–î–µ–π—Å—Ç–≤–∏–µ:** {action_text}\n"
                            f"**–§–∏–ª—å—Ç—Ä:** {filter_text}\n\n"
                            f"**–£—Å–ø–µ—à–Ω–æ:** {total_success}\n"
                            f"**–£–∂–µ –±—ã–ª–æ:** {total_already}\n"
                            f"**–û—à–∏–±–æ–∫:** {total_fail}"
                        )
                    )
                    await status_message.edit(embed=embed)
                    await asyncio.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—É—Å–∞

        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            self.processing = False

async def setup(bot):
    await bot.add_cog(MassRole(bot))