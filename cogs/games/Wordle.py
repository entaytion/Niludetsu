import discord
from discord.ext import commands
from discord import app_commands
from utils import create_embed
import random
import yaml

LETTERS = "–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
CORRECT = "üü©"  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
PRESENT = "üü®"  # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –±—É–∫–≤–∞ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
ABSENT = "‚¨õ"   # –ë—É–∫–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ª–æ–≤–µ

class WordleGame:
    def __init__(self, channel_id: int, message_id: int, word_length: int = 5):
        with open("config/config.yaml", "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)
            words = config.get('words', {}).get(str(word_length), [])
            if not words:
                raise ValueError(f"–ù–µ—Ç —Å–ª–æ–≤ –¥–ª–∏–Ω—ã {word_length} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            self.word = random.choice(words).upper()
        
        self.attempts = []
        self.max_attempts = 6
        self.is_won = False
        self.is_over = False
        self.channel_id = channel_id
        self.message_id = message_id
        self.word_length = word_length
        self.used_letters = {
            'correct': set(),    # –ó–µ–ª–µ–Ω—ã–µ –±—É–∫–≤—ã
            'present': set(),    # –ñ–µ–ª—Ç—ã–µ –±—É–∫–≤—ã
            'absent': set()      # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –±—É–∫–≤—ã
        }

    def make_guess(self, guess: str) -> tuple[str, list[tuple[str, str]]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        guess = guess.upper()
        result = ""
        letters_with_styles = []
        word_letters = list(self.word)
        
        # –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥: –Ω–∞—Ö–æ–¥–∏–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for i, letter in enumerate(guess):
            if letter == word_letters[i]:
                result += CORRECT
                letters_with_styles.append((letter, "correct"))
                word_letters[i] = None
                self.used_letters['correct'].add(letter)
            else:
                result += "?"
                letters_with_styles.append((letter, "unknown"))

        # –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ–º –±—É–∫–≤—ã –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
        for i, (letter, style) in enumerate(letters_with_styles):
            if style == "unknown":
                if letter in word_letters:
                    result = result[:i] + PRESENT + result[i+1:]
                    letters_with_styles[i] = (letter, "present")
                    word_letters[word_letters.index(letter)] = None
                    self.used_letters['present'].add(letter)
                else:
                    result = result[:i] + ABSENT + result[i+1:]
                    letters_with_styles[i] = (letter, "absent")
                    self.used_letters['absent'].add(letter)

        self.attempts.append((letters_with_styles, result))
        
        if guess == self.word:
            self.is_won = True
            self.is_over = True
        elif len(self.attempts) >= self.max_attempts:
            self.is_over = True

        return result, letters_with_styles

    def get_game_state(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã"""
        state = ""
        for letters_with_styles, result in self.attempts:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –±—É–∫–≤–∞–º–∏
            for letter, style in letters_with_styles:
                state += f"[{letter}]"
            state += "  "
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            state += result + "\n"
        return state

    def get_keyboard_state(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏"""
        keyboard = ""
        for letter in LETTERS:
            if letter in self.used_letters['correct']:
                keyboard += f"üü©[{letter}]"
            elif letter in self.used_letters['present']:
                keyboard += f"üü®[{letter}]"
            elif letter in self.used_letters['absent']:
                keyboard += f"‚¨õ[{letter}]"
            else:
                keyboard += f"‚¨ú[{letter}]"
            keyboard += " "
        return keyboard

class Wordle(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.active_games = {}  # {channel_id: {user_id: game}}
        with open("config/config.yaml", "r", encoding="utf-8") as f:
            self.config = yaml.safe_load(f)
            self.available_lengths = [
                length for length in map(int, self.config.get('words', {}).keys())
                if self.config['words'].get(str(length))
            ]
            self.available_lengths.sort()

    @app_commands.command(name="wordle", description="–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ Wordle")
    @app_commands.describe(word_length="–î–ª–∏–Ω–∞ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞")
    async def wordle(self, interaction: discord.Interaction, word_length: int = 5):
        if word_length not in self.available_lengths:
            await interaction.response.send_message(
                embed=create_embed(
                    description=f"‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª–∏–Ω—ã —Å–ª–æ–≤: {', '.join(map(str, self.available_lengths))}"
                )
            )
            return

        channel_id = interaction.channel_id
        user_id = interaction.user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if channel_id in self.active_games and user_id in self.active_games[channel_id]:
            await interaction.response.send_message(
                embed=create_embed(
                    description="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞!"
                )
            )
            return

        try:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π
            message = await interaction.response.send_message(
                embed=create_embed(
                    title="üéØ Wordle",
                    description=(
                        f"**{interaction.user.mention} –Ω–∞—á–∞–ª –∏–≥—Ä—É –≤ Wordle!**\n\n"
                        f"–Ø –∑–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ –∏–∑ {word_length} –±—É–∫–≤. –£ –≤–∞—Å –µ—Å—Ç—å 6 –ø–æ–ø—ã—Ç–æ–∫, —á—Ç–æ–±—ã —É–≥–∞–¥–∞—Ç—å –µ–≥–æ!\n\n"
                        "üü© - –±—É–∫–≤–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ\n"
                        "üü® - –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –Ω–µ –Ω–∞ —ç—Ç–æ–º –º–µ—Å—Ç–µ\n"
                        "‚¨õ - —Ç–∞–∫–æ–π –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ\n\n"
                        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –≤ —á–∞—Ç –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏.\n\n"
                        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—É–∫–≤—ã:\n" +
                        " ".join(f"‚¨ú[{letter}]" for letter in LETTERS)
                    )
                )
            )
            message = await interaction.original_response()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
            game = WordleGame(channel_id, message.id, word_length)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
            if channel_id not in self.active_games:
                self.active_games[channel_id] = {}
            self.active_games[channel_id][user_id] = game
        except ValueError as e:
            await interaction.response.send_message(
                embed=create_embed(
                    description=f"‚ùå {str(e)}"
                )
            )

    @commands.Cog.listener()
    async def on_message(self, message: discord.Message):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if message.author.bot:
            return

        channel_id = message.channel.id
        user_id = message.author.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if channel_id not in self.active_games or user_id not in self.active_games[channel_id]:
            return

        game = self.active_games[channel_id][user_id]
        word = message.content.lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–∏ –¥–ª–∏–Ω—ã —Å–ª–æ–≤–æ
        if len(word) != game.word_length:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –±—É–∫–≤—ã –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π
        if not all(letter in LETTERS.lower() for letter in word):
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã —á–∞—Ç–∞
        try:
            await message.delete()
        except:
            pass

        result, letters_with_styles = game.make_guess(word)
        game_state = game.get_game_state()
        keyboard_state = game.get_keyboard_state()
        
        description = (
            f"**{message.author.mention} –∏–≥—Ä–∞–µ—Ç –≤ Wordle!**\n\n"
            f"–ü–æ–ø—ã—Ç–∫–∞ {len(game.attempts)}/6:\n"
            f"```\n{game_state}```\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã:\n{keyboard_state}\n"
        )
        
        if game.is_won:
            description += f"\nüéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ `{game.word}`!**"
            del self.active_games[channel_id][user_id]
            if not self.active_games[channel_id]:
                del self.active_games[channel_id]
        elif game.is_over:
            description += f"\n‚ùå **–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: `{game.word}`**"
            del self.active_games[channel_id][user_id]
            if not self.active_games[channel_id]:
                del self.active_games[channel_id]

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π
        try:
            channel = message.channel
            game_message = await channel.fetch_message(game.message_id)
            await game_message.edit(
                embed=create_embed(
                    title="üéØ Wordle",
                    description=description
                )
            )
        except:
            pass

async def setup(bot):
    await bot.add_cog(Wordle(bot))