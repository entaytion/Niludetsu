import discord
from discord.ext import commands
from discord import app_commands
import random
import asyncio
from typing import Optional
from utils import create_embed, EMOJIS, get_user, save_user

class Duel(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.active_duels = {}

    @app_commands.command(name="duel", description="–í—ã–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥—É—ç–ª—å")
    @app_commands.describe(
        opponent="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –≤—ã–∑—ã–≤–∞–µ—Ç–µ –Ω–∞ –¥—É—ç–ª—å",
        bet="–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º 100)"
    )
    async def duel(self, interaction: discord.Interaction, opponent: discord.Member, bet: int):
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if bet < 100:
            await interaction.response.send_message(f"{EMOJIS['ERROR']} –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 100 –º–æ–Ω–µ—Ç!", ephemeral=True)
            return

        if opponent.bot:
            await interaction.response.send_message(f"{EMOJIS['ERROR']} –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –±–æ—Ç–∞ –Ω–∞ –¥—É—ç–ª—å!", ephemeral=True)
            return

        if opponent.id == interaction.user.id:
            await interaction.response.send_message(f"{EMOJIS['ERROR']} –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å —Å–µ–±—è –Ω–∞ –¥—É—ç–ª—å!", ephemeral=True)
            return

        if interaction.user.id in self.active_duels or opponent.id in self.active_duels:
            await interaction.response.send_message(f"{EMOJIS['ERROR']} –û–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –¥—É—ç–ª–∏!", ephemeral=True)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        challenger_data = get_user(interaction.user.id)
        opponent_data = get_user(opponent.id)

        challenger_balance = challenger_data["balance"]
        opponent_balance = opponent_data["balance"]

        if challenger_balance < bet:
            await interaction.response.send_message(f"{EMOJIS['ERROR']} –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å: {challenger_balance}", ephemeral=True)
            return

        if opponent_balance < bet:
            await interaction.response.send_message(f"{EMOJIS['ERROR']} –£ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! –ë–∞–ª–∞–Ω—Å –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞: {opponent_balance}", ephemeral=True)
            return

        # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞
        embed = create_embed(
            title="‚öîÔ∏è –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å!",
            description=f"{interaction.user.mention} –≤—ã–∑—ã–≤–∞–µ—Ç {opponent.mention} –Ω–∞ –¥—É—ç–ª—å!\n"
                       f"–°—Ç–∞–≤–∫–∞: **{bet}** –º–æ–Ω–µ—Ç\n\n"
                       f"–£ –≤–∞—Å –µ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–∑–æ–≤."
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        class DuelButtons(discord.ui.View):
            def __init__(self):
                super().__init__(timeout=30)
                self.value = None

            @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green, emoji="‚öîÔ∏è")
            async def accept(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != opponent.id:
                    await button_interaction.response.send_message(f"{EMOJIS['ERROR']} –¢–æ–ª—å–∫–æ {opponent.mention} –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å —ç—Ç–æ—Ç –≤—ã–∑–æ–≤!", ephemeral=True)
                    return
                self.value = True
                for item in self.children:
                    item.disabled = True
                await button_interaction.response.edit_message(view=self)
                self.stop()

            @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red, emoji="‚ùå")
            async def decline(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                if button_interaction.user.id != opponent.id:
                    await button_interaction.response.send_message(f"{EMOJIS['ERROR']} –¢–æ–ª—å–∫–æ {opponent.mention} –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —ç—Ç–æ—Ç –≤—ã–∑–æ–≤!", ephemeral=True)
                    return
                self.value = False
                for item in self.children:
                    item.disabled = True
                await button_interaction.response.edit_message(view=self)
                self.stop()

        view = DuelButtons()
        await interaction.response.send_message(embed=embed, view=view)

        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
        await view.wait()

        if view.value is None:
            await interaction.edit_original_response(
                embed=create_embed(title="‚öîÔ∏è –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞", description="–í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞ –∏—Å—Ç–µ–∫–ª–æ."),
                view=None
            )
            return

        if not view.value:
            await interaction.edit_original_response(
                embed=create_embed(title="‚öîÔ∏è –î—É—ç–ª—å –æ—Ç–º–µ–Ω–µ–Ω–∞", description=f"{opponent.mention} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –≤—ã–∑–æ–≤."),
                view=None
            )
            return

        # –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å
        self.active_duels[interaction.user.id] = True
        self.active_duels[opponent.id] = True

        duel_embed = create_embed(title="‚öîÔ∏è –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!", description="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –±–∏—Ç–≤–µ...")
        await interaction.edit_original_response(embed=duel_embed, view=None)
        await asyncio.sleep(2)

        # –°–∏–º—É–ª—è—Ü–∏—è –¥—É—ç–ª–∏
        hp_challenger = 100
        hp_opponent = 100
        round_num = 1

        while hp_challenger > 0 and hp_opponent > 0:
            damage_challenger = random.randint(15, 25)
            damage_opponent = random.randint(15, 25)

            hp_opponent -= damage_challenger
            hp_challenger -= damage_opponent

            duel_embed = create_embed(
                title=f"‚öîÔ∏è –î—É—ç–ª—å - –†–∞—É–Ω–¥ {round_num}",
                description=f"{interaction.user.mention} ‚öîÔ∏è {opponent.mention}\n\n"
                           f"**{interaction.user.name}**\n"
                           f"‚ù§Ô∏è HP: {max(0, hp_challenger)}/100\n"
                           f"‚öîÔ∏è –£–¥–∞—Ä: -{damage_opponent}\n\n"
                           f"**{opponent.name}**\n"
                           f"‚ù§Ô∏è HP: {max(0, hp_opponent)}/100\n"
                           f"‚öîÔ∏è –£–¥–∞—Ä: -{damage_challenger}"
            )
            await interaction.edit_original_response(embed=duel_embed)
            await asyncio.sleep(2)
            round_num += 1

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if hp_challenger > hp_opponent:
            winner = interaction.user
            loser = opponent
        else:
            winner = opponent
            loser = interaction.user

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
        winner_data = get_user(winner.id)
        loser_data = get_user(loser.id)

        winner_data["balance"] += bet
        loser_data["balance"] -= bet

        save_user(winner.id, winner_data)
        save_user(loser.id, loser_data)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_embed = create_embed(
            title="üèÜ –î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            description=f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner.mention}\n"
                       f"**–ü—Ä–æ–∏–≥—Ä–∞–ª:** {loser.mention}\n\n"
                       f"**–ù–∞–≥—Ä–∞–¥–∞:** {bet} –º–æ–Ω–µ—Ç\n"
                       f"**–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:** {winner_data['balance']} –º–æ–Ω–µ—Ç"
        )
        await interaction.edit_original_response(embed=final_embed)

        # –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥—É—ç–ª–∏
        del self.active_duels[interaction.user.id]
        del self.active_duels[opponent.id]

async def setup(bot):
    await bot.add_cog(Duel(bot))