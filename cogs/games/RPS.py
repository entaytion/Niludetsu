import discord
from discord.ext import commands
from discord import app_commands
from Niludetsu.utils.embed import create_embed
import random

class RPS(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.active_games = {}

    @app_commands.command(name="rps", description="–°—ã–≥—Ä–∞—Ç—å –≤ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞ —Å –±–æ—Ç–æ–º –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–º")
    @app_commands.describe(
        opponent="–£—á–∞—Å—Ç–Ω–∏–∫, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∏–≥—Ä—ã —Å –±–æ—Ç–æ–º)",
        choice="–í–∞—à –≤—ã–±–æ—Ä: –∫–∞–º–µ–Ω—å/–Ω–æ–∂–Ω–∏—Ü—ã/–±—É–º–∞–≥–∞"
    )
    async def rps(self, interaction: discord.Interaction, choice: str, opponent: discord.Member = None):
        choices = {
            "–∫–∞–º–µ–Ω—å": "üóø",
            "–Ω–æ–∂–Ω–∏—Ü—ã": "‚úÇÔ∏è",
            "–±—É–º–∞–≥–∞": "üìÑ"
        }
        
        choice = choice.lower()
        if choice not in choices:
            await interaction.response.send_message(
                embed=create_embed(
                    description="–í—ã–±–µ—Ä–∏—Ç–µ: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –±—É–º–∞–≥–∞!",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        if opponent is None:
            # –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞
            bot_choice = random.choice(list(choices.keys()))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if choice == bot_choice:
                result = "–ù–∏—á—å—è! ü§ù"
                color = "BLUE"
            elif (
                (choice == "–∫–∞–º–µ–Ω—å" and bot_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or
                (choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and bot_choice == "–±—É–º–∞–≥–∞") or
                (choice == "–±—É–º–∞–≥–∞" and bot_choice == "–∫–∞–º–µ–Ω—å")
            ):
                result = "–í—ã –ø–æ–±–µ–¥–∏–ª–∏! üéâ"
                color = "GREEN"
            else:
                result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢"
                color = "RED"
                
            await interaction.response.send_message(
                embed=create_embed(
                    title="üéÆ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞",
                    description=f"**–í–∞—à –≤—ã–±–æ—Ä:** {choices[choice]} {choice}\n"
                              f"**–í—ã–±–æ—Ä –±–æ—Ç–∞:** {choices[bot_choice]} {bot_choice}\n\n"
                              f"**{result}**",
                    color=color
                )
            )
        else:
            # –ò–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if opponent.bot:
                await interaction.response.send_message(
                    embed=create_embed(
                        description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å –±–æ—Ç–∞–º–∏!",
                        color="RED"
                    ),
                    ephemeral=True
                )
                return

            if opponent.id == interaction.user.id:
                await interaction.response.send_message(
                    embed=create_embed(
                        description="–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å —Å–∞–º–∏ —Å —Å–æ–±–æ–π!",
                        color="RED"
                    ),
                    ephemeral=True
                )
                return

            game_id = f"{interaction.user.id}-{opponent.id}"
            if game_id in self.active_games:
                await interaction.response.send_message(
                    embed=create_embed(
                        description="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ —Å —ç—Ç–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!",
                        color="RED"
                    ),
                    ephemeral=True
                )
                return

            self.active_games[game_id] = {
                "player1": {"id": interaction.user.id, "choice": choice},
                "player2": {"id": opponent.id, "choice": None}
            }

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            class RPSButtons(discord.ui.View):
                def __init__(self, cog, game_id):
                    super().__init__(timeout=30.0)
                    self.cog = cog
                    self.game_id = game_id

                @discord.ui.button(label="–ö–∞–º–µ–Ω—å", style=discord.ButtonStyle.gray)
                async def rock(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                    await self.make_choice(button_interaction, "–∫–∞–º–µ–Ω—å")

                @discord.ui.button(label="–ù–æ–∂–Ω–∏—Ü—ã", style=discord.ButtonStyle.gray)
                async def scissors(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                    await self.make_choice(button_interaction, "–Ω–æ–∂–Ω–∏—Ü—ã")

                @discord.ui.button(label="–ë—É–º–∞–≥–∞", style=discord.ButtonStyle.gray)
                async def paper(self, button_interaction: discord.Interaction, button: discord.ui.Button):
                    await self.make_choice(button_interaction, "–±—É–º–∞–≥–∞")

                async def make_choice(self, button_interaction: discord.Interaction, choice):
                    if button_interaction.user.id != self.cog.active_games[self.game_id]["player2"]["id"]:
                        await button_interaction.response.send_message("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∏–≥—Ä–∞!", ephemeral=True)
                        return

                    self.cog.active_games[self.game_id]["player2"]["choice"] = choice
                    game = self.cog.active_games[self.game_id]
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    choice1 = game["player1"]["choice"]
                    choice2 = choice
                    
                    if choice1 == choice2:
                        result = "–ù–∏—á—å—è! ü§ù"
                        color = "BLUE"
                    elif (
                        (choice1 == "–∫–∞–º–µ–Ω—å" and choice2 == "–Ω–æ–∂–Ω–∏—Ü—ã") or
                        (choice1 == "–Ω–æ–∂–Ω–∏—Ü—ã" and choice2 == "–±—É–º–∞–≥–∞") or
                        (choice1 == "–±—É–º–∞–≥–∞" and choice2 == "–∫–∞–º–µ–Ω—å")
                    ):
                        result = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <@{game['player1']['id']}>! üéâ"
                        color = "GREEN"
                    else:
                        result = f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <@{game['player2']['id']}>! üéâ"
                        color = "GREEN"

                    await button_interaction.message.edit(
                        embed=create_embed(
                            title="üéÆ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞",
                            description=f"**–í—ã–±–æ—Ä <@{game['player1']['id']}>:** {choices[choice1]} {choice1}\n"
                                      f"**–í—ã–±–æ—Ä <@{game['player2']['id']}>:** {choices[choice2]} {choice2}\n\n"
                                      f"**{result}**",
                            color=color
                        ),
                        view=None
                    )
                    del self.cog.active_games[self.game_id]

                async def on_timeout(self):
                    if self.game_id in self.cog.active_games:
                        del self.cog.active_games[self.game_id]
                        await self.message.edit(
                            embed=create_embed(
                                description="–í—Ä–µ–º—è –Ω–∞ –æ—Ç–≤–µ—Ç –∏—Å—Ç–µ–∫–ª–æ!",
                                color="RED"
                            ),
                            view=None
                        )

            view = RPSButtons(self, game_id)
            await interaction.response.send_message(
                content=f"{opponent.mention}, –≤–∞—Å –≤—ã–∑–≤–∞–ª–∏ –Ω–∞ –∏–≥—Ä—É –≤ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞!",
                embed=create_embed(
                    title="üéÆ –ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞",
                    description="–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ö–æ–¥:",
                    color="BLUE"
                ),
                view=view
            )
            view.message = await interaction.original_response()

async def setup(bot):
    await bot.add_cog(RPS(bot)) 