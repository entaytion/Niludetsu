import discord
from discord.ext import commands, tasks
import asyncio
from datetime import datetime, timedelta
import re
from Niludetsu.utils.embed import create_embed
from Niludetsu.core.base import EMOJIS

class Reminder(commands.GroupCog, group_name="reminder"):
    def __init__(self, bot):
        self.bot = bot
        self.reminders = {}
        self.check_reminders.start()

    def cog_unload(self):
        self.check_reminders.cancel()

    def parse_time(self, time_str: str) -> tuple[timedelta, str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ timedelta"""
        time_units = {
            '—Å': ('seconds', '—Å–µ–∫—É–Ω–¥'),
            '–º': ('minutes', '–º–∏–Ω—É—Ç'),
            '—á': ('hours', '—á–∞—Å–æ–≤'),
            '–¥': ('days', '–¥–Ω–µ–π'),
            '–Ω': ('weeks', '–Ω–µ–¥–µ–ª—å')
        }
        
        total_seconds = 0
        pattern = r'(\d+)([—Å–º—á–¥–Ω])'
        matches = re.findall(pattern, time_str.lower())
        
        if not matches:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
            
        time_parts = []
        for value, unit in matches:
            value = int(value)
            if unit in time_units:
                unit_name = time_units[unit][1]
                if unit == '–Ω':  # –Ω–µ–¥–µ–ª–∏
                    total_seconds += value * 7 * 24 * 60 * 60
                    time_parts.append(f"{value} {unit_name}")
                elif unit == '–¥':  # –¥–Ω–∏
                    total_seconds += value * 24 * 60 * 60
                    time_parts.append(f"{value} {unit_name}")
                elif unit == '—á':  # —á–∞—Å—ã
                    total_seconds += value * 60 * 60
                    time_parts.append(f"{value} {unit_name}")
                elif unit == '–º':  # –º–∏–Ω—É—Ç—ã
                    total_seconds += value * 60
                    time_parts.append(f"{value} {unit_name}")
                elif unit == '—Å':  # —Å–µ–∫—É–Ω–¥—ã
                    total_seconds += value
                    time_parts.append(f"{value} {unit_name}")
        
        return timedelta(seconds=total_seconds), ", ".join(time_parts)

    @tasks.loop(seconds=1)
    async def check_reminders(self):
        current_time = datetime.now()
        to_remove = []
        
        for user_id, user_reminders in self.reminders.items():
            for reminder in user_reminders[:]:
                if current_time >= reminder['time']:
                    user = self.bot.get_user(user_id)
                    if user:
                        channel = reminder.get('channel')
                        if channel:
                            embed = create_embed(
                                title="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
                                description=f"{reminder['message']}",
                                color=0x2ecc71
                            )
                            try:
                                await channel.send(f"{user.mention}", embed=embed)
                            except:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°
                                try:
                                    await user.send(embed=embed)
                                except:
                                    pass
                    user_reminders.remove(reminder)
            
            if not user_reminders:
                to_remove.append(user_id)
        
        for user_id in to_remove:
            del self.reminders[user_id]

    @discord.app_commands.command(name="create", description="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    @discord.app_commands.describe(
        time="–í—Ä–µ–º—è –¥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30—Å, 15–º, 2—á, 1–¥, 1–Ω)",
        message="–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    )
    async def create(self, interaction: discord.Interaction, time: str, message: str):
        try:
            time_delta, time_str = self.parse_time(time)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if time_delta.total_seconds() < 5:  # –ú–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
                await interaction.response.send_message(
                    embed=create_embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - 5 —Å–µ–∫—É–Ω–¥!",
                        color=0xe74c3c
                    )
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if time_delta.total_seconds() > 30 * 24 * 60 * 60:  # 30 –¥–Ω–µ–π
                await interaction.response.send_message(
                    embed=create_embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - 30 –¥–Ω–µ–π!",
                        color=0xe74c3c
                    )
                )
                return

            reminder_time = datetime.now() + time_delta
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if interaction.user.id not in self.reminders:
                self.reminders[interaction.user.id] = []
            
            if len(self.reminders[interaction.user.id]) >= 5:
                await interaction.response.send_message(
                    embed=create_embed(
                        title="‚ùå –û—à–∏–±–∫–∞",
                        description="–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (5)!",
                        color=0xe74c3c
                    )
                )
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            self.reminders[interaction.user.id].append({
                'message': message,
                'time': reminder_time,
                'channel': interaction.channel
            })

            await interaction.response.send_message(
                embed=create_embed(
                    title="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ",
                    description=f"–Ø –Ω–∞–ø–æ–º–Ω—é –≤–∞–º —á–µ—Ä–µ–∑ {time_str}:\n{message}",
                    color=0x2ecc71
                )
            )
            
        except ValueError as e:
            await interaction.response.send_message(
                embed=create_embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=str(e) if str(e) != "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏" else 
                              "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 30—Å, 15–º, 2—á, 1–¥, 1–Ω",
                    color=0xe74c3c
                )
            )
        except Exception as e:
            await interaction.response.send_message(
                embed=create_embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
                    color=0xe74c3c
                )
            )

    @discord.app_commands.command(name="list", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    async def list(self, interaction: discord.Interaction):
        if interaction.user.id not in self.reminders or not self.reminders[interaction.user.id]:
            await interaction.response.send_message(
                embed=create_embed(
                    title="üìù –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                    description="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!",
                    color=0xf1c40f
                )
            )
            return

        reminders_list = []
        for i, reminder in enumerate(self.reminders[interaction.user.id], 1):
            time_left = reminder['time'] - datetime.now()
            total_seconds = int(time_left.total_seconds())
            
            if total_seconds < 0:
                continue
                
            days = total_seconds // (24 * 3600)
            hours = (total_seconds % (24 * 3600)) // 3600
            minutes = (total_seconds % 3600) // 60
            seconds = total_seconds % 60
            
            time_parts = []
            if days > 0:
                time_parts.append(f"{days}–¥")
            if hours > 0:
                time_parts.append(f"{hours}—á")
            if minutes > 0:
                time_parts.append(f"{minutes}–º")
            if seconds > 0 or not time_parts:  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—É–Ω–¥—ã –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –µ–¥–∏–Ω–∏—Ü
                time_parts.append(f"{seconds}—Å")
            
            time_str = " ".join(time_parts)
            reminders_list.append(f"**{i}.** –ß–µ—Ä–µ–∑ {time_str}: {reminder['message']}")

        embed = create_embed(
            title="üìù –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            description="\n".join(reminders_list),
            color=0x3498db
        )
        await interaction.response.send_message(embed=embed)

    @discord.app_commands.command(name="delete", description="–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    @discord.app_commands.describe(number="–ù–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reminder list —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫)")
    async def delete(self, interaction: discord.Interaction, number: int):
        if (interaction.user.id not in self.reminders or 
            not self.reminders[interaction.user.id] or 
            number < 1 or 
            number > len(self.reminders[interaction.user.id])):
            
            await interaction.response.send_message(
                embed=create_embed(
                    title="‚ùå –û—à–∏–±–∫–∞",
                    description="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
                    color=0xe74c3c
                )
            )
            return

        removed_reminder = self.reminders[interaction.user.id].pop(number - 1)
        if not self.reminders[interaction.user.id]:
            del self.reminders[interaction.user.id]

        await interaction.response.send_message(
            embed=create_embed(
                title="‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ",
                description=f"–£–¥–∞–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{removed_reminder['message']}",
                color=0x2ecc71
            )
        )

async def setup(bot):
    await bot.add_cog(Reminder(bot)) 