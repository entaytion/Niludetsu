import discord
from discord import app_commands
from discord.ext import commands
import math
import re
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.emojis import EMOJIS

class Math(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.operators = {
            '+': lambda x, y: x + y,
            '-': lambda x, y: x - y,
            '*': lambda x, y: x * y,
            '/': lambda x, y: x / y if y != 0 else float('inf'),
            '^': lambda x, y: x ** y,
            'sqrt': lambda x: math.sqrt(x),
            'sin': lambda x: math.sin(math.radians(x)),
            'cos': lambda x: math.cos(math.radians(x)),
            'tan': lambda x: math.tan(math.radians(x))
        }

    def evaluate_expression(self, expression: str) -> float:
        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏
        expression = expression.replace(',', '.')
        # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã
        expression = expression.replace(' ', '')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–æ—Ä–Ω—è
        trig_pattern = r'(sqrt|sin|cos|tan)\(([^)]+)\)'
        while re.search(trig_pattern, expression):
            match = re.search(trig_pattern, expression)
            func_name = match.group(1)
            arg = self.evaluate_expression(match.group(2))
            result = self.operators[func_name](arg)
            expression = expression[:match.start()] + str(result) + expression[match.end():]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–æ–±–æ–∫
        while '(' in expression:
            start = expression.rindex('(')
            end = expression.find(')', start)
            if end == -1:
                raise ValueError("–ù–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏")
            result = self.evaluate_expression(expression[start + 1:end])
            expression = expression[:start] + str(result) + expression[end + 1:]

        # –†–∞–∑–±–∏–≤–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Ç–æ–∫–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        tokens = []
        current_number = ''
        
        for char in expression:
            if char in '+-*/^':
                if current_number:
                    tokens.append(current_number)
                    current_number = ''
                tokens.append(char)
            else:
                current_number += char
        if current_number:
            tokens.append(current_number)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        if not tokens:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
        
        try:
            tokens = [float(t) if t not in '+-*/^' else t for t in tokens]
        except ValueError:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–µ–ø–µ–Ω–∏ (^)
        i = 0
        while i < len(tokens):
            if tokens[i] == '^':
                if i == 0 or i == len(tokens) - 1:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–µ–ø–µ–Ω–∏")
                base = float(tokens[i-1])
                exp = float(tokens[i+1])
                result = self.operators['^'](base, exp)
                tokens[i-1:i+2] = [result]
                i -= 1
            i += 1

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–º–Ω–æ–∂–µ–Ω–∏–µ –∏ –¥–µ–ª–µ–Ω–∏–µ
        i = 0
        while i < len(tokens):
            if tokens[i] in ['*', '/']:
                if i == 0 or i == len(tokens) - 1:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                left = float(tokens[i-1])
                right = float(tokens[i+1])
                result = self.operators[tokens[i]](left, right)
                tokens[i-1:i+2] = [result]
                i -= 1
            i += 1

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–µ–Ω–∏–µ –∏ –≤—ã—á–∏—Ç–∞–Ω–∏–µ
        result = float(tokens[0])
        i = 1
        while i < len(tokens):
            if tokens[i] in ['+', '-']:
                if i == len(tokens) - 1:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
                right = float(tokens[i+1])
                result = self.operators[tokens[i]](result, right)
            i += 2

        return result

    @app_commands.command(name="math", description="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
    @app_commands.describe(expression="–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    async def math(self, interaction: discord.Interaction, expression: str):
        result = self.evaluate_expression(expression)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.is_integer():
            formatted_result = str(int(result))
        else:
            formatted_result = f"{result:.2f}"

        embed=Embed(
            title="üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
        )
        embed.add_field(
            name="–í—ã—Ä–∞–∂–µ–Ω–∏–µ:",
            value=f"```{expression}```",
            inline=False
        )
        embed.add_field(
            name="–†–µ–∑—É–ª—å—Ç–∞—Ç:",
            value=f"```{formatted_result}```",
            inline=False
        )
        await interaction.response.send_message(embed=embed)

async def setup(bot):
    await bot.add_cog(Math(bot)) 