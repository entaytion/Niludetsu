import discord
from discord.ext import commands
from discord import app_commands
from utils import create_embed
from deep_translator import GoogleTranslator
import yaml

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
with open('config/config.yaml', 'r', encoding='utf-8') as f:
    config = yaml.safe_load(f)

DETECT_LANG_API_KEY = config.get('apis').get('language_detection').get('key')

LANGUAGES = {
    'en': '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π',
    'ru': '–†—É—Å—Å–∫–∏–π',
    'uk': '–£–∫—Ä–∞–∏–Ω—Å–∫–∏–π', 
    'es': '–ò—Å–ø–∞–Ω—Å–∫–∏–π',
    'fr': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π',
    'de': '–ù–µ–º–µ—Ü–∫–∏–π',
    'it': '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π',
    'pl': '–ü–æ–ª—å—Å–∫–∏–π',
    'ja': '–Ø–ø–æ–Ω—Å–∫–∏–π',
    'ko': '–ö–æ—Ä–µ–π—Å–∫–∏–π',
    'zh-CN': '–ö–∏—Ç–∞–π—Å–∫–∏–π'
}

class Translate(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @app_commands.command(name="translate", description="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–æ–π —è–∑—ã–∫")
    @app_commands.describe(
        text="–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞",
        to_lang="–Ø–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏",
        from_lang="–Ø–∑—ã–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)"
    )
    @app_commands.choices(
        to_lang=[
            app_commands.Choice(name=name, value=code)
            for code, name in LANGUAGES.items()
        ],
        from_lang=[
            app_commands.Choice(name=name, value=code)
            for code, name in LANGUAGES.items()
        ]
    )
    async def translate(
        self,
        interaction: discord.Interaction,
        text: str,
        to_lang: str,
        from_lang: str = None
    ):
        await interaction.response.defer()

        try:
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
            translator = GoogleTranslator(
                source='auto' if from_lang is None else from_lang,
                target=to_lang
            )

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            translation = translator.translate(text)

            # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ
            if from_lang is None:
                try:
                    detected_lang = translator.detect(text)
                    from_lang = detected_lang if detected_lang in LANGUAGES else 'auto'
                except:
                    from_lang = 'auto'

            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
            embed = create_embed(
                title="üåê –ü–µ—Ä–µ–≤–æ–¥",
                description=(
                    f"**–û—Ä–∏–≥–∏–Ω–∞–ª ({LANGUAGES.get(from_lang, from_lang)}):**\n{text}\n\n"
                    f"**–ü–µ—Ä–µ–≤–æ–¥ ({LANGUAGES.get(to_lang, to_lang)}):**\n{translation}"
                )
            )

            await interaction.followup.send(embed=embed)

        except Exception as e:
            await interaction.followup.send(
                embed=create_embed(
                    description=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}"
                )
            )

async def setup(bot):
    await bot.add_cog(Translate(bot))