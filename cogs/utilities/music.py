import discord
from discord.ext import commands
import wavelink
from utils import create_embed, FOOTER_ERROR, FOOTER_SUCCESS
import json

with open('lavalink_config.json', 'r') as f:
    LAVALINK_SERVER = json.load(f)
    
import random

class Music(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.node = None
        self.repeating = {}
        self.nightcore_enabled = {}
        bot.loop.create_task(self.connect_nodes())
        
        bot.event(self.on_wavelink_track_end)
        bot.event(self.on_wavelink_track_start)
        bot.event(self.on_voice_state_update)

    async def connect_nodes(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Lavalink"""
        await self.bot.wait_until_ready()
        self.node = wavelink.Node(
            uri=f"{'ws' if not LAVALINK_SERVER['secure'] else 'wss'}://{LAVALINK_SERVER['host']}:{LAVALINK_SERVER['port']}",
            password=LAVALINK_SERVER['password'],
            identifier=LAVALINK_SERVER['identifier']
        )
        await wavelink.Pool.connect(nodes=[self.node], client=self.bot)
        print("Music node connected successfully!")

    async def get_player(self, interaction: discord.Interaction) -> wavelink.Player | None:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            player = wavelink.Pool.get_node().get_player(interaction.guild.id)
            if player:
                return player
            return await interaction.user.voice.channel.connect(cls=wavelink.Player)
        except Exception as e:
            print(f"Error getting/creating player: {e}")
            return None

    async def is_connected(self, interaction: discord.Interaction) -> wavelink.Player | None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞."""
        player = wavelink.Pool.get_node().get_player(interaction.guild.id)
        if not player or not player.is_connected():
            await interaction.response.send_message(
                embed=create_embed(
                    description="–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                    footer=FOOTER_ERROR
                ),
                ephemeral=True
            )
            return None
        return player

    async def is_playing(self, interaction: discord.Interaction) -> wavelink.Player | None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–µ–π—á–∞—Å —á—Ç–æ-—Ç–æ –∏–≥—Ä–∞–µ—Ç."""
        player = wavelink.Pool.get_node().get_player(interaction.guild.id)
        if not player or not player.is_connected():
            await interaction.response.send_message(
                embed=create_embed(
                    description="–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                    footer=FOOTER_ERROR
                ),
                ephemeral=True
            )
            return None
        if not player.playing:
            await interaction.response.send_message(
                embed=create_embed(
                    description="–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!",
                    footer=FOOTER_ERROR
                ),
                ephemeral=True
            )
            return None
        return player

    @discord.app_commands.command(name="play", description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –º—É–∑—ã–∫—É")
    @discord.app_commands.describe(query="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º—É–∑—ã–∫–∏")
    async def play(self, interaction: discord.Interaction, query: str):
        if not interaction.user.voice:
            await interaction.response.send_message(
                embed=create_embed(
                    description="–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!",
                    footer=FOOTER_ERROR
                ),
                ephemeral=True
            )
            return

        await interaction.response.defer(thinking=True)

        if not self.node or not wavelink.Pool.get_node():
            await interaction.followup.send(
                embed=create_embed(
                    description="–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                    footer=FOOTER_ERROR
                )
            )
            return

        player = await self.get_player(interaction)
        if not player:
            await interaction.followup.send(
                embed=create_embed(
                    description="–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                    footer=FOOTER_ERROR
                )
            )
            return

        
        if not hasattr(player, 'home'):
            player.home = interaction.channel

        try:
            tracks = await wavelink.Playable.search(query)
            if not tracks:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!",
                        footer=FOOTER_ERROR
                    )
                )
                return

            track = tracks[0]

            if player.playing:
                player.queue.put(track)
                await interaction.followup.send(
                    embed=create_embed(
                        title="üé∂ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:",
                        description=f"**{track.title}**\n–ó–∞–ø—Ä–æ—Å–∏–ª: {interaction.user.mention}",
                        footer=FOOTER_SUCCESS
                    )
                )
            else:
                await player.play(track)
                await interaction.followup.send(
                    embed=create_embed(
                        title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:",
                        description=f"**{track.title}**\n–ó–∞–ø—Ä–æ—Å–∏–ª: {interaction.user.mention}",
                        footer=FOOTER_SUCCESS
                    )
                )
        except Exception as e:
            print(f"Error in play command: {e}")
            await interaction.followup.send(
                embed=create_embed(
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞!",
                    footer=FOOTER_ERROR
                )
            )

    @discord.app_commands.command(name="np", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
    async def nowplaying(self, interaction: discord.Interaction):
        await interaction.response.defer()

        player = wavelink.Pool.get_node().get_player(interaction.guild.id)
        if not player or not player.playing:
            await interaction.followup.send(
                embed=create_embed(
                    description="–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!",
                    footer=FOOTER_ERROR
                )
            )
            return

        track = player.current
        if not track:
            await interaction.followup.send(
                embed=create_embed(
                    description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ!",
                    footer=FOOTER_ERROR
                )
            )
            return

        current_time = int(player.position / 1000)  
        total_time = int(track.length / 1000)  

        progress_segments = 9
        if total_time > 0:
            progress = "‚ñ¨" * (current_time * progress_segments // total_time)
        else:
            progress = "‚ñ¨" * progress_segments
        progress += "‚è∫Ô∏è"
        remaining_segments = progress_segments - len(progress) + 1
        if remaining_segments > 0:
            progress += "‚ñ¨" * remaining_segments

        def format_time(seconds):
            minutes, seconds = divmod(seconds, 60)
            hours, minutes = divmod(minutes, 60)
            if hours > 0:
                return f"{hours:02}:{minutes:02}:{seconds:02}"
            return f"{minutes:02}:{seconds:02}"

        embed = create_embed(
            title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:",
            description=f"**{track.title}**\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {track.author}",
            footer=FOOTER_SUCCESS
        )
        embed.add_field(
            name="üîä –ü—Ä–æ–≥—Ä–µ—Å—Å:",
            value=f"{progress}\n‚è±Ô∏è {format_time(current_time)} / {format_time(total_time)}",
            inline=False
        )

        await interaction.followup.send(embed=embed)

    @discord.app_commands.command(name="skip", description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
    async def skip(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        try:
            player = await self.get_player(interaction)
            if not player:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            if not player.current:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            await player.stop()
            await interaction.followup.send(
                embed=create_embed(
                    description="–¢—Ä–µ–∫ –ø—Ä–æ–ø—É—â–µ–Ω!",
                    footer=FOOTER_SUCCESS
                )
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ skip: {e}")
            await interaction.followup.send(
                embed=create_embed(
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Ç—Ä–µ–∫–∞!",
                    footer=FOOTER_ERROR
                )
            )

    @discord.app_commands.command(name="queue", description="–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏ —Ç—Ä–µ–∫–æ–≤")
    async def queue(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        try:
            
            player: wavelink.Player = wavelink.Pool.get_node().get_player(interaction.guild.id)
            if not player or not player.connected:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            current = player.current
            tracks = list(player.queue)

            if not current and not tracks:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!",
                        footer=FOOTER_ERROR
                    )
                )
                return

            queue_text = []
            
            if current:
                queue_text.append(f"**–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:** {current.title}")
            
            if tracks:
                queue_text.append("\n**–í –æ—á–µ—Ä–µ–¥–∏:**")
                for i, track in enumerate(tracks, 1):
                    queue_text.append(f"**{i}.** {track.title}")
                    if i >= 10:  
                        remaining = len(tracks) - 10
                        if remaining > 0:
                            queue_text.append(f"\n–ò –µ—â–µ {remaining} —Ç—Ä–µ–∫–æ–≤...")
                        break

            await interaction.followup.send(
                embed=create_embed(
                    title="üéµ –û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤:",
                    description="\n".join(queue_text),
                    footer=FOOTER_SUCCESS
                )
            )
        except Exception as e:
            print(f"Error in queue command: {e}")
            await interaction.followup.send(
                embed=create_embed(
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—á–µ—Ä–µ–¥–∏!",
                    footer=FOOTER_ERROR
                )
            )

    @discord.app_commands.command(name="leave", description="–û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
    async def leave(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        try:
            player = await self.get_player(interaction)
            if not player or not player.connected:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return
                
            await player.disconnect()
            await interaction.followup.send(
                embed=create_embed(
                    description="–û—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                    footer=FOOTER_SUCCESS
                )
            )
        except Exception as e:
            print(f"Error in leave command: {e}")
            await interaction.followup.send(
                embed=create_embed(
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!",
                    footer=FOOTER_ERROR
                ),
                ephemeral=True
            )

    @discord.app_commands.command(name="pause", description="–ü–æ—Å—Ç–∞–≤–∏—Ç—å –º—É–∑—ã–∫—É –Ω–∞ –ø–∞—É–∑—É")
    async def pause(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        try:
            player = await self.get_player(interaction)
            if not player or not player.connected:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            if not player.current:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            await player.pause(not player.paused)
            status = "–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É" if player.paused else "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞"
            
            await interaction.followup.send(
                embed=create_embed(
                    description=f"–ú—É–∑—ã–∫–∞ {status}.",
                    footer=FOOTER_SUCCESS
                )
            )
        except Exception as e:
            print(f"Error in pause command: {e}")
            await interaction.followup.send(
                embed=create_embed(
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!",
                    footer=FOOTER_ERROR
                ),
                ephemeral=True
            )

    @discord.app_commands.command(name="repeat", description="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫")
    async def repeat(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        try:
            player = await self.get_player(interaction)
            if not player or not player.connected:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            if not player.current:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            guild_id = interaction.guild.id
            self.repeating[guild_id] = not self.repeating.get(guild_id, False)
            status = "–≤–∫–ª—é—á–µ–Ω–æ" if self.repeating[guild_id] else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
            
            await interaction.followup.send(
                embed=create_embed(
                    description=f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ {status}.",
                    footer=FOOTER_SUCCESS
                )
            )
        except Exception as e:
            print(f"Error in repeat command: {e}")
            await interaction.followup.send(
                embed=create_embed(
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!",
                    footer=FOOTER_ERROR
                ),
                ephemeral=True
            )

    @discord.app_commands.command(name="shuffle", description="–ü–µ—Ä–µ–º–µ—à–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤")
    async def shuffle(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        try:
            player = await self.get_player(interaction)
            if not player or not player.connected:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            if not player.queue:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            queue_list = list(player.queue)
            random.shuffle(queue_list)
            player.queue.clear()
            for track in queue_list:
                player.queue.put(track)

            await interaction.followup.send(
                embed=create_embed(
                    description="–û—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞.",
                    footer=FOOTER_SUCCESS
                )
            )
        except Exception as e:
            print(f"Error in shuffle command: {e}")
            await interaction.followup.send(
                embed=create_embed(
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!",
                    footer=FOOTER_ERROR
                ),
                ephemeral=True
            )

    @discord.app_commands.command(name="resume", description="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
    async def resume(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        try:
            player = await self.get_player(interaction)
            if not player or not player.connected:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            if not player.paused:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–ú—É–∑—ã–∫–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            await player.pause(False)
            await interaction.followup.send(
                embed=create_embed(
                    description="–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–æ.",
                    footer=FOOTER_SUCCESS
                )
            )
        except Exception as e:
            print(f"Error in resume command: {e}")
            await interaction.followup.send(
                embed=create_embed(
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!",
                    footer=FOOTER_ERROR
                ),
                ephemeral=True
            )

    @discord.app_commands.command(name="nightcore", description="–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç Nightcore")
    async def nightcore(self, interaction: discord.Interaction):
        await interaction.response.defer()
        
        try:
            player = await self.get_player(interaction)
            if not player or not player.connected:
                await interaction.followup.send(
                    embed=create_embed(
                        description="–Ø –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                        footer=FOOTER_ERROR
                    ),
                    ephemeral=True
                )
                return

            guild_id = interaction.guild.id
            filters = wavelink.Filters()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
            if not self.nightcore_enabled.get(guild_id, False):
                filters.timescale.set(speed=1.2, pitch=1.2, rate=1.0)
                self.nightcore_enabled[guild_id] = True
                status = "–≤–∫–ª—é—á–µ–Ω"
            else:
                filters = wavelink.Filters()  # –°–∫–∏–¥–∞—î–º–æ –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
                self.nightcore_enabled[guild_id] = False
                status = "–≤—ã–∫–ª—é—á–µ–Ω"

            await player.set_filters(filters)
            await interaction.followup.send(
                embed=create_embed(
                    description=f"–≠—Ñ—Ñ–µ–∫—Ç Nightcore {status}!",
                    footer=FOOTER_SUCCESS
                )
            )
        except Exception as e:
            print(f"Error in nightcore command: {e}")
            await interaction.followup.send(
                embed=create_embed(
                    description="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —ç—Ñ—Ñ–µ–∫—Ç–∞!",
                    footer=FOOTER_ERROR
                ),
                ephemeral=True
            )

    async def on_wavelink_track_end(self, payload: wavelink.TrackEndEventPayload) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
        player = payload.player
        
        if not player:
            return
        
        if self.repeating.get(player.guild.id):
            await player.play(payload.track)
            return
        
        if player.queue:
            next_track = await player.queue.get_wait()
            await player.play(next_track)

    async def on_wavelink_track_start(self, payload: wavelink.TrackStartEventPayload) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–∫–∞"""
        player = payload.player
        track = payload.track
        
        if not player or not track:
            return
        
        embed = create_embed(
            title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç:",
            description=f"**{track.title}**\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {track.author}",
            footer=FOOTER_SUCCESS
        )
        
        if hasattr(player, 'home'):
            await player.home.send(embed=embed)

    async def on_voice_state_update(self, member: discord.Member, before: discord.VoiceState, after: discord.VoiceState):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        if member.bot:  
            return
        
        player = wavelink.Pool.get_node().get_player(member.guild.id)
        if not player:
            return
        
        if not player.channel:
            return
        
        channel_members = len([m for m in player.channel.members if not m.bot])
        if channel_members == 0:
            await player.disconnect()
            if hasattr(player, 'home'):
                await player.home.send(
                    embed=create_embed(
                        description="–í—Å–µ –≤—ã—à–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞. –û—Ç–∫–ª—é—á–∞—é—Å—å...",
                        footer=FOOTER_SUCCESS
                    )
                )

async def setup(bot):
    await bot.add_cog(Music(bot))