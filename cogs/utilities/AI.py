import discord
from discord.ext import commands
from discord import app_commands
from utils import create_embed
import g4f
import asyncio
import random
import platform
import sys

class AI(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        self.providers = [
            g4f.Provider.ChatGptt,
            g4f.Provider.OIVSCode,
            g4f.Provider.Blackbox,
        ]
        self.current_provider_index = 0

    async def get_ai_response(self, prompt: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò —á–µ—Ä–µ–∑ g4f"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π event loop
        for provider in self.providers:
            try:
                response = await asyncio.get_event_loop().run_in_executor(None, 
                    lambda: g4f.ChatCompletion.create(
                        model="gpt-4o",
                        messages=[{
                            "role": "system",
                            "content": "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                        }, {
                            "role": "user",
                            "content": prompt
                        }],
                        provider=provider
                    )
                )
                if response and isinstance(response, str):
                    return response
            except Exception as e:
                print(f"Error with provider {provider.__name__}: {str(e)}")
                continue
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    @app_commands.command(name="ai", description="–°–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ —É –ò–ò")
    @app_commands.describe(–≤–æ–ø—Ä–æ—Å="–í–∞—à –≤–æ–ø—Ä–æ—Å –∫ –ò–ò")
    async def ai(self, interaction: discord.Interaction, –≤–æ–ø—Ä–æ—Å: str):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ò–ò"""
        await interaction.response.defer()
        
        try:
            response = await self.get_ai_response(–≤–æ–ø—Ä–æ—Å)
            
            embed = create_embed(
                title="ü§ñ –û—Ç–≤–µ—Ç –ò–ò",
                description=response
            )
            await interaction.followup.send(embed=embed)
            
        except Exception as e:
            error_embed = create_embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )
            await interaction.followup.send(embed=error_embed)

async def setup(bot):
    await bot.add_cog(AI(bot)) 