import discord
from discord.ext import commands
from discord import app_commands
from utils import create_embed
import g4f
import asyncio
import random

class AI(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤
        self.providers = [
            g4f.Provider.AIChatFree,
            g4f.Provider.Blackbox,
            g4f.Provider.ChatGptt,
            g4f.Provider.PerplexityLabs
        ]

    async def get_ai_response(self, prompt: str) -> str:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –®–Ü —á–µ—Ä–µ–∑ g4f"""
        loop = asyncio.get_event_loop()
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ñ–≤, –ø–æ–∫–∏ –Ω–µ –æ—Ç—Ä–∏–º–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        for provider in random.sample(self.providers, len(self.providers)):
            try:
                response = await loop.run_in_executor(None, 
                    lambda: g4f.ChatCompletion.create(
                        model="gpt-3.5-turbo",
                        messages=[{
                            "role": "system",
                            "content": "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                        }, {
                            "role": "user",
                            "content": prompt
                        }],
                        provider=provider
                    )
                )
                if response and isinstance(response, str):
                    return response
            except Exception as e:
                print(f"Error with provider {provider.__name__}: {e}")
                continue
        
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."

    @app_commands.command(name="ai", description="–°–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ —É –ò–ò")
    @app_commands.describe(–≤–æ–ø—Ä–æ—Å="–í–∞—à –≤–æ–ø—Ä–æ—Å –∫ –ò–ò")
    async def ai(self, interaction: discord.Interaction, –≤–æ–ø—Ä–æ—Å: str):
        try:
            await interaction.response.defer()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò
            answer = await self.get_ai_response(–≤–æ–ø—Ä–æ—Å)

            # –°–æ–∑–¥–∞–µ–º —ç–º–±–µ–¥ —Å –æ—Ç–≤–µ—Ç–æ–º
            embed = create_embed(
                title="ü§ñ –û—Ç–≤–µ—Ç –ò–ò",
                description=answer,
                footer={
                    "text": f"–°–ø—Ä–æ—Å–∏–ª: {interaction.user.display_name}",
                    "icon_url": interaction.user.avatar.url if interaction.user.avatar else None
                }
            )

            await interaction.followup.send(embed=embed)

        except Exception as e:
            await interaction.followup.send(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def setup(bot):
    await bot.add_cog(AI(bot)) 