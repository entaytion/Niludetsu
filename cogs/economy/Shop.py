import discord
from discord import Interaction
from discord.ext import commands
from Niludetsu.database import Database
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.emojis import EMOJIS
from discord.ext import commands
from discord import app_commands
from typing import Optional, List
import math

ITEMS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ

class RoleSelect(discord.ui.Select):
    def __init__(self, roles: List[dict], guild: discord.Guild):
        self.guild = guild
        options = [
            discord.SelectOption(
                label=f"{role['price']}üí∞ {guild.get_role(int(role['role_id'])).name}",
                value=role['role_id'],
                description=role['description'][:100] if role['description'] else None
            ) for role in roles if guild.get_role(int(role['role_id']))
        ]
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏...",
            min_values=1,
            max_values=1,
            options=options
        )
        self.roles = {role['role_id']: role for role in roles}

    async def callback(self, interaction: discord.Interaction):
        role_id = self.values[0]
        role_data = self.roles[role_id]
        
        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm = discord.ui.Button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=discord.ButtonStyle.green)
        cancel = discord.ui.Button(label="–û—Ç–º–µ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
        
        async def confirm_callback(btn_interaction):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self.view.db.ensure_user(btn_interaction.user.id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å, –±–µ–∑ —É—á–µ—Ç–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
            if user_data['balance'] < role_data['price']:
                await btn_interaction.response.send_message(
                    embed=Embed(
                        description=f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ –±–∞–ª–∞–Ω—Å–µ! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ: {role_data['price']}üí∞\n–í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']}üí∞",
                        color="RED"
                    ),
                    ephemeral=True
                )
                return
                
            # –ü–æ–∫—É–ø–∞–µ–º —Ä–æ–ª—å
            role = btn_interaction.guild.get_role(int(role_id))
            if not role:
                await btn_interaction.response.send_message(
                    embed=Embed(
                        description="‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                        color="RED"
                    ),
                    ephemeral=True
                )
                return
                
            # –°–Ω–∏–º–∞–µ–º –¥–µ–Ω—å–≥–∏ —Ç–æ–ª—å–∫–æ —Å –±–∞–ª–∞–Ω—Å–∞
            new_balance = user_data['balance'] - role_data['price']
            await self.view.db.update("users", 
                where={"user_id": str(btn_interaction.user.id)},
                values={"balance": new_balance}
            )
            
            # –í—ã–¥–∞–µ–º —Ä–æ–ª—å
            await btn_interaction.user.add_roles(role)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
            await self.view.db.update("shop_roles",
                where={"role_id": role_id},
                values={"purchases": role_data['purchases'] + 1}
            )
            
            await btn_interaction.response.send_message(
                embed=Embed(
                    description=f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Ä–æ–ª—å {role.mention} –∑–∞ {role_data['price']}üí∞\n–û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: {new_balance}üí∞",
                    color="GREEN"
                ),
                ephemeral=True
            )
            
        async def cancel_callback(btn_interaction):
            await btn_interaction.response.send_message(
                embed=Embed(
                    description="‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
                    color="RED"
                ),
                ephemeral=True
            )
            
        confirm.callback = confirm_callback
        cancel.callback = cancel_callback
        
        view = discord.ui.View()
        view.add_item(confirm)
        view.add_item(cancel)
        
        role = interaction.guild.get_role(int(role_id))
        await interaction.response.send_message(
            embed=Embed(
                title="üõí –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏",
                description=f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∫—É–ø–∏—Ç—å —Ä–æ–ª—å {role.mention} –∑–∞ {role_data['price']}üí∞\n\n"
                          f"–û–ø–∏—Å–∞–Ω–∏–µ: {role_data['description']}\n"
                          f"–ö—É–ø–ª–µ–Ω–æ —Ä–∞–∑: {role_data['purchases']}",
                color="BLUE"
            ),
            view=view,
            ephemeral=True
        )

class ShopView(discord.ui.View):
    def __init__(self, roles: List[dict], db: Database, guild: discord.Guild, page: int = 0):
        super().__init__()
        self.roles = roles
        self.db = db
        self.guild = guild
        self.page = page
        self.max_pages = math.ceil(len(roles) / ITEMS_PER_PAGE)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–ª–µ–∫—Ç —Å —Ä–æ–ª—è–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_idx = page * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        page_roles = roles[start_idx:end_idx]
        if page_roles:
            self.add_item(RoleSelect(page_roles, guild))
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.prev_button = discord.ui.Button(
            label="‚óÄ",
            style=discord.ButtonStyle.secondary,
            disabled=(page == 0),
            custom_id="prev"
        )
        self.next_button = discord.ui.Button(
            label="‚ñ∂",
            style=discord.ButtonStyle.secondary,
            disabled=(page >= self.max_pages - 1),
            custom_id="next"
        )
        
        self.prev_button.callback = self.prev_button_callback
        self.next_button.callback = self.next_button_callback
        
        self.add_item(self.prev_button)
        self.add_item(self.next_button)

    async def prev_button_callback(self, interaction: discord.Interaction):
        await self.show_page(interaction, self.page - 1)

    async def next_button_callback(self, interaction: discord.Interaction):
        await self.show_page(interaction, self.page + 1)

    async def show_page(self, interaction: discord.Interaction, page: int):
        self.page = page
        start_idx = page * ITEMS_PER_PAGE
        end_idx = start_idx + ITEMS_PER_PAGE
        page_roles = self.roles[start_idx:end_idx]
        
        embed = Embed(title="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π")
        for role in page_roles:
            discord_role = interaction.guild.get_role(int(role['role_id']))
            if discord_role:
                embed.add_field(
                    name=f"{role['price']}üí∞ {discord_role.name}",
                    value=f"–û–ø–∏—Å–∞–Ω–∏–µ: {role['description']}\n–ö—É–ø–ª–µ–Ω–æ: {role['purchases']} —Ä–∞–∑",
                    inline=False
                )
        
        embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{self.max_pages}")
        
        view = ShopView(self.roles, self.db, interaction.guild, page)
        await interaction.response.edit_message(embed=embed, view=view)

class Shop(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()

    @app_commands.command(name="shop", description="–û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π")
    async def shop(self, interaction: discord.Interaction):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–æ–ª–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
        roles = await self.db.fetch_all(
            "SELECT * FROM shop_roles ORDER BY price ASC"
        )
        
        if not roles:
            await interaction.response.send_message(
                embed=Embed(
                    description="‚ùå –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–æ–ª–µ–π!",
                    color="RED"
                ),
                ephemeral=True
            )
            return
            
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
        embed = Embed(title="üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π")
        page_roles = roles[:ITEMS_PER_PAGE]
        
        for role in page_roles:
            discord_role = interaction.guild.get_role(int(role['role_id']))
            if discord_role:
                embed.add_field(
                    name=f"{role['price']}üí∞ {discord_role.name}",
                    value=f"–û–ø–∏—Å–∞–Ω–∏–µ: {role['description']}\n–ö—É–ø–ª–µ–Ω–æ: {role['purchases']} —Ä–∞–∑",
                    inline=False
                )
                
        embed.set_footer(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1/{math.ceil(len(roles) / ITEMS_PER_PAGE)}")
        
        view = ShopView(roles, self.db, interaction.guild)
        await interaction.response.send_message(embed=embed, view=view)

async def setup(bot):
    await bot.add_cog(Shop(bot))
