import discord
from discord.ext import commands
import random
import asyncio
from Niludetsu.database import Database
from Niludetsu.utils.embed import Embed
from Niludetsu.utils.constants import Emojis

class DuelView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=30)
        self.value = None

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.green, emoji="‚öîÔ∏è")
    async def accept(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.value = True
        self.stop()

    @discord.ui.button(label="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", style=discord.ButtonStyle.red, emoji="üè≥Ô∏è")
    async def decline(self, interaction: discord.Interaction, button: discord.ui.Button):
        self.value = False
        self.stop()

class Duel(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        self.weapons = {
            "üî´ –ü–∏—Å—Ç–æ–ª–µ—Ç": {"dmg": (15, 25), "accuracy": 0.8, "crit": 0.2},
            "üó°Ô∏è –ù–æ–∂": {"dmg": (20, 30), "accuracy": 0.9, "crit": 0.3},
            "üí£ –ì—Ä–∞–Ω–∞—Ç–∞": {"dmg": (30, 40), "accuracy": 0.6, "crit": 0.15},
            "üèπ –õ—É–∫": {"dmg": (25, 35), "accuracy": 0.75, "crit": 0.25},
            "‚ö° –ú–æ–ª–Ω–∏—è": {"dmg": (35, 45), "accuracy": 0.7, "crit": 0.35}
        }
        self.actions = [
            "—Ü–µ–ª–∏—Ç—Å—è –≤ –≥–æ–ª–æ–≤—É",
            "—Å—Ç—Ä–µ–ª—è–µ—Ç –≤ —É–ø–æ—Ä",
            "–ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–æ–π—Ç–∏ —Å —Ñ–ª–∞–Ω–≥–∞",
            "–¥–µ–ª–∞–µ—Ç —Ä–µ–∑–∫–∏–π –≤—ã–ø–∞–¥",
            "–≥–æ—Ç–æ–≤–∏—Ç –º–æ—â–Ω—É—é –∞—Ç–∞–∫—É"
        ]
        self.misses = [
            "–ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è",
            "—Ç–µ—Ä—è–µ—Ç —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ",
            "—Å–ø–æ—Ç—ã–∫–∞–µ—Ç—Å—è",
            "–Ω–µ —É—Å–ø–µ–≤–∞–µ—Ç —Å—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å",
            "—Ç–µ—Ä—è–µ—Ç –ø—Ä–∏—Ü–µ–ª"
        ]

    @discord.app_commands.command(name="duel", description="–í—ã–∑–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –¥—É—ç–ª—å")
    @discord.app_commands.describe(
        member="–ò–≥—Ä–æ–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å",
        bet="–°—É–º–º–∞ —Å—Ç–∞–≤–∫–∏"
    )
    async def duel(self, interaction: discord.Interaction, member: discord.Member, bet: int):
        if member.bot:
            await interaction.response.send_message(
                embed=Embed(
                    description="‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å –±–æ—Ç–∞!",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        if member.id == interaction.user.id:
            await interaction.response.send_message(
                embed=Embed(
                    description="‚ùå –ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        if bet <= 0:
            await interaction.response.send_message(
                embed=Embed(
                    description="‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        challenger_id = str(interaction.user.id)
        opponent_id = str(member.id)

        challenger_data = await self.db.ensure_user(challenger_id)
        opponent_data = await self.db.ensure_user(opponent_id)

        if challenger_data['balance'] < bet:
            await interaction.response.send_message(
                embed=Embed(
                    description=f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n"
                              f"–í–∞—à –±–∞–ª–∞–Ω—Å: {challenger_data.get('balance', 0):,} {Emojis.MONEY}",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        if opponent_data['balance'] < bet:
            await interaction.response.send_message(
                embed=Embed(
                    description=f"‚ùå –£ {member.mention} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n"
                              f"–ë–∞–ª–∞–Ω—Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: {opponent_data.get('balance', 0):,} {Emojis.MONEY}",
                    color="RED"
                ),
                ephemeral=True
            )
            return

        view = DuelView()
        embed=Embed(
            title="‚öîÔ∏è –í—ã–∑–æ–≤ –Ω–∞ –¥—É—ç–ª—å!",
            description=(
                f"{interaction.user.mention} –≤—ã–∑—ã–≤–∞–µ—Ç {member.mention} –Ω–∞ –¥—É—ç–ª—å!\n\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: **{bet:,}** {Emojis.MONEY}\n"
                "‚è∞ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ: 30 —Å–µ–∫—É–Ω–¥"
            ),
            color="BLUE"
        )
        await interaction.response.send_message(embed=embed, view=view)

        await view.wait()
        if view.value is None:
            await interaction.edit_original_response(
                embed=Embed(
                    description="‚ùå –í—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ –¥—É—ç–ª–∏ –∏—Å—Ç–µ–∫–ª–æ!",
                    color="RED"
                ),
                view=None
            )
            return
        elif not view.value:
            await interaction.edit_original_response(
                embed=Embed(
                    description=f"üè≥Ô∏è {member.mention} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –¥—É—ç–ª–∏!",
                    color="RED"
                ),
                view=None
            )
            return

        # –°–Ω–∏–º–∞–µ–º —Å—Ç–∞–≤–∫–∏ —Å –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        await self.db.update(
            "users",
            where={"user_id": challenger_id},
            values={"balance": challenger_data['balance'] - bet}
        )
        await self.db.update(
            "users",
            where={"user_id": opponent_id},
            values={"balance": opponent_data['balance'] - bet}
        )

        # –ù–∞—á–∏–Ω–∞–µ–º –¥—É—ç–ª—å
        challenger_hp = 100
        opponent_hp = 100
        round_num = 1

        duel_embed=Embed(
            title="‚öîÔ∏è –î—É—ç–ª—å –Ω–∞—á–∞–ª–∞—Å—å!",
            description=(
                f"**{interaction.user.name}** vs **{member.name}**\n"
                f"üí∞ –°—Ç–∞–≤–∫–∞: **{bet:,}** {Emojis.MONEY}\n\n"
                f"‚ù§Ô∏è {interaction.user.name}: {challenger_hp} HP\n"
                f"‚ù§Ô∏è {member.name}: {opponent_hp} HP"
            ),
            color="BLUE"
        )
        await interaction.edit_original_response(embed=duel_embed, view=None)
        await asyncio.sleep(2)

        while challenger_hp > 0 and opponent_hp > 0:
            # –í—ã–±–∏—Ä–∞–µ–º –æ—Ä—É–∂–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            challenger_weapon = random.choice(list(self.weapons.items()))
            opponent_weapon = random.choice(list(self.weapons.items()))

            # –ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
            if random.random() <= challenger_weapon[1]['accuracy']:
                damage = random.randint(*challenger_weapon[1]['dmg'])
                if random.random() <= challenger_weapon[1]['crit']:
                    damage *= 2
                    crit_text = "üéØ **–ö–†–ò–¢!** "
                else:
                    crit_text = ""
                opponent_hp -= damage
                action = random.choice(self.actions)
                result = f"{crit_text}{interaction.user.name} {action} –∏—Å–ø–æ–ª—å–∑—É—è {challenger_weapon[0]} –∏ –Ω–∞–Ω–æ—Å–∏—Ç **{damage}** —É—Ä–æ–Ω–∞!"
            else:
                result = f"{interaction.user.name} {random.choice(self.misses)} –∏—Å–ø–æ–ª—å–∑—É—è {challenger_weapon[0]}!"

            duel_embed.description = (
                f"**–†–∞—É–Ω–¥ {round_num}**\n\n"
                f"{result}\n\n"
                f"‚ù§Ô∏è {interaction.user.name}: {max(0, challenger_hp)} HP\n"
                f"‚ù§Ô∏è {member.name}: {max(0, opponent_hp)} HP"
            )
            await interaction.edit_original_response(embed=duel_embed)
            await asyncio.sleep(2)

            if opponent_hp <= 0:
                break

            # –í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
            if random.random() <= opponent_weapon[1]['accuracy']:
                damage = random.randint(*opponent_weapon[1]['dmg'])
                if random.random() <= opponent_weapon[1]['crit']:
                    damage *= 2
                    crit_text = "üéØ **–ö–†–ò–¢!** "
                else:
                    crit_text = ""
                challenger_hp -= damage
                action = random.choice(self.actions)
                result = f"{crit_text}{member.name} {action} –∏—Å–ø–æ–ª—å–∑—É—è {opponent_weapon[0]} –∏ –Ω–∞–Ω–æ—Å–∏—Ç **{damage}** —É—Ä–æ–Ω–∞!"
            else:
                result = f"{member.name} {random.choice(self.misses)} –∏—Å–ø–æ–ª—å–∑—É—è {opponent_weapon[0]}!"

            duel_embed.description = (
                f"**–†–∞—É–Ω–¥ {round_num}**\n\n"
                f"{result}\n\n"
                f"‚ù§Ô∏è {interaction.user.name}: {max(0, challenger_hp)} HP\n"
                f"‚ù§Ô∏è {member.name}: {max(0, opponent_hp)} HP"
            )
            await interaction.edit_original_response(embed=duel_embed)
            await asyncio.sleep(2)

            round_num += 1

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if challenger_hp <= 0 and opponent_hp <= 0:
            result_text = "ü§ù **–ù–∏—á—å—è!** –û–±–∞ –∏–≥—Ä–æ–∫–∞ –ø–∞–ª–∏ –≤ –±–æ—é!"
            color = "YELLOW"
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫–∏ –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
            await self.db.update(
                "users",
                where={"user_id": challenger_id},
                values={"balance": challenger_data['balance']}
            )
            await self.db.update(
                "users",
                where={"user_id": opponent_id},
                values={"balance": opponent_data['balance']}
            )
        elif challenger_hp <= 0:
            winner = member
            winner_id = opponent_id
            result_text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {member.mention}!"
            color = "GREEN"
        else:
            winner = interaction.user
            winner_id = challenger_id
            result_text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {interaction.user.mention}!"
            color = "GREEN"

        if challenger_hp > 0 or opponent_hp > 0:  # –ï—Å–ª–∏ –Ω–µ –Ω–∏—á—å—è
            winner_data = await self.db.get_row("users", user_id=winner_id)
            await self.db.update(
                "users",
                where={"user_id": winner_id},
                values={"balance": winner_data['balance'] + bet * 2}
            )

        final_embed=Embed(
            title="‚öîÔ∏è –î—É—ç–ª—å –æ–∫–æ–Ω—á–µ–Ω–∞!",
            description=(
                f"{result_text}\n\n"
                f"‚ù§Ô∏è {interaction.user.name}: {max(0, challenger_hp)} HP\n"
                f"‚ù§Ô∏è {member.name}: {max(0, opponent_hp)} HP\n\n"
                f"üí∞ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: **{bet * 2:,}** {Emojis.MONEY}"
            ),
            color=color
        )
        await interaction.edit_original_response(embed=final_embed)

async def setup(bot):
    await bot.add_cog(Duel(bot))