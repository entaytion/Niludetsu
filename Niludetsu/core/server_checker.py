import discord
from typing import Optional, List
import yaml
from pathlib import Path
from ..utils.embed import Embed

class ServerChecker:
    def __init__(self, bot):
        self.bot = bot
        self._load_config()
    
    def _load_config(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        with open(Path("data/config.yaml"), "r", encoding="utf-8") as f:
            config = yaml.safe_load(f)
            self.allowed_servers = config.get('settings', {}).get('allowed_servers', [])
            self.owner_id = config.get('settings', {}).get('owner_id')
    
    async def _send_notification(self, guild: discord.Guild) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
        notification_channel = next(
            (channel for channel in guild.text_channels 
             if channel.permissions_for(guild.me).send_messages),
            None
        )
        
        if notification_channel:
            embed=Embed(
                title="‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø",
                description="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö.\n\n–ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                color="RED",
                fields=[{
                    "name": "–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤",
                    "value": f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º <@{self.owner_id}>"
                }]
            )
            
            try:
                await notification_channel.send(embed=embed)
            except Exception:
                pass

    async def check_guild(self, guild: discord.Guild) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        if guild.id not in self.allowed_servers:
            await self._send_notification(guild)
            try:
                await guild.leave()
                print(f"üö´ –ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {guild.name} (ID: {guild.id})")
                return False
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: {guild.name} (ID: {guild.id})")
                return False
        return True

    async def check_all_guilds(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±–æ—Ç"""
        for guild in self.bot.guilds:
            await self.check_guild(guild)

    def is_guild_allowed(self, guild_id: int) -> bool:
        """
        –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
        Args:
            guild_id (int): ID —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        return guild_id in self.allowed_servers