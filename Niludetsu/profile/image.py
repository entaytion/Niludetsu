import os, aiohttp
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
from easy_pil import Editor, Font
from typing import Tuple
from .models import ProfileData

class ProfileImage:
    def __init__(self):
        self.font_path_regular = os.path.join('data', 'fonts', 'TTNormsPro-Regular.ttf')
        self.font_path_bold = os.path.join('data', 'fonts', 'TTNormsPro-Bold.ttf')
        self.font_path_emoji = os.path.join('data', 'fonts', 'NotoColorEmoji.ttf')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à—Ä–∏—Ñ—Ç–æ–≤
        if not os.path.exists(self.font_path_emoji):
            self.font_path_emoji = None
            print("–®—Ä–∏—Ñ—Ç —ç–º–æ–¥–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã")

    def get_emoji_font(self) -> ImageFont.FreeTypeFont:
        """–ü–æ–ª—É—á–∏—Ç—å —à—Ä–∏—Ñ—Ç –¥–ª—è —ç–º–æ–¥–∑–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        if self.font_path_emoji:
            try:
                return ImageFont.truetype(self.font_path_emoji, size=109)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è NotoColorEmoji
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞ —ç–º–æ–¥–∑–∏: {e}")
                self.font_path_emoji = None
        return None

    def get_text_width(self, text: str, font: Font) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞"""
        return font.getsize(text)[0]

    async def load_image_async(self, url: str) -> Image:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL"""
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    raise Exception(f"Failed to fetch image: {response.status}")
                data = await response.read()
                return Image.open(BytesIO(data))

    def rounded_rectangle(self, draw: ImageDraw, x1: int, y1: int, x2: int, y2: int, 
                         radius: int, fill=None, outline=None) -> None:
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏"""
        diameter = radius * 2
        x1, x2 = min(x1, x2), max(x1, x2)
        y1, y2 = min(y1, y2), max(y1, y2)

        if diameter <= (x2 - x1) and diameter <= (y2 - y1): 
            draw.ellipse((x1, y1, x1 + diameter, y1 + diameter), fill=fill, outline=outline)
            draw.ellipse((x2 - diameter, y1, x2, y1 + diameter), fill=fill, outline=outline)
            draw.ellipse((x1, y2 - diameter, x1 + diameter, y2), fill=fill, outline=outline)
            draw.ellipse((x2 - diameter, y2 - diameter, x2, y2), fill=fill, outline=outline)
            draw.rectangle((x1 + radius, y1, x2 - radius, y2), fill=fill, outline=outline)
            draw.rectangle((x1, y1 + radius, x2, y2 - radius), fill=fill, outline=outline)
        else:
            draw.rectangle((x1, y1, x2, y2), fill=fill, outline=outline)

    def create_card(self, draw: ImageDraw, x: int, y: int, width: int, height: int, 
                   color: tuple = (23, 24, 26, 255)) -> None:
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ç–µ–Ω—å—é"""
        self.rounded_rectangle(draw, x, y, x+width, y+height, 15, fill=color)

    def draw_emoji(self, background: Editor, x: int, y: int, emoji: str, font: ImageFont.FreeTypeFont, scale: float = 0.15) -> None:
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è —ç–º–æ–¥–∑–∏
        temp = Image.new('RGBA', (128, 128), (0, 0, 0, 0))
        temp_draw = ImageDraw.Draw(temp)
        
        # –†–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        temp_draw.text((0, 0), emoji, font=font, embedded_color=True)
        bbox = temp.getbbox()
        if bbox:
            cropped = temp.crop(bbox)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö —ç–º–æ–¥–∑–∏
            fixed_size = 20  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            resized = cropped.resize((fixed_size, fixed_size), Image.Resampling.LANCZOS)
            # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ —Ñ–æ–Ω
            background.paste(resized, (x, y))

    def draw_custom_icon(self, background: Editor, x: int, y: int, icon_path: str, size: int = 22) -> None:
        """–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É"""
        try:
            icon = Image.open(icon_path).convert('RGBA')
            icon = icon.resize((size, size), Image.Resampling.LANCZOS)
            background.paste(icon, (x, y))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∫–æ–Ω–∫–∏: {e}")

    async def create_profile_image(self, profile_data: ProfileData, 
                                 user_name: str, avatar_url: str) -> BytesIO:
        """–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω
        background = Editor(Image.new('RGBA', (1000, 450), color=(18, 18, 18, 255)))

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
        # –õ–µ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (–ø—Ä–æ—Ñ–∏–ª—å)
        self.create_card(ImageDraw.Draw(background.image), 20, 20, 450, 260)
        # –ü—Ä–∞–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (–±–∞–ª–∞–Ω—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        self.create_card(ImageDraw.Draw(background.image), 490, 20, 490, 260)
        # –ù–∏–∂–Ω—è—è –∫–∞—Ä—Ç–æ—á–∫–∞ (–±–∏–æ–≥—Ä–∞—Ñ–∏—è)
        self.create_card(ImageDraw.Draw(background.image), 20, 300, 960, 130)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä
        profile_image = await self.load_image_async(avatar_url)
        profile_image = Editor(profile_image).resize((120, 120)).circle_image()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–≤–æ–¥–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞
        circle_border = Image.new('RGBA', (130, 130), (0, 0, 0, 0))
        draw = ImageDraw.Draw(circle_border)
        draw.ellipse((0, 0, 129, 129), outline=(88, 101, 242, 255), width=3)
        circle_border = Editor(circle_border)
        
        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏ –æ–±–≤–æ–¥–∫—É
        background.paste(profile_image, (45, 45))
        background.paste(circle_border, (40, 40))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
        font_regular = Font(self.font_path_regular, size=20)
        font_small = Font(self.font_path_regular, size=18)
        font_bold = Font(self.font_path_bold, size=32)
        font_emoji = self.get_emoji_font()

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å —ç–º–æ–¥–∑–∏
        def draw_with_emoji(x: int, y: int, emoji: str, text: str, text_font: Font, text_color: str):
            if font_emoji:
                # –†–∏—Å—É–µ–º —ç–º–æ–¥–∑–∏ —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                self.draw_emoji(background, x, y-1, emoji, font_emoji)  # –ù–µ–º–Ω–æ–≥–æ –ø–æ–¥–Ω—è–ª–∏ —ç–º–æ–¥–∑–∏
                background.text((x + 25, y), text, font=text_font, color=text_color)  # –î–æ–±–∞–≤–∏–ª–∏ –æ—Ç—Å—Ç—É–ø
            else:
                # –ï—Å–ª–∏ —à—Ä–∏—Ñ—Ç —ç–º–æ–¥–∑–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                background.text((x, y), text, font=text_font, color=text_color)

        # –õ–µ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        background.text((40, 180), user_name, font=font_bold, color="white")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º XP –∏ —É—Ä–æ–≤–µ–Ω—å
        next_level_xp = profile_data.calculate_next_level_xp()
        xp_percentage = min(profile_data.xp / next_level_xp * 100, 100)
        
        # –£—Ä–æ–≤–µ–Ω—å –∏ XP
        draw_with_emoji(40, 220, "‚≠ê", f"–£—Ä–æ–≤–µ–Ω—å {profile_data.level}", font_regular, "#5865F2")
        background.text((200, 220), f"{profile_data.xp}/{next_level_xp} XP", font_small, color="#72767d")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —É—Ä–æ–≤–Ω—è
        bar_width = 350
        bar_height = 8
        bar_x = 40
        bar_y = 250
        
        # –§–æ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        self.rounded_rectangle(
            ImageDraw.Draw(background.image),
            bar_x, bar_y,
            bar_x + bar_width, bar_y + bar_height,
            4, fill=(47, 49, 54, 255)
        )
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        filled_width = int(bar_width * (xp_percentage / 100))
        if filled_width > 0:
            self.rounded_rectangle(
                ImageDraw.Draw(background.image),
                bar_x, bar_y,
                bar_x + filled_width, bar_y + bar_height,
                4, fill=(88, 101, 242, 255)
            )

        # –ü—Ä–∞–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–∞–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
        # –ë–∞–ª–∞–Ω—Å (–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
        background.text((510, 40), "–ë–ê–õ–ê–ù–°", font=font_bold, color="#5865F2")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≥—Ä–∏–≤–Ω–∞–º–∏
        total_text = f"–í—Å–µ–≥–æ: {profile_data.total_balance:,} ‚Ç¥"
        bank_text = f"–ë–∞–Ω–∫: {profile_data.deposit:,} ‚Ç¥"
        cash_text = f"–ù–∞–ª–∏—á–∫–∞: {profile_data.balance:,} ‚Ç¥"
        
        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –∏ —ç–º–æ–¥–∑–∏
        draw_with_emoji(510, 90, "üíé", total_text, font_regular, "#72767d")
        draw_with_emoji(510, 120, "üè¶", bank_text, font_regular, "#72767d")
        draw_with_emoji(510, 150, "üíµ", cash_text, font_regular, "#72767d")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
        background.text((700, 40), "–°–¢–ê–¢–ò–°–¢–ò–ö–ê", font=font_bold, color="#5865F2")
        
        draw_with_emoji(700, 90, "üé§", f"–í—Ä–µ–º—è –≤ –ì–°: {profile_data.format_voice_time()}", font_regular, "#72767d")
        draw_with_emoji(700, 120, "üí¨", f"–°–æ–æ–±—â–µ–Ω–∏–π: {profile_data.messages_count:,}", font_regular, "#72767d")

        # –ë–∏–æ–≥—Ä–∞—Ñ–∏—è (–≤ –Ω–∏–∂–Ω–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ)
        background.text((40, 320), "–ò–ù–§–û–†–ú–ê–¶–ò–Ø", font=font_bold, color="#5865F2")
        
        bio_text = []
        if profile_data.name:
            bio_text.append(("üë§", f"–ò–º—è: {profile_data.name}"))
        if profile_data.birthday:  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
            bio_text.append(("üéÇ", f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {profile_data.birthday}"))
            if profile_data.age is not None:  # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –≤—ã—á–∏—Å–ª–µ–Ω
                bio_text.append(("üìÖ", f"–í–æ–∑—Ä–∞—Å—Ç: {profile_data.age} –ª–µ—Ç"))
        if profile_data.country:
            bio_text.append(("üåç", f"–°—Ç—Ä–∞–Ω–∞: {profile_data.country}"))
        
        if bio_text:
            x_pos = 40
            y_pos = 360
            for i, (emoji, info) in enumerate(bio_text):
                draw_with_emoji(x_pos, y_pos, emoji, info, font_regular, "#72767d")
                if i < len(bio_text) - 1:
                    text_width = self.get_text_width(info, font_regular)
                    background.text((x_pos + 35 + text_width + 5, y_pos), "|", font=font_regular, color="#72767d")
                    x_pos += text_width + 55
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            draw_with_emoji(40, 360, "‚ö†Ô∏è", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞", font_regular, "#72767d")
            draw_with_emoji(40, 385, "üí°", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile set –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", font_regular, "#72767d")
        
        if profile_data.bio:
            bio = profile_data.bio[:100] + "..." if len(profile_data.bio) > 100 else profile_data.bio
            draw_with_emoji(40, 410 if not bio_text else 390, "üìù", f"–û —Å–µ–±–µ: {bio}", font_regular, "#72767d")

        return background.image_bytes 