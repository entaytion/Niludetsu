from ..core.base import BaseLogger, LoggingState
import discord
from discord.ext import commands
from typing import Optional, Union

class Logger(BaseLogger):
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ª–æ–≥–≥–µ—Ä–∞."""
    
    def __init__(self, bot: commands.Bot):
        super().__init__(bot)
        self.logging_enabled: bool = True

    async def setup(self, webhook_url: str, log_channel_id: int) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞."""
        if not LoggingState.initialized:
            await self.initialize_logs()
        
    async def log_error(self, 
                       error: Exception, 
                       command_name: str = None, 
                       user: Union[discord.Member, discord.User] = None) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫."""
        if not self.logging_enabled or not LoggingState.initialized:
            return
            
        title = "üö´ –û—à–∏–±–∫–∞"
        description = f"```py\n{str(error)}\n```"
        
        fields = []
        if command_name:
            fields.append({"name": "–ö–æ–º–∞–Ω–¥–∞", "value": command_name, "inline": True})
        if user:
            fields.append({
                "name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "value": f"{user.name} ({user.id})",
                "inline": True
            })
            
        await self.log_event(
            title=title,
            description=description,
            color='RED',
            fields=fields,
            footer={"text": "–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"}
        )
        
    async def log_command(self, 
                         ctx: commands.Context, 
                         command_name: str,
                         status: str = "‚úÖ –£—Å–ø–µ—à–Ω–æ") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥."""
        if not self.logging_enabled or not LoggingState.initialized:
            return
            
        await self.log_event(
            title=f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command_name}",
            description=f"–°—Ç–∞—Ç—É—Å: {status}",
            fields=[
                {"name": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "value": f"{ctx.author} ({ctx.author.id})", "inline": True},
                {"name": "–ö–∞–Ω–∞–ª", "value": f"{ctx.channel.name} ({ctx.channel.id})", "inline": True}
            ],
            color='GREEN' if status.startswith("‚úÖ") else 'RED'
        )

    async def log_event(self, *args, **kwargs):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.logging_enabled and LoggingState.initialized:
            await super().log_event(*args, **kwargs) 