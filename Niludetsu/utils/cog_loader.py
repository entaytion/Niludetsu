from collections import defaultdict

class CogLoader:
    _loaded_cogs = defaultdict(lambda: {'success': [], 'failed': []})
    
    @classmethod
    def add_loaded_cog(cls, cog_path: str, success: bool = True, error: str = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–≥ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        
        Args:
            cog_path (str): –ü—É—Ç—å –∫ –∫–æ–≥—É
            success (bool): –£—Å–ø–µ—à–Ω–æ –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ–≥
            error (str): –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        """
        parts = cog_path.split('/')
        if len(parts) > 1:
            category = parts[0]
            cog_name = parts[-1]
            if error:
                cog_name = f"{cog_name} ({error})"
            status_list = 'success' if success else 'failed'
            cls._loaded_cogs[category][status_list].append(cog_name)
        else:
            status_list = 'success' if success else 'failed'
            if error:
                cog_path = f"{cog_path} ({error})"
            cls._loaded_cogs['other'][status_list].append(cog_path)
            
    @classmethod
    def print_loaded_cogs(cls):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–æ–≥–∞—Ö –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        print("\n=== –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è ===")
        for category, status in cls._loaded_cogs.items():
            if not status['success'] and not status['failed']:
                continue
                
            print(f"\nüìÅ {category.upper()}:")
            if status['success']:
                print(f"  ‚îú‚îÄ ‚úÖ {', '.join(sorted(status['success']))}")
            if status['failed']:
                print(f"  ‚îú‚îÄ ‚ùå {', '.join(sorted(status['failed']))}")
        print("\n============================\n")