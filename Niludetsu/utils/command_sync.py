import yaml, hashlib, discord
from typing import Dict, List, Any
from discord.ext import commands

class CommandSync:
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        self.command_hashes = self.load_command_hashes()
        
    def load_command_hashes(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ö–µ—à–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open('data/hash/hash.yaml', 'r', encoding='utf-8') as f:
                return yaml.safe_load(f) or {}
        except FileNotFoundError:
            return {}

    def save_command_hashes(self, hashes: Dict[str, str]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ö–µ—à–∏ –∫–æ–º–∞–Ω–¥ –≤ —Ñ–∞–π–ª"""
        with open('data/hash/hash.yaml', 'w', encoding='utf-8') as f:
            yaml.dump(hashes, f, default_flow_style=False, allow_unicode=True)

    def get_command_hash(self, command: discord.app_commands.Command) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ö–µ—à –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë —Å–≤–æ–π—Å—Ç–≤"""
        command_data = [
            command.name,
            command.description,
        ]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if hasattr(command, 'parameters'):
            params = []
            for param in command.parameters:
                params.append((param.name, str(param.type), getattr(param, 'description', '')))
            command_data.append(str(sorted(params)))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ choices
        if hasattr(command, 'choices'):
            command_data.append(str(sorted([choice.name for choice in command.choices])))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ permissions
        if hasattr(command, 'default_permissions'):
            command_data.append(str(command.default_permissions))
        
        return hashlib.md5(str(command_data).encode()).hexdigest()

    async def sync_commands(self) -> None:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö —Ö–µ—à–∏
            current_commands = {cmd.name: self.get_command_hash(cmd) for cmd in self.bot.tree.get_commands()}

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∏–ª–∏ –Ω–æ–≤—ã–µ
            commands_to_sync = []
            for name, hash_value in current_commands.items():
                if name not in self.command_hashes or self.command_hashes[name] != hash_value:
                    commands_to_sync.append(name)
                    self.command_hashes[name] = hash_value

            # –£–¥–∞–ª—è–µ–º —Ö–µ—à–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            removed_commands = []
            for name in list(self.command_hashes.keys()):
                if name not in current_commands:
                    del self.command_hashes[name]
                    removed_commands.append(name)

            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if commands_to_sync or removed_commands:
                print(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: {commands_to_sync}")
                await self.bot.tree.sync()
                self.save_command_hashes(self.command_hashes)
                print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò–∑–º–µ–Ω–µ–Ω–æ: {len(commands_to_sync)} | –£–¥–∞–ª–µ–Ω–æ: {len(removed_commands)}")
            else:
                print("‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}") 