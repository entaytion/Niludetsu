import discord
from typing import Union, Optional, Dict, Any, List
from datetime import datetime
import yaml
import asyncio
from .decorators import load_config
from ..utils.config_loader import bot_state
from ..utils.embed import Embed

class LoggingState:
    """–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    webhook: Optional[discord.Webhook] = None
    log_channel: Optional[discord.TextChannel] = None
    initialized: bool = False
    last_message_time: Optional[datetime] = None
    initialized_loggers: List[str] = []
    rate_limit_delay: float = 1.0

    @classmethod
    def initialize(cls, channel: discord.TextChannel) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if cls.initialized and cls.log_channel and cls.log_channel.id == channel.id:
            return
        cls.log_channel = channel
        cls.initialized = True

class BaseLogger:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤"""
    def __init__(self, bot: discord.Client):
        self.bot = bot
        self.owner_id = "636570363605680139"
        if not LoggingState.initialized:
            bot.loop.create_task(self.initialize_logs())

    async def initialize_logs(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤"""
        if LoggingState.initialized:
            return
            
        await self.bot.wait_until_ready()
        try:
            config = load_config()
            if 'logging' not in config or 'main_channel' not in config['logging']:
                return
                    
            channel_id = int(config['logging']['main_channel'])
            channel = self.bot.get_channel(channel_id)
                
            if not channel:
                try:
                    channel = await self.bot.fetch_channel(channel_id)
                except Exception:
                    return
                
            LoggingState.initialize(channel)
            webhook = await self.get_webhook(channel)
            if webhook:
                LoggingState.webhook = webhook

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–æ–≤: {e}")

    async def get_webhook(self, channel: discord.TextChannel) -> Optional[discord.Webhook]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            webhooks = await channel.webhooks()
            webhook = discord.utils.get(webhooks, name='NiluBot Logs')
            
            if not webhook:
                webhook = await channel.create_webhook(name='NiluBot Logs')
            
            return webhook
        except Exception:
            return None

    async def log_event(self, title: str, description: str = "", color: Union[str, int] = 'BLUE', 
                       fields: Optional[List[Dict[str, Any]]] = None, event_type: str = "general", **kwargs) -> None:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π"""
        try:
            if not LoggingState.initialized or not LoggingState.log_channel:
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏–∑ kwargs –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            timestamp = kwargs.pop('timestamp', discord.utils.utcnow())

            embed=Embed(
                title=title,
                description=description,
                color=color,
                fields=fields,
                timestamp=timestamp,
                **kwargs
            )

            current_time = datetime.utcnow()
            if LoggingState.last_message_time:
                time_diff = (current_time - LoggingState.last_message_time).total_seconds()
                if time_diff < LoggingState.rate_limit_delay:
                    await asyncio.sleep(LoggingState.rate_limit_delay - time_diff)
            
            if LoggingState.webhook:
                await LoggingState.webhook.send(embed=embed)
            else:
                await LoggingState.log_channel.send(embed=embed)
                
            LoggingState.last_message_time = datetime.utcnow()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

class Logger(BaseLogger):
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    _instance = None
    
    def __new__(cls, bot: discord.Client):
        if cls._instance is None:
            cls._instance = super(Logger, cls).__new__(cls)
            cls._instance.__init__(bot)  # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é BaseLogger
        return cls._instance

    async def initialize_logs(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤"""
        if LoggingState.initialized:
            return
            
        await super().initialize_logs()  # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if not bot_state.is_initialized('logging_system'):
            logger_name = self.__class__.__name__.replace('Logger', '')
            if logger_name not in LoggingState.initialized_loggers:
                LoggingState.initialized_loggers.append(logger_name)
                
            if len(LoggingState.initialized_loggers) == 15:  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–≥–µ—Ä–æ–≤
                embed=Embed(
                    title="‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
                    description="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ª–æ–≥–≥–µ—Ä—ã:\n" + 
                              "\n".join([f"‚Ä¢ {name}" for name in LoggingState.initialized_loggers]),
                    color='GREEN'
                )
                if LoggingState.webhook:
                    await LoggingState.webhook.send(embed=embed)
                else:
                    await LoggingState.log_channel.send(embed=embed)
                bot_state.mark_initialized('logging_system')

    async def show_logs_info(self, interaction: discord.Interaction) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ –ª–æ–≥–æ–≤"""
        try:
            if LoggingState.log_channel:
                await self.log_event(
                    title="üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö",
                    description=f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤: {LoggingState.log_channel.mention}\n"
                              f"ID –∫–∞–Ω–∞–ª–∞: `{LoggingState.log_channel.id}`",
                    color='BLUE'
                )
            else:
                await self.log_event(
                    title="‚ùå –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                    description="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ config.yaml",
                    color='RED'
                )
        except Exception as e:
            await interaction.response.send_message(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"
            )

    async def log_permission_update(self, channel: discord.abc.GuildChannel, 
                                  target: Union[discord.Role, discord.Member], 
                                  before: discord.PermissionOverwrite, 
                                  after: discord.PermissionOverwrite) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            changes = []
            for perm, value in after.pair()[0]:
                before_value = getattr(before.pair()[0], perm)
                if before_value != value:
                    changes.append(f"‚Ä¢ `{perm}`: {before_value} ‚Üí {value}")

            if changes:
                target_type = "—Ä–æ–ª–∏" if isinstance(target, discord.Role) else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                await self.log_event(
                    title=f"üîí –ü—Ä–∞–≤–∞ {target_type} –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
                    description=f"**–ö–∞–Ω–∞–ª:** {channel.mention}\n"
                              f"**{target_type.title()}:** {target.mention}\n"
                              f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + "\n".join(changes),
                    color='BLUE',
                    event_type="permissions"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∞–≤: {e}")

    async def log_role_update(self, role: discord.Role, before: discord.Role, after: discord.Role) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–∏"""
        try:
            changes = []
            if before.name != after.name:
                changes.append(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: `{before.name}` ‚Üí `{after.name}`")
            if before.color != after.color:
                changes.append(f"‚Ä¢ –¶–≤–µ—Ç: `{before.color}` ‚Üí `{after.color}`")
            if before.hoist != after.hoist:
                changes.append(f"‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ: `{before.hoist}` ‚Üí `{after.hoist}`")
            if before.mentionable != after.mentionable:
                changes.append(f"‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ: `{before.mentionable}` ‚Üí `{after.mentionable}`")
            if before.permissions != after.permissions:
                perm_changes = []
                for perm, value in after.permissions:
                    if getattr(before.permissions, perm) != value:
                        perm_changes.append(f"`{perm}`: {getattr(before.permissions, perm)} ‚Üí {value}")
                if perm_changes:
                    changes.append("‚Ä¢ –ü—Ä–∞–≤–∞:\n" + "\n".join(perm_changes))

            if changes:
                await self.log_event(
                    title="üë• –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞",
                    description=f"**–†–æ–ª—å:** {after.mention}\n"
                              f"**ID:** `{after.id}`\n"
                              f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + "\n".join(changes),
                    color='BLUE',
                    event_type="roles"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–∏: {e}")

    async def log_channel_update(self, before: discord.abc.GuildChannel, after: discord.abc.GuildChannel) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞"""
        try:
            changes = []
            if before.name != after.name:
                changes.append(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: `{before.name}` ‚Üí `{after.name}`")
            if isinstance(before, discord.TextChannel) and isinstance(after, discord.TextChannel):
                if before.topic != after.topic:
                    changes.append(f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: `{before.topic}` ‚Üí `{after.topic}`")
                if before.slowmode_delay != after.slowmode_delay:
                    changes.append(f"‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: `{before.slowmode_delay}—Å` ‚Üí `{after.slowmode_delay}—Å`")
            if isinstance(before, discord.VoiceChannel) and isinstance(after, discord.VoiceChannel):
                if before.bitrate != after.bitrate:
                    changes.append(f"‚Ä¢ –ë–∏—Ç—Ä–µ–π—Ç: `{before.bitrate//1000}kbps` ‚Üí `{after.bitrate//1000}kbps`")
                if before.user_limit != after.user_limit:
                    changes.append(f"‚Ä¢ –õ–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{before.user_limit}` ‚Üí `{after.user_limit}`")
            if before.category != after.category:
                before_category = before.category.name if before.category else "–ù–µ—Ç"
                after_category = after.category.name if after.category else "–ù–µ—Ç"
                changes.append(f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: `{before_category}` ‚Üí `{after_category}`")
            if before.position != after.position:
                changes.append(f"‚Ä¢ –ü–æ–∑–∏—Ü–∏—è: `{before.position}` ‚Üí `{after.position}`")

            if changes:
                channel_type = "–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª" if isinstance(after, discord.TextChannel) else "–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª"
                await self.log_event(
                    title=f"üìù {channel_type} –∏–∑–º–µ–Ω–µ–Ω",
                    description=f"**–ö–∞–Ω–∞–ª:** {after.mention}\n"
                              f"**ID:** `{after.id}`\n"
                              f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è:**\n" + "\n".join(changes),
                    color='BLUE',
                    event_type="channels"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞: {e}")

    @staticmethod
    def format_diff(before: Any, after: Any) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –ª–æ–≥–æ–≤"""
        return f"–î–æ: {before}\n–ü–æ—Å–ª–µ: {after}" 