"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É–∑—ã–∫–æ–π.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏.
"""

import discord, wavelink, asyncio, os
from discord.ext import commands
from Niludetsu import Embed
from typing import Optional, Union
from dotenv import load_dotenv

class Song:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–µ—Å–Ω—é"""
    def __init__(self, track: wavelink.Playable, requester: discord.Member = None):
        self.track = track
        self.title = track.title
        self.author = track.author
        self.duration = track.length  # –ò—Å–ø–æ–ª—å–∑—É–µ–º length –≤–º–µ—Å—Ç–æ duration
        self.uri = track.uri
        self.is_stream = track.is_stream
        self.thumbnail = track.artwork_url if hasattr(track, 'artwork_url') else None
        self.requester = requester
        self.start_time = None

    def format_duration(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞"""
        if self.is_stream:
            return "üî¥ LIVE"
        minutes = self.duration // 60000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
        seconds = (self.duration % 60000) // 1000  # –æ—Å—Ç–∞—Ç–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        return f"{minutes}:{seconds:02d}"

class VoiceState:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    def __init__(self, bot: commands.Bot, guild: discord.Guild):
        self.bot = bot
        self.guild = guild
        self.current: Optional[Song] = None
        self.voice: Optional[wavelink.Player] = None
        self._loop = False
        self._volume = 100
        self.skip_votes = set()

    @property
    def loop(self):
        return self._loop

    @loop.setter
    def loop(self, value: bool):
        self._loop = value

    @property
    def volume(self):
        return self._volume

    @volume.setter
    def volume(self, value: int):
        self._volume = value
        if self.voice:
            self.voice.volume = value

    def is_playing(self):
        if self.voice:
            return self.voice.is_playing()
        return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if self.voice:
            await self.voice.disconnect()
            self.voice = None
        self.current = None

    @property
    def queue(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤"""
        if self.voice:
            return self.voice.queue
        return None

class Music:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É–∑—ã–∫–æ–π"""
    _instance = None
    _initialized = False
    _current_songs = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ guild_id
    _text_channels = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ guild_id

    def __new__(cls, bot: commands.Bot):
        if cls._instance is None:
            cls._instance = super(Music, cls).__new__(cls)
        return cls._instance

    @staticmethod
    def check_player_connection(player) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        
        Args:
            player: –û–±—ä–µ–∫—Ç –ø–ª–µ–µ—Ä–∞ Lavalink
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–ª–µ–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        return player.channel is not None and player.channel.id is not None

    def __init__(self, bot: commands.Bot):
        if not self._initialized:
            self.bot = bot
            self.voice_states = {}
            self.wavelink_node = None
            self._node_connected = False
            self._connection_error_logged = False
            self.wavelink = wavelink  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ wavelink

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            load_dotenv()
            self.lavalink_config = {
                'host': os.getenv('LAVALINK_HOST'),
                'port': os.getenv('LAVALINK_PORT'),
                'password': os.getenv('LAVALINK_PASSWORD'),
                'identifier': os.getenv('LAVALINK_IDENTIFIER'),
                'secure': os.getenv('LAVALINK_SECURE', 'false').lower() == 'true'
            }

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Lavalink —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not hasattr(self, '_connect_task'):
                self._connect_task = bot.loop.create_task(self.connect_nodes())
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not hasattr(self, '_event_registered'):
                bot.event(self.on_voice_state_update)
                bot.event(self.on_wavelink_track_end)
                bot.event(self.on_wavelink_track_exception)
                bot.event(self.on_wavelink_track_stuck)
                self._event_registered = True

            Music._initialized = True

    def get_voice_state(self, guild: discord.Guild) -> VoiceState:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        state = self.voice_states.get(guild.id)
        if not state:
            state = VoiceState(self.bot, guild)
            self.voice_states[guild.id] = state
        return state

    async def connect_nodes(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Lavalink"""
        await self.bot.wait_until_ready()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –Ω–æ–¥–∞
        if hasattr(self, '_node_connected') and self._node_connected:
            return

        self.wavelink_node = wavelink.Node(
            uri=f"{'ws' if not self.lavalink_config['secure'] else 'wss'}://{self.lavalink_config['host']}:{self.lavalink_config['port']}",
            password=self.lavalink_config['password'],
            identifier=self.lavalink_config['identifier']
        )
        
        await wavelink.Pool.connect(nodes=[self.wavelink_node], client=self.bot)
        self._node_connected = True

    async def join_voice(self, interaction: discord.Interaction) -> Optional[wavelink.Player]:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"""
        if not interaction.user.voice:
            await interaction.response.send_message(
                embed=Embed(
                    description="‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!"
                ),
                ephemeral=True
            )
            return None

        channel = interaction.user.voice.channel
        if not channel:
            return None

        try:
            player = wavelink.Pool.get_node().get_player(interaction.guild.id)
            if not player:
                player = await channel.connect(cls=wavelink.Player, timeout=60.0)
            elif player.channel.id != channel.id:
                await player.move_to(channel)
            return player
        except wavelink.exceptions.ChannelTimeoutException:
            await interaction.response.send_message(
                embed=Embed(
                    description="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞."
                ),
                ephemeral=True
            )
            return None
        except Exception as e:
            await interaction.response.send_message(
                embed=Embed(
                    description=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {str(e)}"
                ),
                ephemeral=True
            )
            return None

    async def ensure_voice(self, interaction: discord.Interaction) -> Optional[wavelink.Player]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"""
        player = await self.join_voice(interaction)
        if not player:
            return None

        if not player._connected:
            await interaction.response.send_message(
                embed=Embed(
                    description="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!"
                ),
                ephemeral=True
            )
            return None

        return player

    def get_current_song(self, guild_id: int) -> Optional[Song]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return self._current_songs.get(guild_id)

    def set_current_song(self, guild_id: int, song: Optional[Song]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        if song is None:
            self._current_songs.pop(guild_id, None)
        else:
            self._current_songs[guild_id] = song

    def set_text_channel(self, guild_id: int, channel: discord.TextChannel):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –≥–∏–ª—å–¥–∏–∏"""
        self._text_channels[guild_id] = channel

    def get_text_channel(self, guild_id: int) -> Optional[discord.TextChannel]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –≥–∏–ª—å–¥–∏–∏"""
        return self._text_channels.get(guild_id)

    async def search_track(self, query: str) -> Optional[wavelink.Playable]:
        """
        –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        """
        try:
            search_query = query
            print(f"Searching for track: {query}")  # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ YouTube
            if 'youtube.com/' in query or 'youtu.be/' in query:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–æ–∏—Å–∫–∞
                if 'youtube.com/watch?v=' in query:
                    video_id = query.split('watch?v=')[1].split('&')[0]
                elif 'youtu.be/' in query:
                    video_id = query.split('youtu.be/')[1].split('?')[0]
                else:
                    video_id = None
                
                if video_id:
                    search_query = f"https://youtube.com/watch?v={video_id}"
                
                tracks = await wavelink.Playable.search(search_query, source="ytsearch")
                print(f"YouTube search results: {len(tracks) if tracks else 0} tracks")
            
            # –ï—Å–ª–∏ —ç—Ç–æ Spotify —Å—Å—ã–ª–∫–∞
            elif 'spotify.com/' in query:
                tracks = await wavelink.Playable.search(query, source="spsearch")
                print(f"Spotify search results: {len(tracks) if tracks else 0} tracks")
            
            # –ï—Å–ª–∏ —ç—Ç–æ SoundCloud —Å—Å—ã–ª–∫–∞
            elif 'soundcloud.com/' in query:
                tracks = await wavelink.Playable.search(query, source="scsearch")
                print(f"SoundCloud search results: {len(tracks) if tracks else 0} tracks")
            
            else:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
                print("Trying multiple sources...")
                tracks = await wavelink.Playable.search(query, source="ytsearch")
                if not tracks:
                    print("YouTube search failed, trying SoundCloud...")
                    tracks = await wavelink.Playable.search(query, source="scsearch")
                if not tracks:
                    print("SoundCloud search failed, trying YouTube Music...")
                    tracks = await wavelink.Playable.search(query, source="ytmsearch")

            if not tracks:
                print("No tracks found in any source")
                return None

            track = tracks[0]
            print(f"Selected track: {track.title} (URI: {track.uri})")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞
            if not track.uri or getattr(track, 'is_failed', False):
                print(f"Track validation failed - URI: {track.uri}, is_failed: {getattr(track, 'is_failed', False)}")
                # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if len(tracks) > 1:
                    for alt_track in tracks[1:]:
                        if alt_track.uri and not getattr(alt_track, 'is_failed', False):
                            print(f"Using alternative track: {alt_track.title}")
                            return alt_track
                return None

            return track
            
        except Exception as e:
            print(f"Error in search_track: {str(e)}")
            return None

    async def play_song(self, interaction: discord.Interaction, query: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Å–Ω–∏"""
        try:
            # –°—Ä–∞–∑—É –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            await interaction.response.defer()
            
            print(f"Attempting to play song with query: {query}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
            player = await self.ensure_voice(interaction)
            if not player:
                print("Failed to get player")
                await interaction.followup.send(
                    embed=Embed(
                        description="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                        color="RED"
                    ),
                    ephemeral=True
                )
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Lavalink
            if not self._node_connected:
                print("Lavalink node not connected")
                await interaction.followup.send(
                    embed=Embed(
                        description="‚ùå –°–µ—Ä–≤–µ—Ä –º—É–∑—ã–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        color="RED"
                    ),
                    ephemeral=True
                )
                return

            # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞
            print("Searching for track...")
            track = await self.search_track(query)
            if not track:
                print("No track found")
                await interaction.followup.send(
                    embed=Embed(
                        description="‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!",
                        color="RED"
                    ),
                    ephemeral=True
                )
                return

            print(f"Track found: {track.title}")
            song = Song(track, interaction.user)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            state = self.get_voice_state(interaction.guild)
            if not state:
                print("Failed to get voice state")
                return

            # –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            try:
                if player.playing:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                    print("Adding track to queue")
                    await player.queue.put_wait(track)
                    await interaction.followup.send(
                        embed=Embed(
                            title="üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å",
                            description=f"**{track.title}**\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {song.format_duration()}",
                            color="GREEN"
                        )
                    )
                else:
                    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º —Å—Ä–∞–∑—É
                    print("Playing track immediately")
                    await player.play(track)
                    state.current = song  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                    self.set_current_song(interaction.guild_id, song)  # –ò –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                    await interaction.followup.send(
                        embed=Embed(
                            title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                            description=f"**{track.title}**\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {song.format_duration()}",
                            color="GREEN"
                        )
                    )
            except Exception as e:
                print(f"Error during playback: {str(e)}")
                await interaction.followup.send(
                    embed=Embed(
                        description=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏:\n```{str(e)}```",
                        color="RED"
                    ),
                    ephemeral=True
                )
                return
            
            self.set_text_channel(interaction.guild_id, interaction.channel)
            
        except Exception as e:
            print(f"General error in play_song: {str(e)}")
            try:
                await interaction.followup.send(
                    embed=Embed(
                        description=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:\n```{str(e)}```",
                        color="RED"
                    ),
                    ephemeral=True
                )
            except:
                pass

    async def on_voice_state_update(self, member: discord.Member, before: discord.VoiceState, after: discord.VoiceState):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö"""
        if member.id == self.bot.user.id:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –±–æ—Ç–∞
        if not before.channel:
            return
            
        voice_client = before.channel.guild.voice_client
        if not voice_client or not voice_client.channel:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤ –∫–∞–Ω–∞–ª–µ –ª—é–¥–∏ (–∫—Ä–æ–º–µ –±–æ—Ç–∞)
        members = [m for m in voice_client.channel.members if not m.bot]
        
        if not members:
            player = wavelink.Pool.get_node().get_player(voice_client.guild.id)
            if player:
                await player.disconnect()
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
                text_channel = self.get_text_channel(voice_client.guild.id)
                if text_channel:
                    await text_channel.send(
                        embed=Embed(
                            description=f"üëã –ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª {voice_client.channel.name}, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã—à–ª–∏"
                        )
                    )

    async def on_wavelink_track_end(self, payload: wavelink.TrackEndEventPayload):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
        if not payload or not payload.player:
            return
            
        guild_id = payload.player.guild.id if payload.player.guild else None
        if not guild_id:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —ç—Ç–æ–π –≥–∏–ª—å–¥–∏–∏
        text_channel = self.get_text_channel(guild_id)
        if not text_channel:
            return
            
        state = self.get_voice_state(payload.player.guild)
        if not state:
            return
            
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
        state.current = None
        self.set_current_song(guild_id, None)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏
        if not payload.player.queue.is_empty:
            next_track = await payload.player.queue.get_wait()
            await payload.player.play(next_track)
            state.current = Song(next_track, None)
            self.set_current_song(guild_id, state.current)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
            if payload.reason == "finished":
                await text_channel.send(
                    embed=Embed(
                        title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                        description=f"**{next_track.title}**\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {state.current.format_duration()}",
                        color="BLUE"
                    )
                )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
            if payload.reason == "finished":
                await text_channel.send(
                    embed=Embed(
                        title="üéµ –û—á–µ—Ä–µ–¥—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                        description="–í—Å–µ —Ç—Ä–µ–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω—ã",
                        color="BLUE"
                    )
                )

    async def on_wavelink_track_exception(self, payload: wavelink.TrackExceptionEventPayload):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ç—Ä–µ–∫–∞"""
        guild_id = payload.player.guild.id
        channel = self.get_text_channel(guild_id)
        
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:\n**{payload.track.title}**"
        
        if hasattr(payload, 'error'):
            error_message += f"\n\n–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n```{payload.error}```"
        
        if hasattr(payload, 'exception'):
            error_message += f"\n\n–ò—Å–∫–ª—é—á–µ–Ω–∏–µ:\n```{payload.exception}```"
            
        if channel:
            await channel.send(
                embed=Embed(
                    title="‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
                    description=error_message,
                    color="RED"
                )
            )
            
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"Track Exception - Guild: {guild_id}")
        print(f"Track: {payload.track.title}")
        print(f"Error Type: {type(payload.exception) if hasattr(payload, 'exception') else 'Unknown'}")
        if hasattr(payload, 'error'):
            print(f"Error: {payload.error}")
        if hasattr(payload, 'exception'):
            print(f"Exception: {payload.exception}")

    async def on_wavelink_track_stuck(self, payload: wavelink.TrackStuckEventPayload):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
        guild_id = payload.player.guild.id
        channel = self.get_text_channel(guild_id)
        
        if channel:
            await channel.send(
                embed=Embed(
                    title="‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è",
                    description=f"–¢—Ä–µ–∫ –∑–∞–≤–∏—Å–∞–µ—Ç:\n**{payload.track.title}**",
                    color="YELLOW"
                )
            )