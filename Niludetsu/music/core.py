"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É–∑—ã–∫–æ–π.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏.
"""

import discord
from discord.ext import commands
import wavelink
from ..utils import create_embed
import yaml
from typing import Optional, Union
import asyncio

class Song:
    """–ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–µ—Å–Ω—é"""
    def __init__(self, track: wavelink.Playable, requester: discord.Member = None):
        self.track = track
        self.title = track.title
        self.author = track.author
        self.duration = track.length  # –ò—Å–ø–æ–ª—å–∑—É–µ–º length –≤–º–µ—Å—Ç–æ duration
        self.uri = track.uri
        self.is_stream = track.is_stream
        self.thumbnail = track.artwork_url if hasattr(track, 'artwork_url') else None
        self.requester = requester
        self.start_time = None

    def format_duration(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞"""
        if self.is_stream:
            return "üî¥ LIVE"
        minutes = self.duration // 60000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
        seconds = (self.duration % 60000) // 1000  # –æ—Å—Ç–∞—Ç–æ–∫ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        return f"{minutes}:{seconds:02d}"

class VoiceState:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    def __init__(self, bot: commands.Bot, guild: discord.Guild):
        self.bot = bot
        self.guild = guild
        self.current: Optional[Song] = None
        self.voice: Optional[wavelink.Player] = None
        self.next = asyncio.Event()
        self.songs = asyncio.Queue()
        self.exists = True
        self._loop = False
        self._volume = 100
        self.skip_votes = set()
        self.audio_player = bot.loop.create_task(self.audio_player_task())

    async def audio_player_task(self):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏"""
        while self.exists:
            self.next.clear()
            if not self._loop:
                try:
                    async with asyncio.timeout(180):  # 3 –º–∏–Ω—É—Ç—ã
                        self.current = await self.songs.get()
                except asyncio.TimeoutError:
                    await self.stop()
                    self.exists = False
                    return

            self.voice.play(self.current.track)
            await self.next.wait()

    @property
    def loop(self):
        return self._loop

    @loop.setter
    def loop(self, value: bool):
        self._loop = value

    @property
    def volume(self):
        return self._volume

    @volume.setter
    def volume(self, value: int):
        self._volume = value
        if self.voice:
            self.voice.volume = value

    def is_playing(self):
        if self.voice:
            return self.voice.is_playing()
        return False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if self.voice:
            await self.voice.disconnect()
            self.voice = None
        self.exists = False
        self.current = None
        self.songs = asyncio.Queue()

class Music:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º—É–∑—ã–∫–æ–π"""
    _instance = None
    _initialized = False
    _current_songs = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –ø–æ guild_id
    _text_channels = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ guild_id

    def __new__(cls, bot: commands.Bot):
        if cls._instance is None:
            cls._instance = super(Music, cls).__new__(cls)
        return cls._instance

    @staticmethod
    def check_player_connection(player) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        
        Args:
            player: –û–±—ä–µ–∫—Ç –ø–ª–µ–µ—Ä–∞ Lavalink
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–ª–µ–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        try:
            return player.channel is not None and player.channel.id is not None
        except AttributeError:
            return False

    def __init__(self, bot: commands.Bot):
        if not self._initialized:
            self.bot = bot
            self.voice_states = {}
            self.wavelink_node = None
            self._node_connected = False
            self._connection_error_logged = False
            self.wavelink = wavelink  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø –∫ wavelink

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            with open('config/config.yaml', 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
                self.lavalink_config = config.get('music', {}).get('lavalink', {})

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Lavalink —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not hasattr(self, '_connect_task'):
                self._connect_task = bot.loop.create_task(self.connect_nodes())
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if not hasattr(self, '_event_registered'):
                bot.event(self.on_voice_state_update)
                bot.event(self.on_wavelink_track_end)
                bot.event(self.on_wavelink_track_exception)
                bot.event(self.on_wavelink_track_stuck)
                self._event_registered = True

            Music._initialized = True

    def get_voice_state(self, guild: discord.Guild) -> VoiceState:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        state = self.voice_states.get(guild.id)
        if not state or not state.exists:
            state = VoiceState(self.bot, guild)
            self.voice_states[guild.id] = state
        return state

    async def connect_nodes(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É Lavalink"""
        await self.bot.wait_until_ready()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –Ω–æ–¥–∞
            if hasattr(self, '_node_connected') and self._node_connected:
                return

            self.wavelink_node = wavelink.Node(
                uri=f"{'ws' if not self.lavalink_config['secure'] else 'wss'}://{self.lavalink_config['host']}:{self.lavalink_config['port']}",
                password=self.lavalink_config['password'],
                identifier=self.lavalink_config['identifier']
            )
            
            await wavelink.Pool.connect(nodes=[self.wavelink_node], client=self.bot)
            self._node_connected = True
            print("‚úÖ Lavalink node connected successfully!")
            
        except wavelink.exceptions.InvalidNodeException:
            if not hasattr(self, '_connection_error_logged'):
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Lavalink: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥")
                self._connection_error_logged = True
        except Exception as e:
            if not hasattr(self, '_connection_error_logged'):
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Lavalink: {str(e)}")
                self._connection_error_logged = True

    async def join_voice(self, interaction: discord.Interaction) -> Optional[wavelink.Player]:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"""
        if not interaction.user.voice:
            await interaction.response.send_message(
                embed=create_embed(
                    description="‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!"
                ),
                ephemeral=True
            )
            return None

        channel = interaction.user.voice.channel
        if not channel:
            return None

        try:
            player = wavelink.Pool.get_node().get_player(interaction.guild.id)
            if not player:
                player = await channel.connect(cls=wavelink.Player)
            elif player.channel.id != channel.id:
                await player.move_to(channel)
            return player
        except Exception as e:
            print(f"Error joining voice: {e}")
            return None

    async def ensure_voice(self, interaction: discord.Interaction) -> Optional[wavelink.Player]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É"""
        player = await self.join_voice(interaction)
        if not player:
            return None

        if not player._connected:
            await interaction.response.send_message(
                embed=create_embed(
                    description="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!"
                ),
                ephemeral=True
            )
            return None

        return player

    def get_current_song(self, guild_id: int) -> Optional[Song]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        return self._current_songs.get(guild_id)

    def set_current_song(self, guild_id: int, song: Optional[Song]):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞"""
        if song is None:
            self._current_songs.pop(guild_id, None)
        else:
            self._current_songs[guild_id] = song

    def set_text_channel(self, guild_id: int, channel: discord.TextChannel):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –≥–∏–ª—å–¥–∏–∏"""
        self._text_channels[guild_id] = channel

    def get_text_channel(self, guild_id: int) -> Optional[discord.TextChannel]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –≥–∏–ª—å–¥–∏–∏"""
        return self._text_channels.get(guild_id)

    async def play_song(self, interaction: discord.Interaction, query: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Å–Ω–∏"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
        self.set_text_channel(interaction.guild_id, interaction.channel)
        
        # –°—Ä–∞–∑—É –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        await interaction.response.defer()

        player = await self.ensure_voice(interaction)
        if not player:
            return

        # –ü–æ–∏—Å–∫ —Ç—Ä–µ–∫–∞
        try:
            tracks = await wavelink.Playable.search(query)
            if not tracks:
                await interaction.followup.send(
                    embed=create_embed(
                        description="‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!"
                    ),
                    ephemeral=True
                )
                return

            track = tracks[0]
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Song —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–º
            song = Song(track, interaction.user)
            
            if player.playing:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–∞–º —Ç—Ä–µ–∫ wavelink
                await player.queue.put_wait(track)
                await interaction.followup.send(
                    embed=create_embed(
                        title="üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å",
                        description=f"**{track.title}**\n–ê–≤—Ç–æ—Ä: {track.author}"
                    )
                )
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
                song.start_time = discord.utils.utcnow()
                await player.play(track)
                self.set_current_song(interaction.guild_id, song)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
                await interaction.followup.send(
                    embed=create_embed(
                        title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                        description=f"**{track.title}**\n–ê–≤—Ç–æ—Ä: {track.author}"
                    )
                )

        except Exception as e:
            print(f"Error playing song: {e}")
            await interaction.followup.send(
                embed=create_embed(
                    description="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏!"
                ),
                ephemeral=True
            )

    async def on_voice_state_update(self, member: discord.Member, before: discord.VoiceState, after: discord.VoiceState):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö"""
        if member.id == self.bot.user.id:
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –±–æ—Ç–∞
        if not before.channel:
            return
            
        voice_client = before.channel.guild.voice_client
        if not voice_client or not voice_client.channel:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤ –∫–∞–Ω–∞–ª–µ –ª—é–¥–∏ (–∫—Ä–æ–º–µ –±–æ—Ç–∞)
        members = [m for m in voice_client.channel.members if not m.bot]
        
        if not members:
            try:
                player = wavelink.Pool.get_node().get_player(voice_client.guild.id)
                if player:
                    await player.disconnect()
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
                    text_channel = self.get_text_channel(voice_client.guild.id)
                    if text_channel:
                        await text_channel.send(
                            embed=create_embed(
                                description=f"üëã –ë–æ—Ç –ø–æ–∫–∏–Ω—É–ª –∫–∞–Ω–∞–ª {voice_client.channel.name}, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã—à–ª–∏"
                            )
                        )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç –∫–∞–Ω–∞–ª–∞: {e}")

    async def on_wavelink_track_end(self, payload: wavelink.TrackEndEventPayload):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
        try:
            player = payload.player
            if not player:
                return

            guild_id = int(player.guild.id)
            current_song = self.get_current_song(guild_id)
            
            # –û—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
            self.set_current_song(guild_id, None)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞
            repeat_cog = self.bot.get_cog('Repeat')
            if repeat_cog:
                from cogs.music.Repeat import RepeatMode
                repeat_mode = repeat_cog.get_repeat_mode(guild_id)

                if repeat_mode == RepeatMode.SINGLE and current_song:
                    # –î–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–∞ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞
                    await player.play(current_song.track)
                    self.set_current_song(guild_id, current_song)
                    return
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥–∏, –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –µ–≥–æ
            if not player.queue.is_empty:
                next_track = await player.queue.get_wait()
                next_song = Song(next_track, current_song.requester if current_song else None)
                await player.play(next_track)
                self.set_current_song(guild_id, next_song)

                # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–∞ –æ—á–µ—Ä–µ–¥–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –≤ –∫–æ–Ω–µ—Ü
                if repeat_cog and repeat_mode == RepeatMode.QUEUE and current_song:
                    await player.queue.put_wait(current_song.track)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ç—Ä–µ–∫–µ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
                text_channel = self.get_text_channel(guild_id)
                if text_channel:
                    embed = create_embed(
                        title="üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç",
                        description=f"**{next_track.title}**\n–ê–≤—Ç–æ—Ä: {next_track.author}"
                    )
                    try:
                        await text_channel.send(embed=embed)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Ç—Ä–µ–∫–µ: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")

    async def on_wavelink_track_exception(self, payload: wavelink.TrackExceptionEventPayload):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        try:
            player = payload.player
            if not player:
                return
                
            if not player.queue.is_empty:
                next_track = await player.queue.get_wait()
                await player.play(next_track)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}")

    async def on_wavelink_track_stuck(self, payload: wavelink.TrackStuckEventPayload):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–∫–∞"""
        try:
            player = payload.player
            if not player:
                return
                
            if not player.queue.is_empty:
                next_track = await player.queue.get_wait()
                await player.play(next_track)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∑–∞–≤–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–∫–∞: {e}") 